"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[12755],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),g=a,f=m["".concat(l,".").concat(g)]||m[g]||c[g]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},84100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const s={title:"Kubernetes \u600e\u9ebc\u8a08\u7b97 imageFS",authors:"hwchiu",tags:["Linux","Kubernetes"]},i=void 0,o={permalink:"/2024/02/26/k8s-imagefs",source:"@site/blog/2024/02-26-k8s-imagefs.md",title:"Kubernetes \u600e\u9ebc\u8a08\u7b97 imageFS",description:"Kubernetes \u7bc0\u9ede\u4e2d\u6709\u4e00\u500b\u8cc7\u8a0a\uff0c\u7d00\u9304\u7576\u524d Image FS \u7684\u4f7f\u7528\u72c0\u6cc1\uff0c\u88e1\u9762\u5305\u542b available, capacity \u4ee5\u53ca used",date:"2024-02-26T00:00:00.000Z",formattedDate:"February 26, 2024",tags:[{label:"Linux",permalink:"/tags/linux"},{label:"Kubernetes",permalink:"/tags/kubernetes"}],readingTime:3.265,hasTruncateMarker:!1,authors:[{name:"HungWei Chiu",title:"Blogger",url:"https://github.com/hwchiu",imageURL:"https://github.com/hwchiu.png",key:"hwchiu"}],frontMatter:{title:"Kubernetes \u600e\u9ebc\u8a08\u7b97 imageFS",authors:"hwchiu",tags:["Linux","Kubernetes"]},nextItem:{title:"Nginx Proxy_Pass \u4e0d\u6703\u91cd\u65b0\u67e5\u8a62 DNS",permalink:"/2024/01/18/nginx-proxy"}},l={authorsImageUrls:[void 0]},u=[],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Kubernetes \u7bc0\u9ede\u4e2d\u6709\u4e00\u500b\u8cc7\u8a0a\uff0c\u7d00\u9304\u7576\u524d Image FS \u7684\u4f7f\u7528\u72c0\u6cc1\uff0c\u88e1\u9762\u5305\u542b available, capacity \u4ee5\u53ca used"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},'# kubectl get --raw "/api/v1/nodes/kind-worker/proxy/stats/summary" | grep imageFs -A 5\n   "imageFs": {\n    "time": "2024-02-26T14:40:12Z",\n    "availableBytes": 21507072000,\n    "capacityBytes": 31025332224,\n    "usedBytes": 541495296,\n    "inodesFree": 3668005,\n')),(0,a.kt)("p",null,"\u4e0a\u5716\u53ef\u4ee5\u770b\u5230 imageFS \u76ee\u524d\u986f\u793a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"availableBytes: 21507072000"),(0,a.kt)("li",{parentName:"ol"},"capacityBytes: 31025332224"),(0,a.kt)("li",{parentName:"ol"},"usedBytes: 541495296"),(0,a.kt)("li",{parentName:"ol"},"inodesFree: 3668005")),(0,a.kt)("p",null,"Kubelet \u672c\u8eab\u662f\u6c92\u6709\u53bb\u7d00\u9304\u4ee5\u53ca\u8a08\u7b97\u9019\u4e9b\uff0c\u800c\u662f\u900f\u904e CRI \u7684\u6a19\u6e96\u53bb\u554f\u5e95\u4e0b contaienr runtime \u4f86\u8655\u7406\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/cri-api/blob/c75ef5b/pkg/apis/runtime/v1/api.proto#L120-L136"},"https://github.com/kubernetes/cri-api/blob/c75ef5b/pkg/apis/runtime/v1/api.proto#L120-L136")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang="},"service ImageService {\n    // ListImages lists existing images.\n    rpc ListImages(ListImagesRequest) returns (ListImagesResponse) {}\n    // ImageStatus returns the status of the image. If the image is not\n    // present, returns a response with ImageStatusResponse.Image set to\n    // nil.\n    rpc ImageStatus(ImageStatusRequest) returns (ImageStatusResponse) {}\n    // PullImage pulls an image with authentication config.\n    rpc PullImage(PullImageRequest) returns (PullImageResponse) {}\n    // RemoveImage removes the image.\n    // This call is idempotent, and must not return an error if the image has\n    // already been removed.\n    rpc RemoveImage(RemoveImageRequest) returns (RemoveImageResponse) {}\n    // ImageFSInfo returns information of the filesystem that is used to store images.\n    rpc ImageFsInfo(ImageFsInfoRequest) returns (ImageFsInfoResponse) {}\n}\n")),(0,a.kt)("p",null,"\u65e2\u7136 CRI \u6709\u63d0\u4f9b\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 crictl \u5617\u8a66\u6316\u6398\u770b\u770b\uff0c\u679c\u7136\u6709\u627e\u5230\u4e00\u500b imagefsinfo \u7684\u8cc7\u8a0a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},'# crictl  imagefsinfo\n{\n  "status": {\n    "timestamp": "1708958572632331985",\n    "fsId": {\n      "mountpoint": "/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs"\n    },\n    "usedBytes": {\n      "value": "541495296"\n    },\n    "inodesUsed": {\n      "value": "18150"\n    }\n  }\n}\n')),(0,a.kt)("p",null,'\u8a72\u6307\u4ee4\u56de\u5831\u4e86\u76ee\u524d\u4f7f\u7528\u4e86 "541495296" Bytes\uff0c\u8207 K8s \u56de\u5831\u7684\u4e00\u6a23\uff0c\u4f46\u662f\u4e26\u6c92\u6709\u89e3\u91cb\u600e\u9ebc\u8a08\u7b97 available \u4ee5\u53ca capacity\u3002\n\u5176\u4e2d\u9084\u6709\u63d0\u5230\u4e00\u500b fsId(FilesystemIdentifier)'),(0,a.kt)("p",null,"\u63a5\u4e0b\u4f86\u5f9e kubelet \u7684\u539f\u59cb\u78bc\u53ef\u4ee5\u6293\u5230"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/kubernetes/blob/cc5362ebc17e1376fa79b510f7f354dbffe7f92e/pkg/kubelet/stats/cri_stats_provider.go#L388-L425"},"https://github.com/kubernetes/kubernetes/blob/cc5362ebc17e1376fa79b510f7f354dbffe7f92e/pkg/kubelet/stats/cri_stats_provider.go#L388-L425")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang="},'...\n    imageFsInfo, err := p.getFsInfo(fs.GetFsId())\n    if err != nil {\n        return nil, nil, fmt.Errorf("get filesystem info: %w", err)\n    }\n    if imageFsInfo != nil {\n        // The image filesystem id is unknown to the local node or there\'s\n        // an error on retrieving the stats. In these cases, we omit those\n        // stats and return the best-effort partial result. See\n        // https://github.com/kubernetes/heapster/issues/1793.\n        imageFsRet.AvailableBytes = &imageFsInfo.Available\n        imageFsRet.CapacityBytes = &imageFsInfo.Capacity\n        imageFsRet.InodesFree = imageFsInfo.InodesFree\n        imageFsRet.Inodes = imageFsInfo.Inodes\n    }\n...\n\n')),(0,a.kt)("p",null,"\u900f\u904e imageFsInfo \u5167\u7684 GetFsId \u7372\u5f97\u76f8\u95dc\u8cc7\u8a0a\uff0c\u5f80\u4e0b\u53bb\u7ffb getFsInfo \u51fd\u5f0f"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/kubernetes/blob/cc5362ebc17e1376fa79b510f7f354dbffe7f92e/pkg/kubelet/stats/cri_stats_provider.go#L449"},"https://github.com/kubernetes/kubernetes/blob/cc5362ebc17e1376fa79b510f7f354dbffe7f92e/pkg/kubelet/stats/cri_stats_provider.go#L449")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang="},'func (p *criStatsProvider) getFsInfo(fsID *runtimeapi.FilesystemIdentifier) (*cadvisorapiv2.FsInfo, error) {\n    if fsID == nil {\n        klog.V(2).InfoS("Failed to get filesystem info: fsID is nil")\n        return nil, nil\n    }\n    mountpoint := fsID.GetMountpoint()\n    fsInfo, err := p.cadvisor.GetDirFsInfo(mountpoint)\n    if err != nil {\n        msg := "Failed to get the info of the filesystem with mountpoint"\n        if errors.Is(err, cadvisorfs.ErrNoSuchDevice) ||\n            errors.Is(err, cadvisorfs.ErrDeviceNotInPartitionsMap) ||\n            errors.Is(err, cadvisormemory.ErrDataNotFound) {\n            klog.V(2).InfoS(msg, "mountpoint", mountpoint, "err", err)\n        } else {\n            klog.ErrorS(err, msg, "mountpoint", mountpoint)\n            return nil, fmt.Errorf("%s: %w", msg, err)\n        }\n        return nil, nil\n    }\n    return &fsInfo, nil\n}\n')),(0,a.kt)("p",null,"\u900f\u904e fsID.GetMountpoint() \u4f86\u53d6\u5f97\u5c0d\u61c9\u7684 mountPoint\u3002\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/cri-api/blob/v0.25.16/pkg/apis/runtime/v1alpha2/api.pb.go#L7364"},"https://github.com/kubernetes/cri-api/blob/v0.25.16/pkg/apis/runtime/v1alpha2/api.pb.go#L7364")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-golang="},'func (m *FilesystemIdentifier) GetMountpoint() string {\n    if m != nil {\n        return m.Mountpoint\n    }\n    return ""\n}\n\n')),(0,a.kt)("p",null,"\u7531\u65bc\u4e0a\u8ff0\u7684\u8def\u5f91\u662f '/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs'\uff0c\u642d\u914d\u6211\u7684 'df' \u7d50\u679c\u53bb\u6bd4\u5c0d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"# df -BKB\nFilesystem     1kB-blocks      Used  Available Use% Mounted on\noverlay        31025333kB 9502487kB 21506069kB  31% /\ntmpfs             67109kB       0kB    67109kB   0% /dev\nshm               67109kB       0kB    67109kB   0% /dev/shm\n/dev/root      31025333kB 9502487kB 21506069kB  31% /var\ntmpfs          16794874kB    9552kB 16785322kB   1% /run\n")),(0,a.kt)("p",null,"\u5c07\u4e0a\u8ff0 /var \u7684\u5927\u5c0f\u8207\u4e4b\u524d\u53bb\u6bd4\u5c0d\uff0c\u5e7e\u4e4e\u543b\u5408\uff0c\u6240\u4ee5\u770b\u8d77\u4f86\u5c31\u662f\u6839\u64da\u8def\u5f91\u627e\u5230 mountPoint \u4e26\u4e14\u5f97\u5230\u76ee\u524d\u7684\u4f7f\u7528\u91cf\u4ee5\u53ca\u7528\u91cf\u3002"),(0,a.kt)("p",null,'"availableBytes": 21507072000,\n"capacityBytes": 31025332224,'))}c.isMDXComponent=!0}}]);
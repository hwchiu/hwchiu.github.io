"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[2907],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,k=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(k,o(o({ref:t},c),{},{components:r})):n.createElement(k,o({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},22028:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const i={title:"Kubevirt \u521d\u9ad4\u9a57",authors:"hwchiu",tags:["Kubernetes","Kubevirt"]},o=void 0,l={permalink:"/2023/10/10/kubevirt-macos",source:"@site/blog/2023/10-10-kubevirt-macos.md",title:"Kubevirt \u521d\u9ad4\u9a57",description:"\u672c\u6587\u7d00\u9304\u5982\u4f55\u65bc Linux(Ubuntu 22.04) \u74b0\u5883\u4e0a\u7c21\u6613\u642d\u5efa Kubevirt \u7684\u74b0\u5883",date:"2023-10-10T00:00:00.000Z",formattedDate:"October 10, 2023",tags:[{label:"Kubernetes",permalink:"/tags/kubernetes"},{label:"Kubevirt",permalink:"/tags/kubevirt"}],readingTime:7.22,hasTruncateMarker:!1,authors:[{name:"HungWei Chiu",title:"Blogger",url:"https://github.com/hwchiu",imageURL:"https://github.com/hwchiu.png",key:"hwchiu"}],frontMatter:{title:"Kubevirt \u521d\u9ad4\u9a57",authors:"hwchiu",tags:["Kubernetes","Kubevirt"]},nextItem:{title:"[MacOS ]\u96a8\u624b\u7b46\u8a18 Sed \u8207 Rename \u7684\u4f7f\u7528",permalink:"/2023/10/09/sed-rename"}},s={authorsImageUrls:[void 0]},u=[{value:"KVM",id:"kvm",level:2},{value:"Kubernetes",id:"kubernetes",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u672c\u6587\u7d00\u9304\u5982\u4f55\u65bc Linux(Ubuntu 22.04) \u74b0\u5883\u4e0a\u7c21\u6613\u642d\u5efa Kubevirt \u7684\u74b0\u5883"),(0,a.kt)("h1",{id:"\u74b0\u5883\u642d\u5efa"},"\u74b0\u5883\u642d\u5efa"),(0,a.kt)("h2",{id:"kvm"},"KVM"),(0,a.kt)("p",null,"\u5b89\u88dd\u6307\u4ee4\u4f86\u6aa2\u67e5 qemu \u76f8\u95dc\u72c0\u614b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"sudo apt install libvirt-clients\n")),(0,a.kt)("p",null,"\u4f7f\u7528 virt-host-validate \u6aa2\u67e5\u76f8\u95dc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ virt-host-validate qemu\n  QEMU: Checking for hardware virtualization                                 : PASS\n  QEMU: Checking if device /dev/kvm exists                                   : PASS\n  QEMU: Checking if device /dev/kvm is accessible                            : FAIL (Check /dev/kvm is world writable or you are in a group that is allowed to access it)\n  QEMU: Checking if device /dev/vhost-net exists                             : PASS\n  QEMU: Checking if device /dev/net/tun exists                               : PASS\n  QEMU: Checking for cgroup 'cpu' controller support                         : PASS\n  QEMU: Checking for cgroup 'cpuacct' controller support                     : PASS\n  QEMU: Checking for cgroup 'cpuset' controller support                      : PASS\n  QEMU: Checking for cgroup 'memory' controller support                      : PASS\n  QEMU: Checking for cgroup 'devices' controller support                     : WARN (Enable 'devices' in kernel Kconfig file or mount/enable cgroup controller in your system)\n  QEMU: Checking for cgroup 'blkio' controller support                       : PASS\n  QEMU: Checking for device assignment IOMMU support                         : WARN (No ACPI DMAR table found, IOMMU either disabled in BIOS or not supported by this hardware platform)\n  QEMU: Checking for secure guest support                                    : WARN (Unknown if this platform has Secure Guest support)\n")),(0,a.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u4e2d\u9593\u6709\u4e00\u500b\u932f\u8aa4\uff0c\u9019\u6642\u5019\u9700\u8981\u5b89\u88dd ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo apt install qemu-kvm")," \u4e26\u4e14\u8abf\u6574\u6b0a\u9650 ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo usermod -aG kvm $USER"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ virt-host-validate qemu\n  QEMU: Checking for hardware virtualization                                 : PASS\n  QEMU: Checking if device /dev/kvm exists                                   : PASS\n  QEMU: Checking if device /dev/kvm is accessible                            : PASS\n  QEMU: Checking if device /dev/vhost-net exists                             : PASS\n  QEMU: Checking if device /dev/net/tun exists                               : PASS\n  QEMU: Checking for cgroup 'cpu' controller support                         : PASS\n  QEMU: Checking for cgroup 'cpuacct' controller support                     : PASS\n  QEMU: Checking for cgroup 'cpuset' controller support                      : PASS\n  QEMU: Checking for cgroup 'memory' controller support                      : PASS\n  QEMU: Checking for cgroup 'devices' controller support                     : WARN (Enable 'devices' in kernel Kconfig file or mount/enable cgroup controller in your system)\n  QEMU: Checking for cgroup 'blkio' controller support                       : PASS\n  QEMU: Checking for device assignment IOMMU support                         : WARN (No ACPI DMAR table found, IOMMU either disabled in BIOS or not supported by this hardware platform)\n  QEMU: Checking for secure guest support                                    : WARN (Unknown if this platform has Secure Guest support)\n")),(0,a.kt)("h2",{id:"kubernetes"},"Kubernetes"),(0,a.kt)("p",null,"\u900f\u904e minikube \u642d\u5efa\u4e00\u500b k8s (provider\u63a1\u7528 docker \u6e1b\u5c11\u7b2c\u4e8c\u5c64\u865b\u64ec\u5316)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ minikube start --cni=flannel\n")),(0,a.kt)("p",null,"\u53e2\u96c6\u6e96\u5099\u597d\u5f8c\uff0c\u5b89\u88dd kubevirt-operator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ export VERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- '-rc' | sort -r | head -1 | awk -F': ' '{print $2}' | sed 's/,//' | xargs)\n$ echo $VERSION\n$ kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-operator.yaml\nnamespace/kubevirt created\ncustomresourcedefinition.apiextensions.k8s.io/kubevirts.kubevirt.io created\npriorityclass.scheduling.k8s.io/kubevirt-cluster-critical created\nclusterrole.rbac.authorization.k8s.io/kubevirt.io:operator created\nserviceaccount/kubevirt-operator created\nrole.rbac.authorization.k8s.io/kubevirt-operator created\nrolebinding.rbac.authorization.k8s.io/kubevirt-operator-rolebinding created\nclusterrole.rbac.authorization.k8s.io/kubevirt-operator created\nclusterrolebinding.rbac.authorization.k8s.io/kubevirt-operator created\ndeployment.apps/virt-operator created\n")),(0,a.kt)("p",null,"\u5be6\u9a57\u7576\u4e0b\u4f7f\u7528\u7684\u7248\u672c\u662f v1.1.0-alpha.0\uff0c\u5b89\u88dd\u5b8c\u7562\u5f8c\u6aa2\u67e5 kubevirt namespace \u7684\u8cc7\u6e90"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ kubectl -n kubevirt get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nvirt-operator-57f9fb965d-5lnqf     1/1     Running   0          46m\nvirt-operator-57f9fb965d-f5zg4     1/1     Running   0          46m\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u4f86\u5b89\u88dd CRD \u7269\u4ef6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-cr.yaml\n")),(0,a.kt)("p",null,"\u5b89\u88dd\u5b8c\u7562\u5f8c\u53ef\u4ee5\u770b\u5230\u6709\u4e00\u500b\u540d\u70ba ",(0,a.kt)("inlineCode",{parentName:"p"},"kubevirt")," \u7684\u7269\u4ef6(CRD\u70ba kubevirt,\u7c21\u7a31 kv)\u88ab\u5275\u7acb\uff0c\u56e0\u6b64 operator \u5c31\u6703\u91dd\u5c0d\u8a72\u7269\u4ef6\u53bb\u5275\u7acb kubevirt \u76f8\u95dc\u7684\u670d\u52d9 Pod"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},'$ kubectl -n kubevirt get kv kubevirt -o yaml\napiVersion: kubevirt.io/v1\nkind: KubeVirt\nmetadata:\n  annotations:\n    kubevirt.io/latest-observed-api-version: v1\n    kubevirt.io/storage-observed-api-version: v1\n  creationTimestamp: "2023-10-10T14:35:55Z"\n  finalizers:\n  - foregroundDeleteKubeVirt\n  generation: 2\n  name: kubevirt\n  namespace: kubevirt\n  resourceVersion: "1490"\n  uid: bc621d93-4910-4b1f-b3c8-f8f1f4e27a38\nspec:\n  certificateRotateStrategy: {}\n  configuration:\n    developerConfiguration: {}\n  customizeComponents: {}\n  imagePullPolicy: IfNotPresent                                                                                                                                                                  workloadUpdateStrategy: {}\n$ kubectl -n kubevirt get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nvirt-api-77f8d679fc-hntws          1/1     Running   0          49m\nvirt-controller-6689488456-4jtv8   1/1     Running   0          48m\nvirt-controller-6689488456-68hnz   1/1     Running   0          48m\nvirt-handler-psc4w                 1/1     Running   0          48m\n')),(0,a.kt)("p",null,"\u57fa\u672c\u4e0a\u5c31\u662f\u9810\u8a2d\u7684\u8a2d\u5b9a\u6a94\u6848\uff0c\u7136\u5f8c\u5c0d\u61c9\u7684 API, Controller \u4ee5\u53ca Handler \u90fd\u88ab\u5275\u5efa\u51fa\u4f86\u8655\u7406\u5f8c\u7e8c\u7684\u64cd\u4f5c\u3002"),(0,a.kt)("h1",{id:"virtctl"},"Virtctl"),(0,a.kt)("p",null,"\u900f\u904e\u5b98\u65b9\u6307\u4ee4\u76f4\u63a5\u6293\u53d6\u5c0d\u61c9\u7248\u672c\u7684 virtctl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"VERSION=$(kubectl get kubevirt.kubevirt.io/kubevirt -n kubevirt -o=jsonpath=\"{.status.observedKubeVirtVersion}\")\nARCH=$(uname -s | tr A-Z a-z)-$(uname -m | sed 's/x86_64/amd64/') || windows-amd64.exe\necho ${ARCH}\ncurl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/virtctl-${VERSION}-${ARCH}\nchmod +x virtctl\nsudo install virtctl /usr/local/bin\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},'-> % virtctl version\nClient Version: version.Info{GitVersion:"v1.1.0-alpha.0", GitCommit:"67902ed9de43d7a0b94aa72b8fd7f48f31ca4285", GitTreeState:"clean", BuildDate:"2023-09-18T10:45:14Z", GoVersion:"go1.19.9", Compiler:"gc", Platform:"darwin/arm64"}\nServer Version: version.Info{GitVersion:"v1.1.0-alpha.0", GitCommit:"67902ed9de43d7a0b94aa72b8fd7f48f31ca4285", GitTreeState:"clean", BuildDate:"2023-09-18T12:03:45Z", GoVersion:"go1.19.9", Compiler:"gc", Platform:"linux/arm64"}\n')),(0,a.kt)("p",null,"'''info\n\u5b98\u65b9\u6587\u4ef6\u6709\u8aaa\u660e\u53ef\u4ee5\u900f\u904e kubectl krew \u7684\u5e73\u53f0\u4f86\u5b89\u88dd virtctl \u6307\u4ee4\uff0c\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl krew install virt")," \u4f86\u5b89\u88dd\u4e26\u4f7f\u7528\uff0c\u4f46\u662f\u76ee\u524d\u4e26\u6c92\u6709\u652f\u63f4 darwin-arm64 (MacOS M1/M2)\n'''"),(0,a.kt)("h1",{id:"\u5b89\u88dd-vm"},"\u5b89\u88dd VM"),(0,a.kt)("p",null,"\u900f\u904e\u5b98\u65b9\u793a\u7bc4\u6a94\u6848\u90e8\u7f72\u7b2c\u4e00\u500b VM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash="},"$ kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\nvirtualmachine.kubevirt.io/testvm created\n$ kubectl get vm\nNAME     AGE   STATUS    READY\ntestvm   7s    Stopped   False\n")),(0,a.kt)("p",null,"\u9810\u8a2d\u60c5\u6cc1\u4e0b\uff0c\u5275\u5efa\u597d VM \u4e26\u4e0d\u4ee3\u8868 VM \u5df2\u7d93\u555f\u52d5\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"virtctl")," \u5c07\u8a72 VM \u7d66\u904b\u884c\u8d77\u4f86"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ virtctl start testvm\nVM testvm was scheduled to start\n")),(0,a.kt)("p",null,"\u7576 VM \u555f\u52d5\u5f8c\uff0c\u5c0d\u61c9\u7684 Pod \u5c31\u6703\u6b63\u5f0f\u88ab\u90e8\u7f72\u5230\u74b0\u5883\u5167"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get pods -o wide\n")),(0,a.kt)("p",null,"\u9019\u6642\u5019\u4f86\u7814\u7a76\u4e00\u4e0b\u8a72 Pod \u7684\u4e00\u4e9b\u67b6\u69cb"),(0,a.kt)("p",null,"\u5148\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"virtctl console testvm")," \u767b\u5165\u5f8c\u89c0\u5bdf\u4e00\u4e0b VM IP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc pfifo_fast qlen 1000\n    link/ether 52:54:00:0c:00:55 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.2/24 brd 10.0.2.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::5054:ff:fe0c:55/64 scope link\n       valid_lft forever preferred_lft forever\n$ ip r\ndefault via 10.0.2.1 dev eth0\n10.0.2.0/24 dev eth0  src 10.0.2.2\n")),(0,a.kt)("p",null,"IP \u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"10.0.2.2")," \u4e26\u4e14 Gateway \u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"10.0.2.1"),"\n\u9019\u6642\u5019\u9032\u5165\u5230\u5c0d\u61c9\u7684 Pod \u53bb\u89c0\u5bdf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl exec -it virt-launcher-testvm-pnn4j -- bash\nbash-5.1$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0@if14: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UP group default\n    link/ether 12:37:77:cf:6d:63 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.244.0.10/24 brd 10.244.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n3: k6t-eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UP group default qlen 1000\n    link/ether 02:00:00:00:00:00 brd ff:ff:ff:ff:ff:ff\n    inet 10.0.2.1/24 brd 10.0.2.255 scope global k6t-eth0\n       valid_lft forever preferred_lft forever\n4: tap0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc fq_codel master k6t-eth0 state UP group default qlen 1000\n    link/ether d6:0e:c5:6f:41:f1 brd ff:ff:ff:ff:ff:ff\nbash-5.1$\n")),(0,a.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230 Pod \u4e0a\u9762\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"k6t-eth0")," \u662f\u6709 IP ",(0,a.kt)("inlineCode",{parentName:"p"},"10.0.2.1")," \u540c\u6642\u53ef\u4ee5\u770b\u5230\u4e0b\u65b9\u6709\u4e00\u500b tap0 \u7684\u7db2\u5361\uff0c\u8a72\u7db2\u5361\u6709\u8a2d\u5b9a ",(0,a.kt)("inlineCode",{parentName:"p"},"master k6t-eth0"),"\n\u56e0\u6b64\u53ef\u4ee5\u63a8\u65b7 ",(0,a.kt)("inlineCode",{parentName:"p"},"k6t-eth0")," \u662f Linux Bridge\uff0c tap0 \u5247\u662f bridge \u4e0b\u7684\u4e00\u500b Port\uff0c\u900f\u904e\u4e0b\u5217\u6307\u4ee4\u53ef\u4ee5\u78ba\u8a8d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nbash-5.1$ ls /sys/class/net/k6t-eth0/brif\ntap0\nbash-5.1$ ls /sys/class/net/k6t-eth0/bridge/\nageing_time    group_fwd_mask          multicast_last_member_count     multicast_query_response_interval  nf_call_arptables   root_port                 vlan_protocol\nbridge_id      hash_elasticity         multicast_last_member_interval  multicast_query_use_ifaddr         nf_call_ip6tables   stp_state                 vlan_stats_enabled\ndefault_pvid   hash_max                multicast_membership_interval   multicast_router                   nf_call_iptables    tcn_timer                 vlan_stats_per_port\nflush          hello_time              multicast_mld_version           multicast_snooping                 no_linklocal_learn  topology_change\nforward_delay  hello_timer             multicast_querier               multicast_startup_query_count      priority            topology_change_detected\ngc_timer       max_age                 multicast_querier_interval      multicast_startup_query_interval   root_id             topology_change_timer\ngroup_addr     multicast_igmp_version  multicast_query_interval        multicast_stats_enabled            root_path_cost      vlan_filtering\nbash-5.1$\n")),(0,a.kt)("p",null,"k6t-eth0 \u5e95\u4e0b\u6709\u773e\u591a bridge \u7684\u8a2d\u5b9a\uff0c\u4e26\u4e14 brif \u5e95\u4e0b\u6709 tap0\uff0c\u800c\u5be6\u52d9\u4e0a\u8a72 tap0 \u5247\u662f kvm \u5275\u5efa vm \u5f8c\u5c07\u5176\u7d81\u5230 VM \u5167\uff0c\u56e0\u6b64\u6703\u8207 VM \u5167\u7684 eth0 \u639b\u52fe\uff0c\u53ef\u4ee5\u60f3\u6210\u662f\u4e00\u689d\u5927\u6c34\u7ba1\uff0c\u4e00\u908a\u9032\u53bb\u53e6\u5916\u4e00\u908a\u51fa\u4f86\n\u770b\u4f86\u8a73\u7d30\u7d30\u7bc0\u9084\u662f\u9700\u8981\u95b1\u8b80",(0,a.kt)("a",{parentName:"p",href:"https://kubevirt.io/user-guide/virtual_machines/interfaces_and_networks/#passt"},"interface networks"),"\uff0c\u4f3c\u4e4e\u63d0\u4f9b\u4e0d\u540c\u7db2\u8def\u6a21\u5f0f\u4f86\u9054\u6210\u4e0d\u540c\u529f\u80fd\uff0c\u6709\u7a7a\u4f86\u73a9\u770b\u770b\u5f7c\u6b64\u5dee\u7570\u7814\u7a76\u4e0b\u5be6\u4f5c\u7d30\u7bc0\u3002"))}d.isMDXComponent=!0}}]);
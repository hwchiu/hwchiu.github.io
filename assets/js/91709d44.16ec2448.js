"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[2563],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},k=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),k=r,h=c["".concat(s,".").concat(k)]||c[k]||u[k]||a;return n?o.createElement(h,l(l({ref:t},d),{},{components:n})):o.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}k.displayName="MDXCreateElement"},72623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={title:"Floodlight Dijkstra",date:"2013-11-03 09:52",tags:["Floodlight","SDN","Java","Network","Algorithm","SourceCode"],description:"\u9019\u7bc7\u6587\u7ae0\u7528\u4f86\u4ecb\u7d39\u5728 Fllodlight \u4e2d\u662f\u5982\u4f55\u53bb\u5b8c\u6210\u4e0b\u5217\u4e8b\u60c5, 1)\u4e0d\u4f7f\u7528 Spanning Tree Protocol \u7684\u65b9\u5f0f\u4e5f\u80fd\u5920\u6b63\u78ba\u7684\u5728\u6709\u8ff4\u5708\u7684\u7db2\u8def\u62d3\u6a38\u4e2d\u4f86\u50b3\u8f38\u5c01\u5305\uff0c2) \u91dd\u5c0d\u4efb\u610f\u5169\u500b\u9ede\u5c0d\u9ede\u7684\u7db2\u8def\u7bc0\u9ede\uff0c\u80fd\u5920\u627e\u5230\u4e00\u689d\u6700\u77ed\u7684\u8def\u5f91\u7528\u4f86\u50b3\u8f38\u5c01\u3002 \u9019\u4e9b\u4e8b\u60c5\u5728\u8a72\u63a7\u5236\u5668\u4e2d\uff0c\u5176\u5be6\u662f\u900f\u904e\u8a08\u7b97\u4e00\u500b Tree \u7684\u65b9\u5f0f\u4f86\u5b8c\u6210\u6240\u8b02\u7684 Broadcast Tree, \u85c9\u6b64\u907f\u514d\u5ee3\u64ad\u98a8\u66b4\u7684\u554f\u984c\uff0c\u540c\u6642\u900f\u904e Djikstra \u7684\u6f14\u7b97\u6cd5\u4f86\u5728\u62d3\u6a38\u4e2d\u627e\u5230\u4e00\u500b\u6700\u77ed\u8def\u5f91\u4f86\u50b3\u8f38\u5c01\u5305\u3002"},l="Preface",i={unversionedId:"techPost/2013/floodlights-dijkstra",id:"techPost/2013/floodlights-dijkstra",title:"Floodlight Dijkstra",description:"\u9019\u7bc7\u6587\u7ae0\u7528\u4f86\u4ecb\u7d39\u5728 Fllodlight \u4e2d\u662f\u5982\u4f55\u53bb\u5b8c\u6210\u4e0b\u5217\u4e8b\u60c5, 1)\u4e0d\u4f7f\u7528 Spanning Tree Protocol \u7684\u65b9\u5f0f\u4e5f\u80fd\u5920\u6b63\u78ba\u7684\u5728\u6709\u8ff4\u5708\u7684\u7db2\u8def\u62d3\u6a38\u4e2d\u4f86\u50b3\u8f38\u5c01\u5305\uff0c2) \u91dd\u5c0d\u4efb\u610f\u5169\u500b\u9ede\u5c0d\u9ede\u7684\u7db2\u8def\u7bc0\u9ede\uff0c\u80fd\u5920\u627e\u5230\u4e00\u689d\u6700\u77ed\u7684\u8def\u5f91\u7528\u4f86\u50b3\u8f38\u5c01\u3002 \u9019\u4e9b\u4e8b\u60c5\u5728\u8a72\u63a7\u5236\u5668\u4e2d\uff0c\u5176\u5be6\u662f\u900f\u904e\u8a08\u7b97\u4e00\u500b Tree \u7684\u65b9\u5f0f\u4f86\u5b8c\u6210\u6240\u8b02\u7684 Broadcast Tree, \u85c9\u6b64\u907f\u514d\u5ee3\u64ad\u98a8\u66b4\u7684\u554f\u984c\uff0c\u540c\u6642\u900f\u904e Djikstra \u7684\u6f14\u7b97\u6cd5\u4f86\u5728\u62d3\u6a38\u4e2d\u627e\u5230\u4e00\u500b\u6700\u77ed\u8def\u5f91\u4f86\u50b3\u8f38\u5c01\u5305\u3002",source:"@site/docs/techPost/2013/floodlights-dijkstra.md",sourceDirName:"techPost/2013",slug:"/techPost/2013/floodlights-dijkstra",permalink:"/docs/techPost/2013/floodlights-dijkstra",draft:!1,tags:[{label:"Floodlight",permalink:"/docs/tags/floodlight"},{label:"SDN",permalink:"/docs/tags/sdn"},{label:"Java",permalink:"/docs/tags/java"},{label:"Network",permalink:"/docs/tags/network"},{label:"Algorithm",permalink:"/docs/tags/algorithm"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"Floodlight Dijkstra",date:"2013-11-03 09:52",tags:["Floodlight","SDN","Java","Network","Algorithm","SourceCode"],description:"\u9019\u7bc7\u6587\u7ae0\u7528\u4f86\u4ecb\u7d39\u5728 Fllodlight \u4e2d\u662f\u5982\u4f55\u53bb\u5b8c\u6210\u4e0b\u5217\u4e8b\u60c5, 1)\u4e0d\u4f7f\u7528 Spanning Tree Protocol \u7684\u65b9\u5f0f\u4e5f\u80fd\u5920\u6b63\u78ba\u7684\u5728\u6709\u8ff4\u5708\u7684\u7db2\u8def\u62d3\u6a38\u4e2d\u4f86\u50b3\u8f38\u5c01\u5305\uff0c2) \u91dd\u5c0d\u4efb\u610f\u5169\u500b\u9ede\u5c0d\u9ede\u7684\u7db2\u8def\u7bc0\u9ede\uff0c\u80fd\u5920\u627e\u5230\u4e00\u689d\u6700\u77ed\u7684\u8def\u5f91\u7528\u4f86\u50b3\u8f38\u5c01\u3002 \u9019\u4e9b\u4e8b\u60c5\u5728\u8a72\u63a7\u5236\u5668\u4e2d\uff0c\u5176\u5be6\u662f\u900f\u904e\u8a08\u7b97\u4e00\u500b Tree \u7684\u65b9\u5f0f\u4f86\u5b8c\u6210\u6240\u8b02\u7684 Broadcast Tree, \u85c9\u6b64\u907f\u514d\u5ee3\u64ad\u98a8\u66b4\u7684\u554f\u984c\uff0c\u540c\u6642\u900f\u904e Djikstra \u7684\u6f14\u7b97\u6cd5\u4f86\u5728\u62d3\u6a38\u4e2d\u627e\u5230\u4e00\u500b\u6700\u77ed\u8def\u5f91\u4f86\u50b3\u8f38\u5c01\u5305\u3002"},sidebar:"techPost",previous:{title:"FloodlightModule-Topology module",permalink:"/docs/techPost/2013/floodlightmodule-topology"},next:{title:"Freebsd_Quota",permalink:"/docs/techPost/2013/freebsd-quota"}},s={},p=[{value:"Step1",id:"step1",level:2},{value:"Step 2",id:"step-2",level:2},{value:"Step 3",id:"step-3",level:2},{value:"Step 4",id:"step-4",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"preface"},"Preface"),(0,r.kt)("p",null,"\u518d",(0,r.kt)("strong",{parentName:"p"},"Floodlight")," \u4e2d\uff0c\u6703\u5b9a\u671f\u9001\u51fa ",(0,r.kt)("strong",{parentName:"p"},"LLDP")," \u7684\u5c01\u5305\u53bb\u5b78\u7fd2\u7576\u524d\u62d3\u6a38\u7684\u60c5\u6cc1\n\u4e00\u65e6\u767c\u7dda\u62d3\u6a38\u60c5\u6cc1\u6709\u6240\u6539\u8b8a\uff0c\u5c31\u6703\u7522\u751f\u4e00\u500b\u65b0\u7684TopologyInstance\u7269\u4ef6\n\u5728\u9019\u500b\u7269\u4ef6\u4e4b\u4e2d\u5c31\u6703\u91cd\u65b0\u53bb\u8a08\u7b97 ",(0,r.kt)("strong",{parentName:"p"},"broadcast tree")," \u4ee5\u53ca\u62d3\u6a38\u4e2d\u6bcf\u500bswitch\u7684 ",(0,r.kt)("strong",{parentName:"p"},"shortest path tree"),"\u3002"),(0,r.kt)("p",null,"\u518d ",(0,r.kt)("strong",{parentName:"p"},"TopologyInstance")," \u88e1\u9762\u662f\u63a1\u7528 ",(0,r.kt)("strong",{parentName:"p"},"dijkstra"),"\u7684\u65b9\u5f0f\u4f86\u5efa\u6240\u8b02\u7684routing path."),(0,r.kt)("p",null,"\u518d ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateShortestPathTreeInClusters"),"\u88e1\u9762\n\u6703\u91dd\u5c0d\u6bcf\u500bcluster\u4e2d\u7684\u6bcf\u500bnode\u90fd\u53bb\u8dd1\u4e00\u6b21dijkstra,\u4f86\u5efa\u7acb\u9019\u500bnode\u518d\u8a72cluster\u4e2d\u7684shortest path tree."),(0,r.kt)("h1",{id:"function"},"Function"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"protected BroadcastTree dijkstra(Cluster c, Long root,Map<Link, Integer> linkCost,boolean isDstRooted)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cluster c"),": \u8a72node\u6240\u5c6c\u7684cluster"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Long root"),": \u8a72node"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Map<Link, Integer> linkCost"),": \u9019\u500bcluster\u4e2d\u6240\u6709link\u7684cost,\u9810\u8a2d\u4e2d\u662f\u7a7a\u7684\uff0c\u53ea\u6709tunnal port\u5c0d\u61c9\u7684link\u624d\u6709cost"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"boolean isDstRooted"),": \u7528\u4f86\u6307\u793a \u4e00\u689dlink\u8981\u770b\u5176src switch\u9084\u662fdst switch,\u76ee\u524d\u662f\u7528true,\u4f46\u662f\u6211\u89ba\u5f97\u6539\u6210false\u4e5f\u4e0d\u5f71\u97ff\u7d50\u679c\u3002")),(0,r.kt)("h1",{id:"memember"},"Memember"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HashMap<Long, Link>")," nexthoplinks\n\u7528\u4f86\u8a18\u9304\u5176shortest path tree\u7684\u7d50\u69cb\uff0ckey\u662fswitch node, value\u662f\u9023\u63a5\u5230\u8a72switch node\u662f\u900f\u904e\u54ea\u689dlink\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HashMap<Long, Integer>")," cost\n\u7528\u4f86\u8a18\u9304\u76ee\u524d\u5230\u67d0\u500bswitch node\u7684cost\u662f\u591a\u5c11\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HashMap<Long, Boolean>")," seen\n\u7528\u4f86\u8a18\u9304\u67d0\u500bswitch\u662f\u5426\u5df2\u7d93\u62dc\u8a2a\u904e"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PriorityQueue<NodeDist>")," nodeq\n\u4e00\u500b\u512a\u5148\u4f47\u5217\uff0c\u6703\u6839\u64da\u5230\u9054\u8a72switch node\u7684cost\u70ba\u57fa\u6e96\u53bb\u6392\u5e8f\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"   protected class NodeDist implements Comparable<NodeDist>\n   ....\n   @Override\n   public int compareTo(NodeDist o) {\n    if (o.dist == this.dist) {\n        return (int)(this.node - o.node)\n    }\n    return this.dist - o.dist;\n   }\n")),(0,r.kt)("h1",{id:"algorithm"},"Algorithm"),(0,r.kt)("h2",{id:"step1"},"Step1"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u76f8\u95dc\u5bb9\u5668"),(0,r.kt)("li",{parentName:"ul"},"\u7531cluster\u53d6\u5f97\u6240\u6709\u7684link\uff0c\u5148\u8a2d\u5b9a\u6240\u6709switch node\u7684cost\u90fd\u662f\u7121\u9650\u5927"),(0,r.kt)("li",{parentName:"ul"},"root\u8a72switch node\u7684cost\u662f0"),(0,r.kt)("li",{parentName:"ul"},"\u628aroot\u52a0\u5165\u5230queue\u5167\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"\nHashMap<Long, Link> nexthoplinks = new HashMap<Long, Link>();\nHashMap<Long, Integer> cost = new HashMap<Long, Integer>();\nint w;\nfor (Long node: c.links.keySet()) {\n  nexthoplinks.put(node, null);\n  cost.put(node, MAX_PATH_WEIGHT);\n}\n\nHashMap<Long, Boolean> seen = new HashMap<Long, Boolean>();\nPriorityQueue<NodeDist> nodeq = new PriorityQueue<NodeDist>();\nnodeq.add(new NodeDist(root, 0));\ncost.put(root, 0);\n\n")),(0,r.kt)("h2",{id:"step-2"},"Step 2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5f9equeue\u88e1\u9762\u62ff\u51facost\u6700\u5c0f\u7684node"),(0,r.kt)("li",{parentName:"ul"},"\u53d6\u5f97\u5230\u9054\u8a72node\u7684cost"),(0,r.kt)("li",{parentName:"ul"},"\u505a\u500b\u932f\u8aa4\u6aa2\u67e5"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679c\u8a72node\u5df2\u7d93\u6aa2\u67e5\u904e\u4e86\uff0c\u5c31\u5ffd\u7565\u3002"),(0,r.kt)("li",{parentName:"ul"},"\u628a\u8a72node\u52a0\u5165\u5230seen\u88e1\u9762")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"        while (nodeq.peek() != null) {\n            NodeDist n = nodeq.poll();\n            Long cnode = n.getNode();\n            int cdist = n.getDist();\n            if (cdist >= MAX_PATH_WEIGHT) break;\n            if (seen.containsKey(cnode)) continue;\n            seen.put(cnode, true);\n")),(0,r.kt)("h2",{id:"step-3"},"Step 3"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u53d6\u5f97\u8a72node\u9023\u63a5\u7684\u6240\u6709link ",(0,r.kt)("strong",{parentName:"li"},"\u6bcf\u689dlink\u90fd\u6703\u5b58\u653e\u5169\u6b21\uff0csrc\u8ddfdestnation\u6703\u76f8\u53cd")),(0,r.kt)("li",{parentName:"ul"},"\u6839\u64da ",(0,r.kt)("inlineCode",{parentName:"li"},"isDstRooted"),"\uff0c\u6bcf\u689dlink\u90fd\u53ea\u53d6src or dest (\u56e0\u70ba\u6bcf\u689dlink\u6703\u51fa\u73fe\u5169\u6b21\uff0c\u6240\u4ee5switch\u4e00\u5b9a\u4e0d\u6703\u6f0f\u6389)"),(0,r.kt)("li",{parentName:"ul"},"\u6aa2\u67e5\u8a72node\u662f\u5426\u5df2\u7d93\u770b\u904e\u4e86"),(0,r.kt)("li",{parentName:"ul"},"\u53d6\u5f97\u8a72\u8a72\u7684cost"),(0,r.kt)("li",{parentName:"ul"},"\u8a08\u7b97\u5230\u8a72neighbor\u7684cost = \u672c\u4f86node\u7684cost + link\u7684cost"),(0,r.kt)("li",{parentName:"ul"},"\u5982\u679ccost\u6bd4\u4ee5\u524d\u5b78\u904e\u5f97\u66f4\u4f4e\uff0c\u90a3\u6211\u5011\u5c31\u63a1\u7528\u9019\u500b\u65b0\u7684\u8def\u5f91",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u66f4\u65b0\u6700\u65b0\u7684cost\u8cc7\u6599"))),(0,r.kt)("li",{parentName:"ul"},"\u66f4\u65b0",(0,r.kt)("inlineCode",{parentName:"li"},"nexthoplinks"),"\u7684\u8cc7\u6599\uff0c\u8a18\u9304\u5230\u6b64node\u6240\u9700\u8981\u7684link\u662f\u54ea\u689d"),(0,r.kt)("li",{parentName:"ul"},"\u7136\u5f8c\u628a\u8a72node\u91cd\u65b0\u52a0\u5165\u5230queue\u88e1\u9762")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'            for (Link link: c.links.get(cnode)) {\n                Long neighbor;\n\n                if (isDstRooted == true) neighbor = link.getSrc();\n                else neighbor = link.getDst();\n                // links directed toward cnode will result in this condition\n                if (neighbor.equals(cnode)) continue;\n\n                if (seen.containsKey(neighbor)) continue;\n\n                if (linkCost == null || linkCost.get(link)==null) w = 1;\n                else w = linkCost.get(link);\n\n                int ndist = cdist + w; // the weight of the link, always 1 in current version of floodlight.\n                if (ndist < cost.get(neighbor)) {\n                    cost.put(neighbor, ndist);\n                    nexthoplinks.put(neighbor, link);\n                    log.info("neibhbor = {}",neighbor.toString());\n                    //nexthopnodes.put(neighbor, cnode);\n                    NodeDist ndTemp = new NodeDist(neighbor, ndist);\n                    // Remove an object that\'s already in there.\n                    // Note that the comparison is based on only the node id,\n                    // and not node id and distance.\n                    nodeq.remove(ndTemp);\n                    // add the current object to the queue.\n                }\n            }\n        }\n')),(0,r.kt)("h2",{id:"step-4"},"Step 4"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5229\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"nexthoplinks"),"\u53bb\u5275\u898b\u4e00\u500bbroadcast tree.\u4e26\u4e14\u628a\u8a72tree\u56de\u50b3\u505a\u70ba\u8a72node\u7684shortest path tree.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"        BroadcastTree ret = new BroadcastTree(nexthoplinks, cost);\n        return ret;\n    }\n\n")))}u.isMDXComponent=!0}}]);
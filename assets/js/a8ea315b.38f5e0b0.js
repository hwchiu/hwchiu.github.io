"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[72843],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=s,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:s,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},89426:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),s=(r(67294),r(3905));const a={title:"k8s \u5167\u5b89\u88dd redis-cluster",authors:"hwchiu",tags:["Redis","Kubernetes","Kustomize","Helm"]},o=void 0,l={permalink:"/2023/09/11/redis-cluster",source:"@site/blog/2023/09-11-redis-cluster.md",title:"k8s \u5167\u5b89\u88dd redis-cluster",description:"\u5982\u4f55\u6295\u904e Bitnami \u7684 Helm Chart \u4f86\u5b89\u88dd Redis-Cluster",date:"2023-09-11T00:00:00.000Z",formattedDate:"September 11, 2023",tags:[{label:"Redis",permalink:"/tags/redis"},{label:"Kubernetes",permalink:"/tags/kubernetes"},{label:"Kustomize",permalink:"/tags/kustomize"},{label:"Helm",permalink:"/tags/helm"}],readingTime:2.735,hasTruncateMarker:!1,authors:[{name:"HungWei Chiu",title:"Blogger",url:"https://github.com/hwchiu",imageURL:"https://github.com/hwchiu.png",key:"hwchiu"}],frontMatter:{title:"k8s \u5167\u5b89\u88dd redis-cluster",authors:"hwchiu",tags:["Redis","Kubernetes","Kustomize","Helm"]},prevItem:{title:"gcloud \u5207\u63db\u5e33\u865f",permalink:"/2023/10/01/gcp_gcloud"},nextItem:{title:"Helm Chart \u4e2d\u5982\u4f55\u6839\u64da\u689d\u4ef6\u4f86\u52d5\u614b\u5b89\u88dd Template \u5167\u7684\u7269\u4ef6",permalink:"/2023/09/01/helm"}},i={authorsImageUrls:[void 0]},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u5982\u4f55\u6295\u904e Bitnami \u7684 Helm Chart \u4f86\u5b89\u88dd Redis-Cluster"),(0,s.kt)("p",null,"\u63a1\u7528 Kustomize + Helm \u7684\u65b9\u5f0f (ArgoCD)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ cat kustomization.yaml\nhelmCharts:\n- name: redis-cluster\n  includeCRDs: false\n  valuesFile: redis.yaml\n  releaseName: redis-cluster\n  namespace: production\n  version: 9.0.5\n  repo: https://charts.bitnami.com/bitnami\n\n$ cat redis.yaml\n\nglobal:\n  storageClass: standard-rwo\nexistingSecret: redis-cluster\nexistingSecretPasswordKey: password\nredis:\n  resources:\n    limits:\n      cpu: 2\n      memory: 2Gi\n    requests:\n      cpu: 0.1\n      memory: 0.5Gi\n  podAnnotations:\n    'xxxxx': 'yyyyy'\n")),(0,s.kt)("p",null,"\u9019\u7a2e\u90e8\u7f72\u65b9\u5f0f\u5c31\u6703\u555f\u52d5\u5bc6\u78bc\u9a57\u8b49\u6a5f\u5236\uff0c\u800c\u5bc6\u78bc\u5247\u4f86\u81ea\u65bc\u540c namespace \u7684 secret \u7269\u4ef6 ",(0,s.kt)("inlineCode",{parentName:"p"},"redis-cluster")," \u5167\u7684 key ",(0,s.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,s.kt)("p",null,"\u5982\u679c\u60f3\u8981\u7121\u5bc6\u78bc\u9a57\u8b49\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5217\u65b9\u5f0f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"usePassword: false\n")),(0,s.kt)("p",null,"'''note\n\u5982\u679c\u5df2\u7d93\u5148\u884c\u6709\u5bc6\u78bc\u9a57\u8b49\uff0c\u5247\u4fee\u6539\u6b64\u6b04\u4f4d\u5c0d\u65bc\u904b\u884c\u4e2d\u7684 Redis Cluster \u4e0d\u6703\u6709\u4efb\u4f55\u6548\u679c\uff0c\u9019\u90e8\u5206\u9700\u8981\u66f4\u591a\u984d\u5916\u64cd\u4f5c\u4f86\u5b8c\u6210\uff0c\u780d\u6389 PVC \u91cd\u65b0\u90e8\u7f72\u662f\u4e00\u500b\u7c21\u55ae\u66b4\u529b\u7684\u65b9\u5f0f\u3002\n'''"),(0,s.kt)("p",null,"\u7531\u65bc\u6b64\u67b6\u69cb\u6703\u90e8\u7f72 Redis-cluster\uff0c\u9810\u8a2d\u60c5\u6cc1\u4e0b\u6703\u90e8\u7f72\u4e09\u7d44(master+worker)\u7684 statefulset\uff0c\u4e26\u4e14\u7d66\u5169\u7d44 servicee"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"redis-cluster                       ClusterIP      10.2.5.248    <none>        6379/TCP                                                                                          213d\nredis-cluster-headless              ClusterIP      None          <none>        6379/TCP,16379/TCP                                                                                213d\n")),(0,s.kt)("p",null,"\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662f\uff0credis-cluster \u4e26\u4e0d\u9069\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl port-forward")," \u7684\u65b9\u5f0f\u9023\u63a5\uff0c\u56e0\u70ba redis-cluster \u7684\u6e9d\u901a\u904e\u7a0b\u6703\u56de\u50b3\u5176\u4ed6 Pod \u7684 IP \u7d66\u4f60\uff0c\u800c\u6bcf\u500b Pod \u7684 IP \u90fd\u7528\u76f8\u540c\u7684 Port\uff0c\u56e0\u6b64\u9664\u975e\u4f60\u6709\u8fa6\u6cd5\u65bc\u672c\u5730\u7522\u751f\u4e00\u4e9b\u865b\u64ec\u7db2\u5361\u4e26\u4e14\u642d\u914d\u591a\u7d44 ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl port-forawrd")," \u5e6b\u6bcf\u500b Pod \u90fd\u6253\u901a\uff0c\u5426\u5247\u5b58\u53d6\u4e0a\u6703\u51fa\u554f\u984c\u3002"),(0,s.kt)("p",null,"\u8209\u4f8b\u4f86\u8aaa"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl port-forward --address 0.0.0.0 pod/redis-cluster-0 6379:6379\nForwarding from 0.0.0.0:6379 -> 6379\n$ redis-benchmark -n 1 --cluster\nCluster has 3 master nodes:\n\nMaster 0: 1020525d25c7ad16e786a98e1eb7419d609b8847 10.4.0.119:6379\nCould not connect to Redis at 10.4.0.119:6379: Connection refused\n")),(0,s.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u900f\u904e port-forward \u6253\u9032\u53bb\u5f8c\uff0c\u63a5\u4e0b\u4f86\u7684\u9023\u7dda\u5c31\u6703\u8f49\u5230\u5176\u4ed6\u7684 pod \u7136\u5f8c\u5c31\u6703\u5931\u6557\uff0c\u56e0\u6b64\u9019\u7a2e\u60c5\u6cc1\u8981\u7c21\u55ae\u4f7f\u7528\u9084\u662f\u90e8\u7f72\u4e00\u500b\u5305\u542b redis \u6307\u4ee4\u7684 Pod \u5230\u540c\u6a23\u7684 namespace \u4e26\u4e14\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"kubectl exec")," \u9032\u53bb\u64cd\u4f5c\u6703\u6bd4\u8f03\u9806"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ kubectl run --image=hwchiu/netutils test\n$ kubectl exec -it test -- bash\nroot@test:/# redis-benchmark -h redis-cluster -q  -c 20 -n 30000\nPING_INLINE: 44977.51 requests per second\nPING_BULK: 48154.09 requests per second\nSET: 45317.22 requests per second\nGET: 47169.81 requests per second\nINCR: 50251.26 requests per second\nLPUSH: 48465.27 requests per second\nLPOP: 41265.48 requests per second\nSADD: 37878.79 requests per second\nSPOP: 49833.89 requests per second\nLPUSH (needed to benchmark LRANGE): 51724.14 requests per second\nLRANGE_100 (first 100 elements): 43041.61 requests per second\nLRANGE_300 (first 300 elements): 35842.29 requests per second\nLRANGE_500 (first 450 elements): 36014.41 requests per second\nLRANGE_600 (first 600 elements): 33259.42 requests per second\nMSET (10 keys): 42796.01 requests per second\n")))}d.isMDXComponent=!0}}]);
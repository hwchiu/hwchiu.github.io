"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[92821],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>d});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=r.createContext({}),u=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(p.Provider,{value:e},n.children)},s="mdxType",k={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},P=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,l=n.originalType,p=n.parentName,c=i(n,["components","mdxType","originalType","parentName"]),s=u(t),P=o,d=s["".concat(p,".").concat(P)]||s[P]||k[P]||l;return t?r.createElement(d,a(a({ref:e},c),{},{components:t})):r.createElement(d,a({ref:e},c))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var l=t.length,a=new Array(l);a[0]=P;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=n,i[s]="string"==typeof n?n:o,a[1]=i;for(var u=2;u<l;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}P.displayName="MDXCreateElement"},96967:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const l={title:"Linux-Kernel-PacketCapture",date:"2013-04-01 13:30",comments:!0,tags:["System","Kernel","Network"]},a=void 0,i={unversionedId:"techPost/2013/linux-capture-packets",id:"techPost/2013/linux-capture-packets",title:"Linux-Kernel-PacketCapture",description:"\u6700\u8fd1\u7a81\u7136\u5c0d\u6293\u5c01\u5305\u633a\u6709\u8208\u8da3\u7684\uff0c\u6b63\u597d\u4ee5\u524d\u4fee\u7db2\u969b\u7db2\u8def\u898f\u7d04\u6642\uff0c\u6709trace\u904elinux\u4e2dTCP/IP\u76f8\u95dc\u7684code",source:"@site/docs/techPost/2013/linux-capture-packets.md",sourceDirName:"techPost/2013",slug:"/techPost/2013/linux-capture-packets",permalink:"/docs/techPost/2013/linux-capture-packets",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"Kernel",permalink:"/docs/tags/kernel"},{label:"Network",permalink:"/docs/tags/network"}],version:"current",frontMatter:{title:"Linux-Kernel-PacketCapture",date:"2013-04-01 13:30",comments:!0,tags:["System","Kernel","Network"]},sidebar:"techPost",previous:{title:"Python-Robot(1) IRC",permalink:"/docs/techPost/2013/irc-robot"},next:{title:"Nox-Spanning_Tree",permalink:"/docs/techPost/2013/nox-spanning-tree"}},p={},u=[],c={toc:u},s="wrapper";function k(n){let{components:e,...t}=n;return(0,o.kt)(s,(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u6700\u8fd1\u7a81\u7136\u5c0d\u6293\u5c01\u5305\u633a\u6709\u8208\u8da3\u7684\uff0c\u6b63\u597d\u4ee5\u524d\u4fee\u7db2\u969b\u7db2\u8def\u898f\u7d04\u6642\uff0c\u6709trace\u904elinux\u4e2dTCP/IP\u76f8\u95dc\u7684code"),(0,o.kt)("p",null,"\u6240\u4ee5\u9019\u6b21\u5c31\u4f86\u5617\u8a66\u770b\u770b\u81ea\u5df1\u5206\u6790\u5c01\u5305\u3002"),(0,o.kt)("p",null,"\u7b2c\u4e00\u500b\u65b9\u5f0f\u5c31\u662f\u91cd\u7de8kernel,\u76f4\u63a5\u5728kernel\u4e2d\u5bebCODE\uff0c\u4f46\u662f\u9019\u6a23\u7684\u7f3a\u9ede\u5c31\u662f\u91cd\u7de8kernel\u592a\u6d88\u8017\u6642\u9593\u4e86\uff0c\n\u6bcf\u6b21\u4fee\u6539\u90fd\u8981\u7b49\u500b\u5341\u591a\u5206\u9418\uff0c\u5be6\u5728\u4e0d\u662f\u5f88\u6709\u6548\u76ca\uff0c\u6240\u4ee5\u9019\u500b\u65b9\u6848\u76f4\u63a5\u653e\u68c4"),(0,o.kt)("p",null,"\u800c\u6211\u63a1\u7528\u7684\u65b9\u6cd5\u662f\u5229\u7528kernel module\u7684\u65b9\u5f0f\uff0c\u81ea\u5df1\u5148\u5728kernel\u4e2d\u52a0\u5165\u81ea\u5b9a\u7fa9function,\u63a5\u6536\u4f86\u81ea\u4e0a\u5c64\u7684\u5c01\u5305\uff0c\u7136\u5f8c\u518d\u900f\u904e\u4fee\u6539kernel module\u7684\u65b9\u5f0f\u4f86\u5206\u6790\u53d6\u5f97\u7684\u5c01\u5305\uff0c\u9019\u6a23\u7684\u8a71\uff0c\u6211\u53ea\u6709\u4e00\u958b\u59cb\u9700\u8981\u91cd\u7de8kernel\uff0c\u5f8c\u7e8c\u90fd\u76f4\u63a5\u4fee\u6539kernel module\uff0c\u7de8\u8b6f\u901f\u5ea6\u98db\u5feb\uff0c\u6548\u7387\u5c31\u9ad8\u5f97\u8a31\u591a\u3002"),(0,o.kt)("p",null,"\u4f7f\u7528\u7684\u8cc7\u8a0a\u7248\u672c\u5982\u4e0b\n",(0,o.kt)("strong",{parentName:"p"},"linux:2.6.32"),"\n",(0,o.kt)("strong",{parentName:"p"},"function name: myPacket")),(0,o.kt)("p",null,"#Step1\n\u5728\u9001\u51fa\u5c01\u5305\u7684function\u4e2d\uff0c\u52a0\u5165\u6211\u5011\u81ea\u5b9a\u7fa9function\u7684\u4f7f\u7528,\u6240\u4ee5\u76ee\u6a19\u5c31\u662f\u4f4d\u65bc\n",(0,o.kt)("strong",{parentName:"p"},"/net/core/dev.c"),"\u4e2d\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"dev_queue_xmit"),"\u9019\u500bfunction\uff0c\u4fee\u6539\u5982\u4e0b"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5148\u52a0\u5165\u4e00\u500bfunction pointer,\u53c3\u6578\u662fsk_buff,\u56de\u50b3int"),(0,o.kt)("li",{parentName:"ol"},"\u5728function\u4e2d\uff0c\u5224\u65b7function pointer\u662f\u5426\u6709\u503c\uff0c\u6709\u7684\u8a71\u5c31\u57f7\u884c\u8a72function,\u4e26\u628ask_buff\u50b3\u5165")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"\n    int(*myPacket)(struct sk_buff*)=0;\n\n    int dev_queue_xmit(struct sk_buff *skb)\n    {\n        if(myPacket)\n        {\n            myPacket(skb);\n        }\n        ...ignore\n    }\n\n")),(0,o.kt)("p",null,"#Step2\n\u63a5\u8005\u6211\u5011\u8981\u8b93kernel module\u77e5\u9053\u6709myPacket\u9019\u500bfunction\u5b58\u5728\u6240\u4ee5\u5728",(0,o.kt)("strong",{parentName:"p"},"/net/core/sock.c"),"\u9019\u500b\u6a94\u6848\u4e2d"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u4ee5extern\u7684\u65b9\u5f0f\u5ba3\u544a\u8a72function pointer")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"\u904eEXPORT_SYMBOL\u9019\u500bmarco\u4f86\u628a\u9019\u500bfunction \u7d66export\u5230\u5916\u90e8\u7684kernel module\u8b93\u5176\u4f7f\u7528"),(0,o.kt)("p",{parentName:"li"},"extern int(",(0,o.kt)("em",{parentName:"p"},"myPacket)(strcut sk_buff"),")=0;\nEXPORT_SYMBOL(myPacket);"))),(0,o.kt)("p",null,"#Step3\n",(0,o.kt)("strong",{parentName:"p"},"kernel\u91cd\u7de8!!")),(0,o.kt)("p",null,"#Step4\n\u6700\u5f8c\uff0c\u5c31\u958b\u59cb\u64b0\u5beb\u6211\u5011\u7684kernel module"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5148\u5beb\u4e00\u500b\u7c21\u55aekernel module"),(0,o.kt)("li",{parentName:"ol"},"\u81ea\u5b9a\u7fa9\u4e00\u500b\u8655\u7406function myPacketAnalyze"),(0,o.kt)("li",{parentName:"ol"},"extern \u525b\u525b\u7684myPacket function pointer"),(0,o.kt)("li",{parentName:"ol"},"\u8b93myPacket \u7d66\u6307\u5411\u81ea\u5b9a\u7fa9\u7684myPacketAnalyze"),(0,o.kt)("li",{parentName:"ol"},"\u64b0\u5bebmyPacketAnalyze"),(0,o.kt)("li",{parentName:"ol"},"\u6211\u60f3\u8981\u770b\u770b\u8a72\u5c01\u5305\u7684ip header information")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'    #include <linux/module.h>\n    #include <linux/kernel.h>\n    #include <linux/skbuff.h>\n    #lnclude <linux/ip.h>\n    extern int(*myPacket)(strcut sk_buff*)=0;\n    int myPacketAnalyze(struct sk_buff* skb)\n    {\n        struct iphdr *iph;\n        iph = ip_hdr(skb);\n        printk("version = %d\\n",iph->version);\n        printk("header_len = %d\\n",iph->ihl);\n        printk("tos = %d\\n",iph->tos);\n        printk("total_len = %hu\\n",iph->tot_len);\n        printk("id = %hu\\n",iph->id);\n        printk("frag = %hu\\n",(iph->frag_off)<<13);\n        printk("frag_off = %hu\\n",iph->frag_off&0x1111111111111);\n        printk("protocol = %d\\n",iph->protocol);\n        printk("ttl = %d\\n",iph->ttl);\n        printk("souce_addr = %u.%u.%u.%u\\n",NIPQUAD(iph->saddr));\n        printk("dest_addr = %u.%u.%u.%u\\n",NIPQUAD(iph->daddr));\n    }\n    int init_module(void)\n    {\n        myPacket = myPacketAnalyze;\n        return 0;\n    }\n    void cleanup_module(void)\n    {\n        myPacket = 0;\n    }\n\n\n')),(0,o.kt)("p",null,"#Step4\n\u9019\u908a\u7c21\u55ae\u4ecb\u7d39\u4e00\u4e0bIP HEADER\n",(0,o.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/-bx6mrN_NVGw/UdAlum_Ad_I/AAAAAAAAAsw/Er2dWeUWg7o/w880-h559-no/ipheader.jpg",alt:null})),(0,o.kt)("p",null,"Version:4bit,\u4ee3\u8868\u8005IP\u7684\u7248\u672c\uff0c\u76ee\u524d\u662f4or6 \u4ee3\u8868ipv4 ipv6\u3002"),(0,o.kt)("p",null,"Header Length:4bit \u4ee3\u8868header\u7684\u9577\u5ea6\uff0c\u55ae\u4f4d\u662f4BYTE\uff0c\u6700\u5c0f\u503c\u662f5(20BYTE)\uff0c\u82e5IP HEADER\u4e2d\u6709\u5176\u4ed6options\uff0c\u5247\u503c\u6703\u66f4\u5927\u3002"),(0,o.kt)("p",null,"Type of Service (tos):8bit\uff0c\u4ee3\u8868QOS\u8ddfTOS\uff0c\u53ef\u7528\u4f86\u8abf\u6574\u512a\u5148\u6b0a\u3002"),(0,o.kt)("p",null,"Total Lngth: 16bit, \u4ee3\u8868ip header\u7684\u9577\u5ea6(header + data),\u55ae\u4f4d\u662fbyte"),(0,o.kt)("p",null,"Identifier(ID): 16bit,\u6703\u8ddfflag & fragment offset \u4e00\u8d77\u4f7f\u7528\uff0c\u5c0d\u5c01\u5305\u9032\u884cfragment\u7684\u64cd\u4f5c\u3002"),(0,o.kt)("p",null,"flag: 3bit\uff0c\u76ee\u524d\u4f7f\u7528\u5169\u500bbit,\u5206\u5225\u4ee3\u8868Don't Fragments(DF)\u8ddfMore Fragments(MF),\n\u7528\u4f86\u544a\u77e5\u6b64\u5c01\u5305\u7684\u5206\u6bb5\u8cc7\u6599\u3002"),(0,o.kt)("p",null,"Fragment Offset:13bit,\u9019\u500b\u88ab\u5206\u6bb5\u5c01\u5305\u5728\u6574\u500b\u5b8c\u6574\u5c01\u5305\u4e2d\u7684\u4f4d\u7f6e\u3002"),(0,o.kt)("p",null,"Time to live: 8bit,\u63a7\u5236\u5c01\u5305\u50b3\u9001\u7bc0\u9ede\u7684\u6b21\u6578\uff0c\u6bcf\u901a\u904e\u4e00\u500brouter\u5c31\u6e1b\u4e00\uff0c\u7576TTL\u70ba0\u6642\uff0c\u5c31\u4e1f\u68c4\u8a72"),(0,o.kt)("p",null,"Protocol: 8bit,\u4ee3\u8868\u6b64\u5c01\u5305\u4f7f\u7528\u7684\u5354\u5b9a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum {\n  IPPROTO_IP = 0,               /* Dummy protocol for TCP               */\n  IPPROTO_ICMP = 1,             /* Internet Control Message Protocol    */\n  IPPROTO_IGMP = 2,             /* Internet Group Management Protocol   */\n  IPPROTO_IPIP = 4,             /* IPIP tunnels (older KA9Q tunnels use 94) */\n  IPPROTO_TCP = 6,              /* Transmission Control Protocol        */\n  IPPROTO_EGP = 8,              /* Exterior Gateway Protocol            */\n  IPPROTO_PUP = 12,             /* PUP protocol                         */\n  IPPROTO_UDP = 17,             /* User Datagram Protocol               */\n  IPPROTO_IDP = 22,             /* XNS IDP protocol                     */\n  IPPROTO_DCCP = 33,            /* Datagram Congestion Control Protocol */\n  IPPROTO_RSVP = 46,            /* RSVP protocol                        */\n  IPPROTO_GRE = 47,             /* Cisco GRE tunnels (rfc 1701,1702)    */\n\n  IPPROTO_IPV6   = 41,          /* IPv6-in-IPv4 tunnelling              */\n\n  IPPROTO_ESP = 50,            /* Encapsulation Security Payload protocol */\n  IPPROTO_AH = 51,             /* Authentication Header protocol       */\n  IPPROTO_BEETPH = 94,         /* IP option pseudo header for BEET */\n  IPPROTO_PIM    = 103,         /* Protocol Independent Multicast       */\n\n  IPPROTO_COMP   = 108,                /* Compression Header protocol */\n  IPPROTO_SCTP   = 132,         /* Stream Control Transport Protocol    */\n  IPPROTO_UDPLITE = 136,        /* UDP-Lite (RFC 3828)                  */\n\n  IPPROTO_RAW    = 255,         /* Raw IP packets                       */\n  IPPROTO_MAX\n};\n")),(0,o.kt)("p",null,"Source IP: \u4f86\u6e90\u7aefIP\u4f4d\u7f6e"),(0,o.kt)("p",null,"Destination IP:\u6536\u7aefIP\u4f4d\u7f6e"),(0,o.kt)("p",null,"Options: \u63a7\u5236\u9805\uff0c\u53ef\u6709\u53ef\u7121\uff0c\u5305\u542bLSR\u3001SSR\u3001RR\u3001TS\u3002"),(0,o.kt)("p",null,"\u5beb\u5b8ckernel module\u4e26\u4e14\u7de8\u8b6f\u639b\u4e0amodule\u5f8c\uff0c\u6211\u9996\u5148\u60f3\u5148\u89c0\u5bdf\u770b\u770bping\u7684\u5c01\u5305\uff0c\u65bc\u662f\u6211\u57f7\u884c\u4e0b\u5217\u6307\u4ee4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ping 140.113.235.81\n")),(0,o.kt)("p",null,"\u63a5\u8005\u5230/var/log/message\u53bb\u770b\u8a0a\u606f\uff0c\u770b\u770b\u5370\u51fa\u4f86\u7684\u8cc7\u8a0a\u5982\u4f55"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"version =4\nheader_len =5\ntos  = 0\ntotal_len = 21504\nid =0\nfrag = 0\nfrag_off = 64\nprotocl = 1\nttl = 64\nsouce_addr = 140.113.214.84\ndest_addr = 140.113.235.81\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230version=4,\u4ee3\u8868ipv4\uff0cprotocol = 1 \u5c31\u662ficmp\u7684\u5c01\u5305\n\u800c\u56e0\u70ba\u6c92\u6709options\uff0c\u6240\u4ee5header_len\u662f5\n\u5176\u4e2d\u6700\u4ee4\u6211\u90a3\u60b6\u7684\u662f\u90a3\u5c01\u5305\u9577\u5ea6\uff0c\u7adf\u7136\u662f\u5169\u842c\u591abyte.....\n\u73fe\u5728\u9084\u60f3\u4e0d\u900f\u70ba\u4ec0\u9ebc"),(0,o.kt)("p",null,"\u7d93\u7531wireshark\u5e6b\u5fd9\u6aa2\u67e5\u9a57\u8b49\u5f8c\uff0c\u767c\u73fe\u662f\u6211\u7684\u5beb\u6cd5\u5beb\u932f\u4e86\uff0cmyPacketAnalyze\u7d66\u91cd\u65b0\u5beb\u904e"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'\n    int myPacketAnalyze(struct sk_buff* skb)\n    {\n        struct iphdr *iph;\n        iph = ip_hdr(skb);\n        printk("version = %d\\n",iph->version);\n        printk("header_len = %d\\n",iph->ihl);\n        printk("tos = %d\\n",iph->tos);\n        printk("total_len = %hu\\n",ntohs(iph->tot_len));\n        printk("id = %hu\\n",ntohs(iph->id));\n        printk("frag = %hu\\n",(nthos(iph->frag_off))>>13);\n        printk("frag_off = %hu\\n",(ntohs(iph->frag_off))&0x1111111111111);\n        printk("protocol = %d\\n",iph->protocol);\n        printk("ttl = %d\\n",iph->ttl);\n        printk("souce_addr = %u.%u.%u.%u\\n",NIPQUAD(iph->saddr));\n        printk("dest_addr = %u.%u.%u.%u\\n",NIPQUAD(iph->daddr));\n    }\n')),(0,o.kt)("p",null,"\u8f38\u51fa\u70ba"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"version =4\nheader_len =5\ntos  = 0\ntotal_len = 84\nid =0\nfrag = 2\nfrag_off = 0\nprotocl = 1\nttl = 64\nsouce_addr = 140.113.214.84\ndest_addr = 140.113.235.81\n")),(0,o.kt)("p",null,"\u539f\u56e0\u662f\u6211\u5fd8\u4e86\u53bb\u4f7f\u7528ntohs\u53bb\u8f49\u63dbbyte order,\u6240\u4ee5\n84:   00000000 01010100\n21504:01010100 00000000\n\u8f49\u63db\u5f8c\u7684\u7d50\u679c\u5c31\u6bd4\u8f03\u6b63\u5e38\uff0c\u4e14\u4ee4\u4eba\u4fe1\u670d\n\u63a5\u4e0b\u4f86\u60f3\u5617\u8a66\u770b\u770b\u4fee\u6539TCP|IP header\u7684\u8cc7\u8a0a\uff0c\u7136\u5f8c\u5229\u7528\u7c21\u55ae\u7684TCP server/client\u4f86\u6e2c\u8a66\u76f8\u95dc\uff0c\u4e4b\u5f8c\u6709\u5f04\u518d\u88dc\u4e0a\u3002"))}k.isMDXComponent=!0}}]);
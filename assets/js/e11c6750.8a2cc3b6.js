"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[72231],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"LXR Server With Multiple Projects",tags:["System","LXR","Ubuntu","DRBD","Ceph","SourceCode"],date:new Date("2017-05-08T17:38:04.000Z")},i="Install LXR on Ubuntu 16.04",l={unversionedId:"techPost/2017/lxr-setup-with-multiple-projects",id:"techPost/2017/lxr-setup-with-multiple-projects",title:"LXR Server With Multiple Projects",description:"In this article, I will write down a example to descrip how to setup the LXR(Linux Cross Reference) with multiple projects support. In this configuration, your can view multiple projects' refernce in one LXR service.",source:"@site/docs/techPost/2017/lxr-setup-with-multiple-projects.md",sourceDirName:"techPost/2017",slug:"/techPost/2017/lxr-setup-with-multiple-projects",permalink:"/docs/techPost/2017/lxr-setup-with-multiple-projects",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"LXR",permalink:"/docs/tags/lxr"},{label:"Ubuntu",permalink:"/docs/tags/ubuntu"},{label:"DRBD",permalink:"/docs/tags/drbd"},{label:"Ceph",permalink:"/docs/tags/ceph"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"LXR Server With Multiple Projects",tags:["System","LXR","Ubuntu","DRBD","Ceph","SourceCode"],date:"2017-05-08T17:38:04.000Z"},sidebar:"techPost",previous:{title:"docker image for lxr server",permalink:"/docs/techPost/2017/lxr-server-with-docker"},next:{title:"NAT Lookback Introduction",permalink:"/docs/techPost/2017/nat-loopback"}},s={},c=[{value:"Environment",id:"environment",level:2},{value:"Prepare LXN Environment",id:"prepare-lxn-environment",level:2},{value:"Install LXR",id:"install-lxr",level:2},{value:"Configure LXR",id:"configure-lxr",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"install-lxr-on-ubuntu-1604"},"Install LXR on Ubuntu 16.04"),(0,o.kt)("p",null,"In this article, I will write down a example to descrip how to setup the ",(0,o.kt)("strong",{parentName:"p"},"LXR"),"(Linux Cross Reference) with multiple projects support. In this configuration, your can view multiple projects' refernce in one LXR service.\nFor this article, I use the ",(0,o.kt)("strong",{parentName:"p"},"Ceph")," and ",(0,o.kt)("strong",{parentName:"p"},"DRBD")," for my LXR projtects."),(0,o.kt)("h2",{id:"environment"},"Environment"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ubuntu 16.04"),(0,o.kt)("li",{parentName:"ul"},"Lxr 2.2.1",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"You can download the tarball from ",(0,o.kt)("a",{parentName:"li",href:"https://sourceforge.net/projects/lxr/files/stable/"},"here")))),(0,o.kt)("li",{parentName:"ul"},"Ceph",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ceph/ceph"},"Github Page")))),(0,o.kt)("li",{parentName:"ul"},"DRBD-9.0",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://git.drbd.org/drbd-9.0.git"},"Git Page"))))),(0,o.kt)("h2",{id:"prepare-lxn-environment"},"Prepare LXN Environment"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install the required softwared",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"perl (5.10 or above version)"),(0,o.kt)("li",{parentName:"ul"},"ctags (5.8 or above version)")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get install perl\napt-get install exuberant-ctags\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Install the Datbase, I choosed the MySQL for my lxr env.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"apt-get install mysql-server\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Install Perl DBI",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Install the CPAN for Perl."),(0,o.kt)("li",{parentName:"ul"},"Type the following command to install DBI")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cpan DBI\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Install the Web Server, I choose the Apacher for my lxr env.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Also install perl module.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"apt-get install apache2\napt-get install libapache2-mod-perl2\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Install free-text searching engine, I choose Glimpse.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Download from the github page and follow the README.install to install.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"git clone https://github.com/gvelez17/glimpse\ncd glimpse\n./configure\nmake\nmake install\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Install Perl Module",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"File::MMagic"),(0,o.kt)("li",{parentName:"ul"},"DBD::mysql")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"apt-get install libmysqlclient-dev\ncpan File::MMagic\ncpan DBD::mysql\n")),(0,o.kt)("h2",{id:"install-lxr"},"Install LXR"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Download the LXR-2.2.1 and expand the tarball",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Download from ",(0,o.kt)("a",{parentName:"li",href:"https://sourceforge.net/projects/lxr/files/stable/lxr-2.2.1.tgz/download"},"lxr-2.2.1.tgz")),(0,o.kt)("li",{parentName:"ul"},"Decompress into the /opt direcotory (choose the path you like) and rename to lxr"))),(0,o.kt)("li",{parentName:"ol"},"Check the environment")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd /opt/lxr\n./genxref --checkonly\n")),(0,o.kt)("p",null,"The result will like below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ERROR: could not open configuration file lxr.conf\n[  OK  ]     Perl     version ... 5.22.1\nParameter 'ectagsbin' not defined - trying to find ctags\nctags found at /usr/bin/ctags\n[  OK  ]     ctags    version ... 5.9\nParameter 'glimpsebin' not defined - trying to find glimpse\nglimpse found at /usr/local/bin/glimpse\nChecked:    glimpse   version ... 4.18.7\nParameter 'glimpseindex' not defined - trying to find glimpseindex\nglimpseindex found at /usr/local/bin/glimpseindex\nChecked: glimpseindex version ... 4.18.7\nParameter 'swishbin' not defined - trying to find swish-e\nswish-e not found, `command -v swish-e` returned a null string\ngenxref stopped without indexing by --checkonly option\n")),(0,o.kt)("p",null,"Since we have not config the LXR, we won't have the lxr.conf.\nWe choose the glimpse as our search engine and we can ignore the warning of swish-e."),(0,o.kt)("h2",{id:"configure-lxr"},"Configure LXR"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Since the ",(0,o.kt)("strong",{parentName:"li"},"GIT")," type of source project doesn't support the submodule reference in LXR, we use ",(0,o.kt)("strong",{parentName:"li"},"FILE")," instead of. Before we generate the code reference, we should ",(0,o.kt)("strong",{parentName:"li"},"update")," code by ourself."),(0,o.kt)("li",{parentName:"ol"},"Prepare the source fo DRBD and CEPH. I put them in ",(0,o.kt)("strong",{parentName:"li"},"/opt/lxr/source_code"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"We refer to the master branch of ceph, for rdbe, is version 9.0.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mkdir -p /opt/lxr/source_code/drbd\nmkdir -p /opt/lxr/source_code/ceph\ngit clone --recursive http://git.drbd.org/drbd-9.0.git /opt/lxr/source_code/drbd/9.0\ngit clone --recursive http://git.drbd.org/drbd-9.0.git/tags  /opt/lxr/source_code/ceph/master\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Create both LXR and database configuration via tool ",(0,o.kt)("inlineCode",{parentName:"li"},"configure-lxr.pl"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd /opt/lxr\n./scripts/configure-lxr.pl -vv\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"*** LXR configurator (version: 2.2) ***\n\nLXR root directory is /opt/lxr\nConfiguration will be stored in custom.d/\n\nConfigure for single/multiple trees? [S/m] > m\n\n*** LXR web server configuration ***\n\nMany different configurations are possible, they are related to the way\nLXR service is accessed, i.e. to the structure of the URL.\nRefer to the User's Manual for a description of the variants.\n\nLXR can be located at the server-root (so called dedicated)\nor lower in the server hierarchy (shared because there are\nusually other pages or sections).\nServer type? [dedicated/SHARED] > SHARED\n\nSelecting which tree to display can be done in various ways:\n  1. from the host name (all names are different),\n  2. from a prefix to a common host name (similar to previous)\n  3. from the site section name (all different)\n  4. from interpretation of a section name part (similar to previous)\n  5. from the head of script arguments\nMethod 5 is highly recommended because it has no impact on webserver\n  configuration.\nMethod 3 is second choice but involves manually setting up many\n  symbolic links (one per source-tree).\nMethod 1 & 2 do not involve symbolic links but need populating webserver\n  configuration with virtual hosts.\n  Note that method 2 does not work well on //localhost.\nMethod 4 is deprecated because it has proved not easily portable\n  under alternate webservers (other than Apache).\n\nTree designation?:\n   ARGUMENT\n   section name\n   prefix in hos\n   hostname\n   embedded in section\n > ARGUMENT\n\nThe computer hosting the server is described by an URL.\nThe form is scheme://host_name:port\nwhere:\n  - scheme is either http or https (http: can be omitted),\n  - host_name can be given as an IP address such as 123.45.67.89\n              or a domain name like localhost or lxr.url.example,\n  - port may be omitted if standard for the scheme.\n--- Host name or IP? [//localhost] > //127.0.0.1\n--- Alias name or IP? >\nURL section name for LXR in your server? [/lxr] > /lxr\nWill it be shared by all trees? [YES/no] >\n\n*** LXR database configuration ***\n\n\nThe choice of the database engine can make a difference in indexing performance,\nbut resource consumption is also an important factor.\n  * For a small personal project, try SQLite which do not\n    need a server and is free from configuration burden.\n  * For medium to large projects, choice is between MySQL,\n    PostgreSQL and Oracle.\n    Oracle is not a free software, its interface has not been\n    tested for a long time.\n  * PostgreSQL databases are smaller than MySQL's\n    and performance is roughly equivalent.\n  * MySQL is at its best with large-sized projects\n    (such as kernel cross-referencing) where it is fastest at the cost\n    of bigger databases.\n  * Take also in consideration the number of connected users.\nDatabase engine? [MYSQL/oracle/postgres/sqlite] >\nThe safest option is to create one database per tree.\nYou can however create a single database for all your trees with a specific set of\ntables for each tree (though this is not recommended).\nHow do you setup the databases? [PER TREE/global] >\nAll databases can be accessed with the same username and\ncan also be described under the same names.\nWill you share database characteristics? [YES/no] >\nWill you use the same username and password for all DBs? [YES/no] >\n--- DB user name? [lxr] > lxr\n--- DB password ? [lxrpw] > lxrpw\nWill you give the same prefix to all tables? [YES/no] >\n--- Common table prefix? [lxr_] >\n--- Directory for glimpse databases? > /opt/lxr/glimpse_db\n\nfile .htaccess written into LXR root directory\nfile apache2-require.pl written into configuration directory\nfile apache-lxrserver.conf written into configuration directory\nfile lighttpd-lxrserver.conf written into configuration directory\nfile nginx-lxrserver.conf written into configuration directory\nfile thttpd-lxrserver.conf written into configuration directory\nMercurial support files written into configuration directory\n\n*** LXR master configuration file setup ***\n    Global section part\n\n*** Configuring auxiliary tool paths\n*** Host name previously defined as http://104.154.246.9\n*** Configuring HTML parameters\n*** 'Buttons-and-menus' interface is recommended for the kernel\n*** to avoid screen cluttering.\n--- Use 'buttons-and-menus' instead of 'link' interface? [YES/no] >\n*** Configuring file subsection\n*** Configuring \"common factors\"\n*** Marking tree section\n\n*** LXR master configuration file setup ***\n    Tree section part\n    SQL script for database initialisation\n\n*** Configuring LXR server parameters\n*** The virtual root is the fixed URL part after the hostname.\n*** You previously defined the virtual root as /lxr\n--- Caption in page header? (e.g. Project XYZZY displayed by LXR) > drbd\nDo you want a speed switch button for this tree ? [YES/no] >\n--- Short title for button? (e.g. XYZZY) > drbd\n--- Tree identification in URL? (e.g. the-tree) > drbd\nDo you need a specific encoding for this tree ? [yes/NO] >\n*** Describing tree location\nHow is your tree stored? [FILES/cvs/git/svn/hg/bk] >\n*** A source directory contains one sub-directory for every version.\n--- Source directory? (e.g. /home/myself/project-tree) > /opt/lxr/source_code/drbd\nName to display for the path root? (e.g. Project or $v for version) [$v] >\n*** Enumerating versions\nLabel for version selection menu?  [Version] >\n*** Versions can be explicitly enumerated, be read from a file or computed\n*** by a function. The latter case is recommended for VCS-stored trees.\nVersion enumeration method? [LIST/file/function] >\n--- Version name?  >\nNo default choice, try again...\n--- Version name?  > 0.9\n--- Version name? (hit return to stop) >\n*** By default, first version in list is displayed. You may also indicate\n*** a prefered version.\n--- Default displayed version is first in 'range'? [YES/no] >\n*** Setting directory lists\n*** Some directories may contain non-public project data (binaries,\n*** compilers caches, SCM control data, ...). They can be hidden from LXR.\n--- Directory to ignore, e.g. CVSROOT or CVS? (hit return to stop) >\n*** If your source code uses \"include\" statements (#include, require, ...)\n*** LXR needs hints to resolve the destination file.\n--- Include directory, e.g. /include? (hit return to stop) >\n*** Configuring data storage\n--- Database name? > drbd\nDo you want to override the global 'lxr' user name? [yes/NO] >\nDo you want to override the global 'lxr_' table prefix? [yes/NO] >\n\n*** Configure another tree? [YES/no] >\n        , 'shortcaption' => 'drbd'\n*** Configuring LXR server parameters\n*** The virtual root is the fixed URL part after the hostname.\n*** You previously defined the virtual root as /lxr\n--- Caption in page header? (e.g. Project XYZZY displayed by LXR) > Ceph\nDo you want a speed switch button for this tree ? [YES/no] >\n--- Short title for button? (e.g. XYZZY) > Ceph\n--- Tree identification in URL? (e.g. the-tree) > Ceph\nDo you need a specific encoding for this tree ? [yes/NO] >\n*** Describing tree location\nHow is your tree stored? [FILES/cvs/git/svn/hg/bk] >\n*** A source directory contains one sub-directory for every version.\n--- Source directory? (e.g. /home/myself/project-tree) > /opt/lxr/source_code/ceph/\nName to display for the path root? (e.g. Project or $v for version) [$v] >\n*** Enumerating versions\nLabel for version selection menu?  [Version] >\n*** Versions can be explicitly enumerated, be read from a file or computed\n*** by a function. The latter case is recommended for VCS-stored trees.\nVersion enumeration method? [LIST/file/function] >\n--- Version name?  > master\n--- Version name? (hit return to stop) >\n*** By default, first version in list is displayed. You may also indicate\n*** a prefered version.\n--- Default displayed version is first in 'range'? [YES/no] >\n*** Setting directory lists\n*** Some directories may contain non-public project data (binaries,\n*** compilers caches, SCM control data, ...). They can be hidden from LXR.\n--- Directory to ignore, e.g. CVSROOT or CVS? (hit return to stop) >\n*** If your source code uses \"include\" statements (#include, require, ...)\n*** LXR needs hints to resolve the destination file.\n--- Include directory, e.g. /include? (hit return to stop) >\n*** Configuring data storage\n--- Database name? > ceph\nDo you want to override the global 'lxr' user name? [yes/NO] >\nDo you want to override the global 'lxr_' table prefix? [yes/NO] >\n\n*** Configure another tree? [YES/no] > no\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Initail DB via tool initdb.sh")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./custom.d/initdb.sh\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Copy the lxr.conf from custom.d dir to root dir.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cp ./custom.d/lxr.conf .\n")),(0,o.kt)("h1",{id:"generate-reference"},"Generate Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Generate the reference of project ",(0,o.kt)("inlineCode",{parentName:"li"},"ceph"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./genxref --url=http://localhost/lxr --tree=Ceph --version=master\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Generate the reference of project ",(0,o.kt)("inlineCode",{parentName:"li"},"drbd"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./genxref --url=http://localhost/lxr --tree=drbd --version=9.0\n")),(0,o.kt)("h1",{id:"setup-web-server"},"Setup WEB Server"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Copy the server config to apache2 configuration dir.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cp apache-lxrserver.conf  /etc/apache2/conf-available\na2enconf apache-lxrserver.conf\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Start the apache2")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"service apaceh2 start\n")),(0,o.kt)("h1",{id:"test"},"Test"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to ",(0,o.kt)("strong",{parentName:"li"},"http://localhost/lxr")," and your see there're two options there, ceph and drbd."),(0,o.kt)("li",{parentName:"ol"},"choose any one of them and you can use that to help you trace the code now.")),(0,o.kt)("h1",{id:"reference"},"Reference"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"[LXR]"," (",(0,o.kt)("a",{parentName:"li",href:"http://lxr.sourceforge.net/en/1-0-InstallSteps/1-0-install1tools.php"},"http://lxr.sourceforge.net/en/1-0-InstallSteps/1-0-install1tools.php"),")")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[40310],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,u=c["".concat(l,".").concat(d)]||c[d]||f[d]||o;return t?a.createElement(u,s(s({ref:n},m),{},{components:t})):a.createElement(u,s({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},27182:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={title:"Mininet \u904b\u4f5c\u539f\u7406",date:"2014-08-19 12:54",comments:!0,tags:["SDN","Openflow","Mininet","Network","SourceCode"]},s=void 0,i={unversionedId:"techPost/2014/mininet-parsing",id:"techPost/2014/mininet-parsing",title:"Mininet \u904b\u4f5c\u539f\u7406",description:"Introduction",source:"@site/docs/techPost/2014/mininet-parsing.md",sourceDirName:"techPost/2014",slug:"/techPost/2014/mininet-parsing",permalink:"/docs/techPost/2014/mininet-parsing",draft:!1,tags:[{label:"SDN",permalink:"/docs/tags/sdn"},{label:"Openflow",permalink:"/docs/tags/openflow"},{label:"Mininet",permalink:"/docs/tags/mininet"},{label:"Network",permalink:"/docs/tags/network"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"Mininet \u904b\u4f5c\u539f\u7406",date:"2014-08-19 12:54",comments:!0,tags:["SDN","Openflow","Mininet","Network","SourceCode"]},sidebar:"techPost",previous:{title:"Mininet with different network subnet",permalink:"/docs/techPost/2014/mininet-and-network-subnet"},next:{title:"Mininet with different network subnet (v2)",permalink:"/docs/techPost/2014/mininet-with-different-network-subnet-v2"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Steps",id:"steps",level:2},{value:"mnexec",id:"mnexec",level:3},{value:"\u6700\u5f8c",id:"\u6700\u5f8c",level:2}],m={toc:p},c="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6b64\u7bc7\u6587\u7ae0\u7684\u76ee\u6a19\u662f\u7528\u4f86\u91d0\u6e05",(0,r.kt)("inlineCode",{parentName:"li"},"mininet"),"\u662f\u5982\u4f55emulate\u7db2\u8def\u4e2d\u7684",(0,r.kt)("strong",{parentName:"li"},"host"),"\u3001",(0,r.kt)("strong",{parentName:"li"},"switch"),"\u4ee5\u53ca",(0,r.kt)("strong",{parentName:"li"},"link")),(0,r.kt)("li",{parentName:"ul"},"\u4e3b\u8981\u4ee5\u5716\u89e3\u3001\u6307\u4ee4\u8207mininet\u5be6\u969b\u4e2d\u7684\u7a0b\u5f0f\u78bc\u4f86\u63cf\u8ff0\u6240\u6709\u7684\u884c\u70ba"),(0,r.kt)("li",{parentName:"ul"},"Mininet version: ",(0,r.kt)("strong",{parentName:"li"},"2.1.0p1")),(0,r.kt)("li",{parentName:"ul"},"Mininet\u76ee\u524d\u662f\u63a1\u7528",(0,r.kt)("strong",{parentName:"li"},"network namespaces"),"\u4f86\u9054\u5230",(0,r.kt)("strong",{parentName:"li"},"network isolation"),"\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u53c3\u8003",(0,r.kt)("a",{parentName:"li",href:"http://mininet.org/overview/"},"\u9019\u908a"),"\u7684\u8aaa\u660e"),(0,r.kt)("li",{parentName:"ul"},"\u5e95\u4e0b\u6703\u63cf\u8ff0\u8981\u5982\u4f55\u5728\u7cfb\u7d71\u4e2d\u4eff\u771f\u51fa\u4e00\u500b\u5982\u4e0b\u5716\u822c\u7684\u62d3\u6a38")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/-Ks4Jnge1LM0/U_NVE6312vI/AAAAAAAABnc/UABXeIqFiUg/w804-h419-no/Figure0.png",alt:null})),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("p",null,"\u4e00\u958b\u59cb\uff0c\u6211\u5011\u7684\u7cfb\u7d71\u74b0\u5883\u5b8c\u5168\u662f\u7a7a\u7684\uff0c\u5982\u4e0b\n",(0,r.kt)("img",{parentName:"p",src:"https://lh4.googleusercontent.com/bHfBMKJ8lgNchmpK8mXEgxty3B609ChpBYx20qpYXso=w804-h419-no",alt:null})),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u6211\u5011\u8981\u5148\u70ba\u7cfb\u7d71\u4e2d\u5275\u7acb\u5169\u500bHost\uff0c\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"mininet"),"\u88e1\u9762\uff0c\u6bcf\u500bHost\u5176\u5be6\u5c31\u662f\u4e00\u500b",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),"\u7684\u7269\u4ef6\uff0c\u53ef\u4ee5\u5728node.py\u4e2d\u770b\u5230\u6b64\u7269\u4ef6\u7684\u5b9a\u7fa9\uff0c\u5982\u4e0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Node( object ):\n    """A virtual network node is simply a shell in a network namespace.\n       We communicate with it using pipes."""\n\n    portBase = 0  # Nodes always start with eth0/port0, even in OF 1.0\n\n    def __init__( self, name, inNamespace=True, **params ):\n        """name: name of node\n           inNamespace: in network namespace?\n           params: Node parameters (see config() for details)"""\n\n        # Make sure class actually works\n        self.checkSetup()\n\n        self.name = name\n        self.inNamespace = inNamespace\n\n        # Stash configuration parameters for future reference\n        self.params = params\n\n        self.intfs = {}  # dict of port numbers to interfaces\n        self.ports = {}  # dict of interfaces to port numbers\n                         # replace with Port objects, eventually ?\n        self.nameToIntf = {}  # dict of interface names to Intfs\n\n        # Make pylint happy\n        ( self.shell, self.execed, self.pid, self.stdin, self.stdout,\n            self.lastPid, self.lastCmd, self.pollOut ) = (\n                None, None, None, None, None, None, None, None )\n        self.waiting = False\n        self.readbuf = \'\'\n\n        # Start command interpreter shell\n        self.startShell()\n')),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0c\u9019\u908a\u6703\u6709\u4e00\u500b\u8b8a\u6578",(0,r.kt)("strong",{parentName:"p"},"inNamespace"),"\u7528\u4f86\u6c7a\u5b9a\u6b64Host\u662f\u5426\u8981\u900f\u904e",(0,r.kt)("strong",{parentName:"p"},"network namespaces"),"\u4f86\u9054\u5230",(0,r.kt)("strong",{parentName:"p"},"network isolation"),"\u7684\u529f\u80fd\uff0c\u7576\u4e00\u5207\u8b8a\u6578\u90fd\u521d\u59cb\u5316\u5f8c\uff0c\u5c31\u6703\u547c\u53eb",(0,r.kt)("strong",{parentName:"p"},"startShell()"),"\u4f86\u57f7\u884c\u6b64Host\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def startShell( self ):\n        \"Start a shell process for running commands\"\n        if self.shell:\n            error( \"%s: shell is already running\" )\n            return\n        # mnexec: (c)lose descriptors, (d)etach from tty,\n        # (p)rint pid, and run in (n)amespace\n        opts = '-cdp'\n        if self.inNamespace:\n            opts += 'n'\n        # bash -m: enable job control\n        # -s: pass $* to shell, and make process easy to find in ps\n        cmd = [ 'mnexec', opts, 'bash', '-ms', 'mininet:' + self.name ]\n        self.shell = Popen( cmd, stdin=PIPE, stdout=PIPE, stderr=STDOUT,\n                            close_fds=True )\n        self.stdin = self.shell.stdin\n        self.stdout = self.shell.stdout\n        ...\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"mininet"),"\u662f\u900f\u904e\u4e00\u96bb\u53eb\u505a",(0,r.kt)("inlineCode",{parentName:"p"},"mnexec"),"\u7684\u7a0b\u5f0f\u4f86\u57f7\u884c\uff0c"),(0,r.kt)("h3",{id:"mnexec"},"mnexec"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u900f\u904e\u53c3\u6578-n\u4f86\u5c07\u6b64process\u7d66\u8f49\u63db\u5230",(0,r.kt)("strong",{parentName:"li"},"network namespaces"),"\u4e2d"),(0,r.kt)("li",{parentName:"ul"},"\u7a0b\u5f0f\u5167\u6703\u900f\u904e",(0,r.kt)("strong",{parentName:"li"},"execvp"),"\u53bb\u57f7\u884c\u53c3\u6578\u4e2d\u7684\u6307\u4ee4\uff0c\u5728\u6b64\u7bc4\u4f8b\u4e2d\u8a72\u6307\u4ee4\u5c31\u662f",(0,r.kt)("strong",{parentName:"li"},'"-ms mininet:"+self.name'),"\u3002",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u9019\u908a\u53ef\u4ee5\u900f\u904e\u57f7\u884cmininet\u5f8c\uff0c\u5728\u57f7\u884c",(0,r.kt)("strong",{parentName:"li"},"ps auxww | grep mininet"),"\uff0c\u61c9\u8a72\u6703\u770b\u5230\u985e\u4f3c\u4e0b\u9762\u7684\u7d50\u679c")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"root     22071  0.0  0.0  12308  1384 ?        Ss   23:10   0:00 bash -ms mininet:c0\nroot     22079  0.0  0.0  12308  1384 ?        Ss   23:10   0:00 bash -ms mininet:h1\nroot     22080  0.0  0.0  12308  1380 ?        Ss   23:10   0:00 bash -ms mininet:h2\nroot     22081  0.0  0.0  12308  1380 ?        Ss   23:10   0:00 bash -ms mininet:h3\nroot     22082  0.0  0.0  12308  1380 ?        Ss   23:10   0:00 bash -ms mininet:h4\nroot     22085  0.0  0.0  12312  1384 ?        Ss   23:10   0:00 bash -ms mininet:s1\nroot     22090  0.0  0.0  12312  1388 ?        Ss   23:10   0:00 bash -ms mininet:s2\nroot     22095  0.0  0.0  12312  1388 ?        Ss   23:10   0:00 bash -ms mininet:s3\nroot     22100  0.0  0.0  12312  1384 ?        Ss   23:10   0:00 bash -ms mininet:s4\nroot     22105  0.0  0.0  12312  1384 ?        Ss   23:10   0:00 bash -ms mininet:s5\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4e26\u4e14\u628a\u8a72",(0,r.kt)("inlineCode",{parentName:"li"},"mnexec"),"\u7684",(0,r.kt)("strong",{parentName:"li"},"stdout"),",",(0,r.kt)("strong",{parentName:"li"},"stdin"),"\u7d66\u63a5\u8d77\u4f86\uff0c\u672a\u4f86\u6703\u9700\u8981\u900f\u904e\u9019\u5169\u500bFD\u4f86\u8207\u8a72host\u6e9d\u901a\u3002")),(0,r.kt)("p",null,"\u7576\u521d\u59cb\u5316\u5169\u500bHost\u5f8c\uff0c\u7cfb\u7d71\u4e2d\u5c31\u6703\u51fa\u73fe\u4e86\u5169\u500bHost\uff0c\u4e14\u9019\u5169\u500bhost\u90fd\u6703\u900f\u904e",(0,r.kt)("strong",{parentName:"p"},"namespace"),"\u4f86\u9054\u5230",(0,r.kt)("strong",{parentName:"p"},"network isolation"),"\uff0c\u7406\u8ad6\u4e0a\u6211\u5011\u8981\u53ef\u4ee5\u900f\u904e",(0,r.kt)("inlineCode",{parentName:"p"},"ip netns show"),"\u4f86\u770b\u5230\u9019\u4e9b",(0,r.kt)("strong",{parentName:"p"},"namespaces"),"\uff0c\u5be6\u969b\u4e0a\u537b\u770b\u4e0d\u5230\uff0c\u539f\u56e0\u5982\u540c",(0,r.kt)("a",{parentName:"p",href:"https://mailman.stanford.edu/pipermail/mininet-discuss/2014-January/003796.html"},"\u6b64\u7bc7"),"\u6240\u8aaa\u3002\n\u6b64\u6642\uff0c\u6211\u5011\u7684\u7cfb\u7d71\u5982\u4e0b\n",(0,r.kt)("img",{parentName:"p",src:"https://lh5.googleusercontent.com/oT14RIKBCPSRYLXLjhL8jC3vS5oPdMf67r5_gBRebuY=w804-h419-no",alt:null})),(0,r.kt)("p",null,"\u5275\u7acb\u597dHost\u5f8c\uff0c\u63a5\u4e0b\u4f86\u8981\u5275\u7acbSwitch\uff0cSwitch\u6709\u5f88\u591a\u7a2e\u9078\u64c7\uff0c\u5305\u542b\u4e86",(0,r.kt)("strong",{parentName:"p"},"OVSLegacyKernelSwitch"),"\u3001",(0,r.kt)("strong",{parentName:"p"},"UserSwitch"),"\u3001",(0,r.kt)("strong",{parentName:"p"},"OVSSwitch"),"\uff0c",(0,r.kt)("strong",{parentName:"p"},"IVSSwitch"),"\u6b64\u56db\u7a2e\uff0c\u4e00\u822c\u5e38\u7528\u7684\u5c31\u662f",(0,r.kt)("strong",{parentName:"p"},"OVSSwitch"),"\n\u9019\u56db\u7a2eSwitch\u90fd\u7e7c\u627f\u81ea",(0,r.kt)("strong",{parentName:"p"},"Switch"),"\u7269\u4ef6\uff0c\u800c",(0,r.kt)("strong",{parentName:"p"},"Switch"),"\u7269\u4ef6\u5247\u7e7c\u627f\u81ea",(0,r.kt)("strong",{parentName:"p"},"Node")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Node",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Switch"),(0,r.kt)("li",{parentName:"ul"},"OVSLegacyKernelSwitch"),(0,r.kt)("li",{parentName:"ul"},"UserSwitch"),(0,r.kt)("li",{parentName:"ul"},"OVSSwitch"),(0,r.kt)("li",{parentName:"ul"},"IVSSwitch")))),(0,r.kt)("p",null,"\u5728switch\u5275\u7acb\u5f8c\uff0c\u6703\u900f\u904e",(0,r.kt)("strong",{parentName:"p"},"start"),"\u6b64function\u4f86\u9032\u884c\u76f8\u95dc\u521d\u59cb\u5316\u7684\u52d5\u4f5c\uff0c\u4ee5OVSSwitch\u70ba\u4f8b\uff0c\u5c31\u6703\u57f7\u884c\u4e00\u7cfb\u5217\u6211\u5011\u6240\u719f\u6089\u7684",(0,r.kt)("strong",{parentName:"p"},"ovs-*"),"\u6307\u4ee4\uff0c\u5982\u4e0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def start( self, controllers ):\n        \"Start up a new OVS OpenFlow switch using ovs-vsctl\"\n        if self.inNamespace:\n            raise Exception(\n                'OVS kernel switch does not work in a namespace' )\n        # We should probably call config instead, but this\n        # requires some rethinking...\n        self.cmd( 'ifconfig lo up' )\n        # Annoyingly, --if-exists option seems not to work\n        self.cmd( 'ovs-vsctl del-br', self )\n        self.cmd( 'ovs-vsctl add-br', self )\n        if self.datapath == 'user':\n            self.cmd( 'ovs-vsctl set bridge', self,'datapath_type=netdev' )\n        int( self.dpid, 16 ) # DPID must be a hex string\n        self.cmd( 'ovs-vsctl -- set Bridge', self,\n                  'other_config:datapath-id=' + self.dpid )\n        self.cmd( 'ovs-vsctl set-fail-mode', self, self.failMode )\n        for intf in self.intfList():\n            if not intf.IP():\n                self.attach( intf )\n        # Add controllers\n        clist = ' '.join( [ 'tcp:%s:%d' % ( c.IP(), c.port )\n                            for c in controllers ] )\n        if self.listenPort:\n            clist += ' ptcp:%s' % self.listenPort\n        self.cmd( 'ovs-vsctl set-controller', self, clist )\n        # Reconnect quickly to controllers (1s vs. 15s max_backoff)\n        for uuid in self.controllerUUIDs():\n            if uuid.count( '-' ) != 4:\n                # Doesn't look like a UUID\n                continue\n            uuid = uuid.strip()\n            self.cmd( 'ovs-vsctl set Controller', uuid,\n                      'max_backoff=1000' )\n\n")),(0,r.kt)("p",null,"\u5728\u6b64\u7a0b\u5f0f\u4e2d\u6703\u53bb\u9032\u884c"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u8a2d\u5b9abridge"),(0,r.kt)("li",{parentName:"ol"},"\u8a2d\u5b9adatapath_type"),(0,r.kt)("li",{parentName:"ol"},"\u8a2d\u5b9afail-mode"),(0,r.kt)("li",{parentName:"ol"},"\u8a2d\u5b9acontroller")),(0,r.kt)("p",null,"\u6b64\u6642\u7cfb\u7d71\u5982\u4e0b\uff0c\u7cfb\u7d71\u4e2d\u5df2\u7d93\u5275\u7acb\u597d\u4e86switch\u4ee5\u53ca\u5169\u500bhost\uff0c\u9019\u4e09\u500bNode\u90fd\u5206\u5225\u900f\u904e",(0,r.kt)("strong",{parentName:"p"},"namespace"),"\u4f86\u9054\u5230\u4e86",(0,r.kt)("strong",{parentName:"p"},"network isolation"),"\uff0c\u53ea\u662f\u5f7c\u6b64\u4e4b\u9593\u90fd\u5c1a\u672a\u6709\u4efb\u4f55Link\u5b58\u5728\u3002\n",(0,r.kt)("img",{parentName:"p",src:"https://lh4.googleusercontent.com/scsBAIEpo5-gO1k9tVPNTPHr-d7Q-Q3dgEm_nqhodYk=w804-h419-no",alt:null})),(0,r.kt)("p",null,"\u63a5\u4e0b\u4f86\uff0c\u6703\u6839\u64da\u62d3\u58a3\u7684Link\u60c5\u6cc1\u53bb\u5275\u5efa\u5c0d\u61c9\u7684Iterface\u3002\u9996\u5148\uff0c\u9019\u908a\u4f7f\u7528\u5230",(0,r.kt)("strong",{parentName:"p"},"Link"),"\u9019\u500b\u7269\u4ef6\u4f86\u8868\u793a\u6bcf\u4e00\u689dLink\uff0c\u6bcf\u500b",(0,r.kt)("strong",{parentName:"p"},"Link"),"\u5be6\u969b\u4e0a\u5c0d\u61c9\u5230\u7684\u662f\u5169\u500b",(0,r.kt)("strong",{parentName:"p"},"Node"),"\u4e0a\u9762\u7684",(0,r.kt)("strong",{parentName:"p"},"Interface"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Link( object ):\n\n    """A basic link is just a veth pair.\n       Other types of links could be tunnels, link emulators, etc.."""\n\n    def __init__( self, node1, node2, port1=None, port2=None,\n                  intfName1=None, intfName2=None,\n                  intf=Intf, cls1=None, cls2=None, params1=None,\n                  params2=None ):\n        ....\n        if port1 is None:\n            port1 = node1.newPort()\n        if port2 is None:\n            port2 = node2.newPort()\n        if not intfName1:\n            intfName1 = self.intfName( node1, port1 )\n        if not intfName2:\n            intfName2 = self.intfName( node2, port2 )\n\n        self.makeIntfPair( intfName1, intfName2 )\n')),(0,r.kt)("p",null,"\u9019\u908a\u8981\u89c0\u5bdf\u5230\u7684\uff0c",(0,r.kt)("strong",{parentName:"p"},"Link"),"\u7269\u4ef6\u6703\u547c\u53eb",(0,r.kt)("strong",{parentName:"p"},"makeIntfPair"),"\u6b64\u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5c07\u5169\u500b",(0,r.kt)("strong",{parentName:"p"},"Interface"),"\u7d66\u4e32\u63a5\u8d77\u4f86"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def makeIntfPair( intf1, intf2 ):\n    \"\"\"Make a veth pair connecting intf1 and intf2.\n       intf1: string, interface\n       intf2: string, interface\n       returns: success boolean\"\"\"\n    # Delete any old interfaces with the same names\n    quietRun( 'ip link del ' + intf1 )\n    quietRun( 'ip link del ' + intf2 )\n    # Create new pair\n    cmd = 'ip link add name ' + intf1 + ' type veth peer name ' + intf2\n    return quietRun( cmd )\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"mininet"),"\u5be6\u969b\u4e0a\u662f\u900f\u904e\u7cfb\u7d71\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"ip link"),"\u7684\u65b9\u6cd5\u5c07\u5169\u500b",(0,r.kt)("strong",{parentName:"p"},"interface"),"\u5275\u9020\u4e00\u689d",(0,r.kt)("strong",{parentName:"p"},"veth"),"\u7684Link\u3002\n\u6b64\u6642\u7cfb\u7d71\u5982\u4e0b\n",(0,r.kt)("img",{parentName:"p",src:"https://lh6.googleusercontent.com/-oMP0TN5dms4/U_NZpcJaNuI/AAAAAAAABoI/O_zxCNeI27Y/w804-h419-no/Figure5.png",alt:null})),(0,r.kt)("p",null,"\u63a5\u4e0b\u4f86\uff0c\u6211\u5011\u8981\u628a\u9019\u4e9b",(0,r.kt)("strong",{parentName:"p"},"interface"),"\u7d66\u7d81\u5230\u7279\u5b9a\u7684",(0,r.kt)("strong",{parentName:"p"},"Node"),"\u8eab\u4e0a\uff0c\u5728",(0,r.kt)("strong",{parentName:"p"},"Link"),"\u7269\u4ef6\u521d\u59cb\u5316\u5f8c\u6bb5\uff0c\u6703\u53bb\u521d\u59cb\u5316\u5169\u500b",(0,r.kt)("strong",{parentName:"p"},"Interface"),"\u771f\u6b63\u7684\u7269\u4ef6\u672c\u9ad4\uff0c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'class Intf( object ):\n\n    "Basic interface object that can configure itself."\n\n    def __init__( self, name, node=None, port=None, link=None, **params ):\n        """name: interface name (e.g. h1-eth0)\n           node: owning node (where this intf most likely lives)\n           link: parent link if we\'re part of a link\n           other arguments are passed to config()"""\n        self.node = node\n        self.name = name\n        self.link = link\n        self.mac, self.ip, self.prefixLen = None, None, None\n        # Add to node (and move ourselves if necessary )\n        node.addIntf( self, port=port )\n        # Save params for future reference\n        self.params = params\n        self.config( **params )\n')),(0,r.kt)("p",null,"\u9019\u908a\u8981\u89c0\u5bdf\u7684\u91cd\u9ede\u662f\u6bcf\u500b",(0,r.kt)("strong",{parentName:"p"},"Interface"),"\u90fd\u6703\u53bb\u547c\u53eb",(0,r.kt)("strong",{parentName:"p"},"node.addIntf( self, port=port )"),"\u4f86\u8655\u7406\uff0c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def addIntf( self, intf, port=None ):\n        \"\"\"Add an interface.\n           intf: interface\n           port: port number (optional, typically OpenFlow port number)\"\"\"\n        if port is None:\n            port = self.newPort()\n        self.intfs[ port ] = intf\n        self.ports[ intf ] = port\n        self.nameToIntf[ intf.name ] = intf\n        debug( '\\n' )\n        debug( 'added intf %s:%d to node %s\\n' % ( intf, port, self.name ) )\n        if self.inNamespace:\n            debug( 'moving', intf, 'into namespace for', self.name, '\\n' )\n            moveIntf( intf.name, self )\n")),(0,r.kt)("p",null,"\u6b64\u65b9\u6cd5\u6700\u5f8c\u6703\u547c\u53eb ",(0,r.kt)("strong",{parentName:"p"},"moveIntf")," \u4f86\u5c07\u8a72",(0,r.kt)("strong",{parentName:"p"},"interface"),"\u7d66\u8655\u7406\uff0c",(0,r.kt)("strong",{parentName:"p"},"moveIntf"),"\u5247\u6703\u547c\u53eb",(0,r.kt)("strong",{parentName:"p"},"moveIntfNoRetry"),"\u5c07",(0,r.kt)("strong",{parentName:"p"},"Interface"),"\u7d66\u7d81\u5165\u5230\u6bcf\u500b",(0,r.kt)("strong",{parentName:"p"},"Node"),"\u4e2d\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def moveIntfNoRetry( intf, dstNode, srcNode=None, printError=False ):\n    \"\"\"Move interface to node, without retrying.\n       intf: string, interface\n        dstNode: destination Node\n        srcNode: source Node or None (default) for root ns\n        printError: if true, print error\"\"\"\n    intf = str( intf )\n    cmd = 'ip link set %s netns %s' % ( intf, dstNode.pid )\n    if srcNode:\n        srcNode.cmd( cmd )\n    else:\n        quietRun( cmd )\n    links = dstNode.cmd( 'ip link show' )\n    if not ( ' %s:' % intf ) in links:\n        if printError:\n            error( '*** Error: moveIntf: ' + intf +\n                   ' not successfully moved to ' + dstNode.name + '\\n' )\n        return False\n    return True\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0c\u900f\u904e\u7684\u6307\u4ee4\u5247\u662f",(0,r.kt)("strong",{parentName:"p"},"ip link set %s netns %s"),"\uff0c\u6703\u5c07\u7279\u5b9a\u7684",(0,r.kt)("strong",{parentName:"p"},"interface"),"\u7d66\u585e\u5165\u7279\u5b9a",(0,r.kt)("strong",{parentName:"p"},"Node"),"\u7684",(0,r.kt)("strong",{parentName:"p"},"namespace"),"\u4e4b\u4e2d\n\u6b64\u6642\uff0c\u6211\u5011\u7684\u7cfb\u7d71\u5982\u4e0b\n",(0,r.kt)("img",{parentName:"p",src:"https://lh5.googleusercontent.com/xn1vz7MvkXaGuCw3Dd_DYiHJ1nSZ992W_cZ6i-s7rmE=w804-h419-no",alt:null})),(0,r.kt)("h2",{id:"\u6700\u5f8c"},"\u6700\u5f8c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u900f\u904e",(0,r.kt)("inlineCode",{parentName:"li"},"ovs-vsctl add-port"),"\u5c07",(0,r.kt)("strong",{parentName:"li"},"Switch"),"\u4e0a\u9762\u7684",(0,r.kt)("strong",{parentName:"li"},"Interface"),"\u90fd\u7d66OVS\u63a7\u7ba1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def attach( self, intf ):\n        \"Connect a data port\"\n        self.cmd( 'ovs-vsctl add-port', self, intf )\n        self.cmd( 'ifconfig', intf, 'up' )\n        self.TCReapply( intf )\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8a2d\u5b9aHost\u4e0a\u9762\u7db2\u5361\u7684",(0,r.kt)("strong",{parentName:"li"},"MAC"),"\u3001",(0,r.kt)("strong",{parentName:"li"},"IP"),"\u3001",(0,r.kt)("strong",{parentName:"li"},"Default Route"),"\uff0c\u6b64\u6b65\u9a5f\u6703\u5728Mininet\u5674\u51fa",(0,r.kt)("strong",{parentName:"li"},"Configuring hosts"),"\u6642\u8655\u7406")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def config( self, mac=None, ip=None,\n                defaultRoute=None, lo='up', **_params ):\n        \"\"\"Configure Node according to (optional) parameters:\n           mac: MAC address for default interface\n           ip: IP address for default interface\n           ifconfig: arbitrary interface configuration\n           Subclasses should override this method and call\n           the parent class's config(**params)\"\"\"\n        # If we were overriding this method, we would call\n        # the superclass config method here as follows:\n        # r = Parent.config( **_params )\n        r = {}\n        self.setParam( r, 'setMAC', mac=mac )\n        self.setParam( r, 'setIP', ip=ip )\n        self.setParam( r, 'setDefaultRoute', defaultRoute=defaultRoute )\n        # This should be examined\n        self.cmd( 'ifconfig lo ' + lo )\n        return r\n")),(0,r.kt)("p",null,"\u9019\u4e09\u500b\u6307\u4ee4\u6700\u5f8c\u90fd\u6703\u547c\u53eb\u5230",(0,r.kt)("strong",{parentName:"p"},"sendCmd"),"\u4f86\u8655\u7406\uff0c\u6b64\u51fd\u5f0f\u6703\u5229\u7528\u5148\u524d\u57f7\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"mnexec"),"\u5f97\u5230\u7684",(0,r.kt)("strong",{parentName:"p"},"stdin"),",",(0,r.kt)("strong",{parentName:"p"},"stout"),"\u4f86\u8207\u5e95\u4e0b\u7684host\u4ea4\u63db\u8a0a\u606f\u3002"),(0,r.kt)("p",null,"\u4ee5\u4e0a\u5c31\u662f\u4e00\u500b",(0,r.kt)("inlineCode",{parentName:"p"},"mininet"),"\u5982\u4f55\u5275\u9020\u4e00\u500b\u62d3\u6a38\u7684\u7c21\u55ae\u6d41\u7a0b\uff0c\u6709\u6eff\u591a\u7d30\u7bc0\u90fd\u7701\u7565\u6389\u7684\uff0c\u53ea\u6311\u91cd\u8981\u7684\u6307\u4ee4\u4f86\u770b\uff0c\u4f86\u77ad\u89e3\u662f\u5982\u4f55\u900f\u904e\u7cfb\u7d71\u6307\u4ee4\u4f86\u5b8c\u6210\u9019\u4e9b\u62d3\u6a38\u7684\u3002"))}f.isMDXComponent=!0}}]);
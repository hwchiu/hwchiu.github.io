"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[15584],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},_="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),_=d(t),m=a,u=_["".concat(i,".").concat(m)]||_[m]||l[m]||s;return t?r.createElement(u,o(o({ref:n},p),{},{components:t})):r.createElement(u,o({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[_]="string"==typeof e?e:a,o[1]=c;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},27882:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=t(87462),a=(t(67294),t(3905));const s={title:"DRBD v9.0 Network Work Flow(i)",tags:["System","DRBD","Network","SourceCode"],date:new Date("2017-05-11T11:44:12.000Z")},o="Architecture",c={unversionedId:"techPost/2017/DRBD-v9-0-Network-Work-Flow",id:"techPost/2017/DRBD-v9-0-Network-Work-Flow",title:"DRBD v9.0 Network Work Flow(i)",description:"\u6574\u500b DRBD \u5206\u6210 kernel space \u8ddf user space\u3002",source:"@site/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow.md",sourceDirName:"techPost/2017",slug:"/techPost/2017/DRBD-v9-0-Network-Work-Flow",permalink:"/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"DRBD",permalink:"/docs/tags/drbd"},{label:"Network",permalink:"/docs/tags/network"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"DRBD v9.0 Network Work Flow(i)",tags:["System","DRBD","Network","SourceCode"],date:"2017-05-11T11:44:12.000Z"},sidebar:"techPost",previous:{title:"DRBD v9.0 Network Work Flow(ii)",permalink:"/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow-ii"},next:{title:"How to download http file in Android",permalink:"/docs/techPost/2017/android-http"}},i={},d=[{value:"post_parse",id:"post_parse",level:3},{value:"create_implicit_connection",id:"create_implicit_connection",level:3},{value:"set_host_info_in_host_address_pairs",id:"set_host_info_in_host_address_pairs",level:3},{value:"_set_host_info_in_host_address_pairs",id:"_set_host_info_in_host_address_pairs",level:3},{value:"adm_up",id:"adm_up",level:3},{value:"set_peer_in_resource",id:"set_peer_in_resource",level:3},{value:"schedule_deferred_cmd",id:"schedule_deferred_cmd",level:3},{value:"_run_deferred_cmds",id:"_run_deferred_cmds",level:3},{value:"__call_cmd_fn",id:"__call_cmd_fn",level:3},{value:"_generic_config_cmd",id:"_generic_config_cmd",level:3}],p={toc:d},_="wrapper";function l(e){let{components:n,...t}=e;return(0,a.kt)(_,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"\u6574\u500b DRBD \u5206\u6210 kernel space \u8ddf user space\u3002\n\u4e3b\u8981\u7684\u529f\u80fd\u90fd\u5728 kernal space\uff0c\u5728 9.0 \u7248\u672c\u4e2d\u5305\u542b\u4e86\u5169\u500b kernel module(\u5546\u696d\u7248\u9084\u5728\u591a\u4e00\u500bRDMA)\uff0c\u5176\u4e2d ",(0,a.kt)("strong",{parentName:"p"},"drbd_transport_tcp.ko"),"\u5c08\u5fc3\u8ca0\u8cac TCP \u9023\u7dda\u7684\u90e8\u5206\uff0c\u5269\u4e0b\u7684\u529f\u80fd\u90fd\u5728 ",(0,a.kt)("strong",{parentName:"p"},"drbd.ko")," \u4e2d\u5be6\u73fe\u3002\n\u800c user space \u5247\u662f\u8ca0\u8cac\u63d0\u4f9b\u7528\u6236\u4e00\u500b\u65b9\u4fbf\u7684\u64cd\u4f5c\uff0c\u5982",(0,a.kt)("inlineCode",{parentName:"p"},"drbdadm"),"\u9019\u65b9\u9762\u7684\u5de5\u5177\uff0c\u7576\u7528\u6236\u57f7\u884c\u5982 ",(0,a.kt)("strong",{parentName:"p"},"drbdadm up r0")," \u9019\u4e9b\u6307\u4ee4\u5f8c\uff0c\u6700\u5f8c\u6703\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"drbdsetup")," \u5c07\u5fc5\u8981\u7684\u8cc7\u8a0a\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"netlink"),"\u7684\u65b9\u5f0f\u9001\u5f80 kernel space\uff0c\u800c\u5148\u524d\u7684 kernel module \u5247\u6703\u5728 insert \u6642\u5c31\u8a3b\u518a\u8a31\u591a netlink event\uff0c\u6bcf\u7a2etype\u90fd\u6709\u5c0d\u61c9\u7684 handler\u4f86\u8655\u7406\u3002\n\u5982\u4e0b\u5716\u5448\u73fe"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"http://i.imgur.com/SNMiWYj.jpg",alt:"img"})),(0,a.kt)("h1",{id:"environment"},"Environment"),(0,a.kt)("p",null,"\u672c\u6587\u4f7f\u7528\u7684\u7a0b\u5f0f\u78bc\u57fa\u65bc\u4e0b\u5217\u5169\u500b\u5c08\u6848\uff0c\u5206\u5225\u662f"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"kernel space \u7684 project ",(0,a.kt)("a",{parentName:"li",href:"http://git.drbd.org/drbd-9.0.git"},"drbd-9.0")),(0,a.kt)("li",{parentName:"ul"},"user space tool \u7684 project ",(0,a.kt)("a",{parentName:"li",href:"http://git.drbd.org/drbd-utils.git"},"drbd-utils"))),(0,a.kt)("h1",{id:"configuration"},"configuration"),(0,a.kt)("p",null,"\u672c\u6587\u4f7f\u7528\u4ee5\u4e0b\u7684\u8a2d\u5b9a\u6a94\uff0c\u4e26\u4e14\u8457\u91cd\u65bc\u7576 DRBD \u555f\u52d5\u5f8c\uff0c\u6574\u9ad4\u7684\u7db2\u8def\u90e8\u5206\u662f\u5982\u4f55\u8655\u7406\u7684\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"resource r0 {\n  on hw1 {\n    device /dev/drbd0;\n    disk /dev/sdb1;\n    address 10.11.56.2:7788;\n    meta-disk internal;\n  }\n  on hw2 {\n    device /dev/drbd0;\n    disk /dev/sdb1;\n    address 10.11.56.3:7788;\n    meta-disk internal;\n  }\n}\n")),(0,a.kt)("h1",{id:"steps"},"Steps"),(0,a.kt)("p",null,"\u6211\u5011\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"drbdadm up r0")," \u5c07\u7279\u5b9a\u7684 resource ",(0,a.kt)("strong",{parentName:"p"},"r0")," \u7d66\u53eb\u8d77\u4f86\uff0c\u9019\u500b\u6b65\u9a5f\u5be6\u969b\u4e0a\u6703\u727d\u626f\u5230\u5f88\u591a\u884c\u70ba\uff0c\u672c\u6587\u4e3b\u8981\u7814\u7a76 ",(0,a.kt)("strong",{parentName:"p"},"user space"),"\u7684\u884c\u70ba\u3002"),(0,a.kt)("h3",{id:"post_parse"},"post_parse"),(0,a.kt)("p",null,"\u9996\u5148\uff0c\u7576 ",(0,a.kt)("inlineCode",{parentName:"p"},"drbdadm")," \u9019\u96bb\u7a0b\u5f0f\u8d77\u4f86\u5f8c\uff0c\u5167\u90e8\u6703\u5148\u57f7\u884c ",(0,a.kt)("inlineCode",{parentName:"p"},"post_parse")," \u5c0d\u8a2d\u5b9a\u6a94\u9032\u884c\u4e00\u756a\u89e3\u6790\uff0c\u4e26\u4e14\u5c07\u89e3\u6790\u5230\u7684\u8cc7\u6599\u7d66\u5b58\u5230\u4e00\u500b ",(0,a.kt)("strong",{parentName:"p"},"d_resource")," \u7684\u7269\u4ef6\u4e2d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'1063 void post_parse(struct resources *resources, enum pp_flags flags)\n1064 {\n1065     struct d_resource *res;\n1066     struct connection *con;\n..................\n1102     for_each_resource(res, resources) {\n1103         struct d_host_info *host;\n1104         struct mesh *mesh;\n1105\n1106         if (!(flags & DRBDSETUP_SHOW)) {\n1107             for_each_connection(con, &res->connections)\n1108                 must_have_two_hosts(res, con);\n1109         }\n1110\n1111         /* Other steps make no sense. */\n1112         if (!config_valid)\n1113             continue;\n1114\n1115         STAILQ_FOREACH(mesh, &res->meshes, link)\n1116             create_connections_from_mesh(res, mesh);\n1117         create_implicit_connections(res);\n1118         for_each_connection(con, &res->connections)\n1119             set_host_info_in_host_address_pairs(res, con);\n1120         for_each_host(host, &res->all_hosts) {\n1121             if (!host->node_id)\n1122                 derror(host, res, "node-id");\n1123         }\n1124     }\n')),(0,a.kt)("p",null,"\u503c\u5f97\u6ce8\u610f\u662f\u7684\u5f8c\u534a\u90e8\u5206\u7db2\u8def\u90e8\u5206\u7684\u8655\u7406\uff0c\u76ee\u524d ",(0,a.kt)("strong",{parentName:"p"},"drbd.conf")," \u652f\u63f4\u7684\u7db2\u8def\u8a2d\u5b9a\u5927\u81f4\u4e0a\u6709"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Host \u76f4\u63a5\u8a2d\u5b9a"),(0,a.kt)("li",{parentName:"ul"},"Connection \u6307\u540d\u54ea\u5169\u53f0 host \u8981\u4e92\u9023"),(0,a.kt)("li",{parentName:"ul"},"Mesh \u76f4\u63a5\u7528\u53c3\u6578\u5167\u7684 Host \u5275\u5efa\u4e00\u500b mesh \u7db2\u8def")),(0,a.kt)("p",null,"\u6240\u4ee5\u5f9e ",(0,a.kt)("strong",{parentName:"p"},"1102")," \u884c\u958b\u59cb\uff0c\u5c31\u91dd\u5c0d\u6bcf\u500b resource \u7684\u7db2\u8def\u72c0\u614b\u53bb\u8655\u7406\uff0c\u6700\u4e0b\u9762\u7684\u90e8\u5206\u4e3b\u8981\u5206\u6210\u56db\u500b\u90e8\u5206\u53bb\u770b"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\u8a2d\u5b9a Mesh \u7db2\u8def\uff0c\u5247\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"li"},"create_connections_from_mesh"),"\u53bb\u5275\u5efa\u6240\u6709\u7684 connection"),(0,a.kt)("li",{parentName:"ul"},"\u63a5\u4e0b\u4f86\u6703\u6839\u64da\u8a2d\u5b9a\u6a94\u53bb\u5275\u5efa\u4e00\u500b\u96b1\u6027\u7684\u9023\u7dda\uff0c\u6211\u5011\u7684\u8a2d\u5b9a\u6a94\u4e3b\u8981\u662f\u4f9d\u8cf4\u6b64 function \u53bb\u904b\u4f5c\u7684\uff0c\u56e0\u70ba\u6211\u5011\u6c92\u6709\u7279\u5225\u8a2d\u5b9a ",(0,a.kt)("strong",{parentName:"li"},"connection")," \u4ee5\u53ca ",(0,a.kt)("strong",{parentName:"li"},"mesh"),"\uff0c\u6240\u4ee5\u6703\u900f\u904e\u6b64 ",(0,a.kt)("inlineCode",{parentName:"li"},"create_implicit_connection")," \u53bb\u5275\u5efa\u4e00\u689d connection \u4f86\u4f7f\u7528"),(0,a.kt)("li",{parentName:"ul"},"\u63a5\u4e0b\u4f86\u5f9e\u6240\u6709\u7684 connection \u7269\u4ef6\u4e2d(\u53ef\u80fd\u662f\u624b\u52d5\u8a2d\u5b9a\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u4e0a\u8ff0\u5275\u5efa\u7684)\uff0c\u53bb\u8a2d\u5b9a\u76f8\u95dc\u7684\u9023\u7dda\u5730\u5740"),(0,a.kt)("li",{parentName:"ul"},"\u6700\u5f8c\u6aa2\u67e5\u662f\u5426\u6240\u6709\u7684 host \u90fd\u5df2\u7d93\u6709 ",(0,a.kt)("strong",{parentName:"li"},"node_id")," \u9019\u500b\u6b04\u4f4d\uff0c\u7531\u65bc\u6211\u5011\u7684\u8a2d\u5b9a\u6a94\u4e5f\u6c92\u6709\u5beb ",(0,a.kt)("strong",{parentName:"li"},"node_id"),"\uff0c\u9019\u500b\u6578\u503c\u6703\u5728\u4e0a\u8ff0\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"set_host_info_in_host_address_pairs")," \u4e2d\u53bb\u5275\u7acb\u3002")),(0,a.kt)("h3",{id:"create_implicit_connection"},"create_implicit_connection"),(0,a.kt)("p",null,"\u63a5\u4e0b\u4f86\u770b\u4e00\u4e0b",(0,a.kt)("inlineCode",{parentName:"p"},"create_implicit_connection"),"\u600e\u9ebc\u8655\u7406\u7684"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0729 static void create_implicit_connections(struct d_resource *res)\n0730 {\n0731     struct connection *conn;\n0732     struct path *path;\n0733     struct hname_address *ha;\n0734     struct d_host_info *host_info;\n0735     int hosts = 0;\n0736\n0737     if (!STAILQ_EMPTY(&res->connections))\n0738         return;\n")),(0,a.kt)("p",null,"\u5f9e\u9019\u908a\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u5982\u679c\u4f60\u7684",(0,a.kt)("strong",{parentName:"p"},"drbd.conf"),"\u4e2d\u6709\u4f7f\u7528\u5230 ",(0,a.kt)("strong",{parentName:"p"},"connection")," \u6b04\u4f4d\u7684\u8a71\uff0c\u90a3\u9019\u908a\u5c31\u76f4\u63a5\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u5e6b\u5fd9\u7522\u751f\u4efb\u4f55 connection \u4f7f\u7528"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0740     conn = alloc_connection();\n0741     conn->implicit = 1;\n0742     path = alloc_path();\n0743     path->implicit = 1;\n0744     insert_tail(&conn->paths, path);\n")),(0,a.kt)("p",null,"\u521d\u59cb\u5316\u76f8\u95dc\u6210\u54e1\uff0c\u4e3b\u8981\u662f ",(0,a.kt)("strong",{parentName:"p"},"struct connection")," \u4ee5\u53ca ",(0,a.kt)("strong",{parentName:"p"},"struct path"),"\uff0c\u4e4b\u5f8c\u6703\u518d\u5206\u6790\u9019\u4e9b\u7d50\u69cb\u5f7c\u6b64\u7684\u95dc\u4fc2\uff0c\u9019\u908a\u53ea\u8981\u5148\u77e5\u9053\u6bcf\u500b ",(0,a.kt)("strong",{parentName:"p"},"connection"),"\u5e95\u4e0b\u90fd\u6703\u6709\u4e00\u4e32 ",(0,a.kt)("strong",{parentName:"p"},"path")," \u5373\u53ef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0746     for_each_host(host_info, &res->all_hosts) {\n0747         if (++hosts == 3) {\n0748             err(\"Resource %s:\\n\\t\"\n0749                 \"Use explicit 'connection' sections with more than two 'on' sections.\\n\",\n0750                     res->name);\n0751             break;\n0752         }\n0753         if (host_info->address.af && host_info->address.addr && host_info->address.port) {\n0754             ha = alloc_hname_address();\n0755             ha->host_info = host_info;\n0756             ha->proxy = host_info->proxy_compat_only;\n0757             if (!host_info->lower) {\n0758                 ha->name = STAILQ_FIRST(&host_info->on_hosts)->name;\n0759             } else {\n0760                 ha->name = strdup(names_to_str_c(&host_info->on_hosts, '_'));\n0761                 ha->address = host_info->address;\n0762                 ha->faked_hostname = 1;\n0763                 ha->parsed_address = 1; /* not true, but makes dump nicer */\n0764             }\n0765             STAILQ_INSERT_TAIL(&path->hname_address_pairs, ha, link);\n0766         }\n0767     }\n0768\n0769     if (hosts == 2)\n0770         STAILQ_INSERT_TAIL(&res->connections, conn, link);\n0771     else\n0772         free_connection(conn);\n")),(0,a.kt)("p",null,"\u9019\u908a\u8981\u958b\u59cb\u91dd\u5c0d ",(0,a.kt)("strong",{parentName:"p"},"host"),"\u5275\u7acb\u5c0d\u61c9\u7684 connection \u7d50\u69cb\uff0c\u9019\u908a\u8981\u6ce8\u610f\u7684\u662f\uff0c\u82e5 ",(0,a.kt)("strong",{parentName:"p"},"drbd.conf"),"\u4e2d\u8a72 host \u6578\u91cf\u662f\u5169\u53f0\u4ee5\u4e0a\u7684\u6642\u5019\uff0c\u9019\u6642\u5019 connection \u5c31\u6c92\u6709\u90a3\u9ebc\u7c21\u55ae\u7684\u53bb\u6c7a\u5b9a\u8981\u4f7f\u7528\u90a3\u4e9b host\uff0c\u6240\u4ee5\u5728\u9019\u908a\u5c31\u6703\u8df3\u904e\u9019\u500b\u60c5\u5f62\u3002\n\u91dd\u5c0d\u6bcf\u500b host \u5c07\u5176\u8cc7\u8a0a\u90fd\u6536\u96c6\u8d77\u4f86\u653e\u5728 ",(0,a.kt)("strong",{parentName:"p"},"struct hname_address ","*","ha")," \u5167\uff0c\u6700\u5f8c\u518d\u653e\u5230 ",(0,a.kt)("strong",{parentName:"p"},"path"),"\u88e1\u9762\n\u6240\u4ee5\u5230\u9019\u500b\u968e\u6bb5\uff0c\u4e00\u689d connection \u5e95\u4e0b\u6709\u4e00\u500b path\uff0c\u800c path \u5e95\u4e0b\u6709\u4e00\u500b list\uff0c\u88e1\u9762\u653e\u4e86\u5169\u500b ",(0,a.kt)("strong",{parentName:"p"},"ha"),"\u3002\n\u6700\u5f8c\u547c\u53eb MARCO ",(0,a.kt)("strong",{parentName:"p"},"STAILQ_INSERT_TAIL")," \u5c07\u7576\u524d\u5275\u597d\u7684 ",(0,a.kt)("strong",{parentName:"p"},"connection")," \u7d66\u653e\u5230\u6574\u500b ",(0,a.kt)("strong",{parentName:"p"},"resource")," \u7269\u4ef6\u4e4b\u4e2d\uff0c\u9019\u908a\u4e5f\u662f\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"linklist")," \u7684\u65b9\u5f0f\u7d66\u7d81\u9032\u53bb\u3002"),(0,a.kt)("h3",{id:"set_host_info_in_host_address_pairs"},"set_host_info_in_host_address_pairs"),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"post_parse")," \u4e2d\uff0c\u7576\u6211\u5011\u90fd\u6e96\u5099\u597d connection \u5f8c\uff0c\u63a5\u4e0b\u4f86\u6703\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"set_host_info_in_host_address_pairs "),"\u8981\u8655\u7406\u4e00\u4e9b host \u76f8\u95dc\u7684\u8cc7\u8a0a\uff0c\u5982 ",(0,a.kt)("strong",{parentName:"p"},"node_id"),"\u3002\n\u53ef\u4ee5\u5f9e\u7a0b\u5f0f\u78bc\u5167\u770b\u5230\uff0c\u6703\u6383\u904e\u6240\u6709\u7684 path\uff0c\u7136\u5f8c\u5c0d\u6240\u6709\u7684 path \u518d\u9032\u884c\u4e00\u6b21 ",(0,a.kt)("inlineCode",{parentName:"p"},"_set_host_info_in_host_address_pairs")," \u7684\u547c\u53eb\uff0c\u5728\u672c\u6587\u7684\u7bc4\u4f8b\u4e2d\uff0c\u56e0\u70ba PATH \u53ea\u6709\u4e00\u689d\uff0c\u6240\u4ee5\u53ea\u6703\u88ab\u547c\u53eb\u4e00\u6b21\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0255 static void set_host_info_in_host_address_pairs(struct d_resource *res, struct connection *conn)\n0256 {\n0257     struct path *path;\n0258\n0259     for_each_path(path, &conn->paths)\n0260         _set_host_info_in_host_address_pairs(res, conn, path);\n0261 }\n")),(0,a.kt)("h3",{id:"_set_host_info_in_host_address_pairs"},"_set_host_info_in_host_address_pairs"),(0,a.kt)("p",null,"\u9019\u908a\u7684\u7a0b\u5f0f\u78bc\u6bd4\u8f03\u9577\uff0c\u4e3b\u8981\u91dd\u5c0d\u8ddf\u672c\u6587\u7bc4\u4f8b\u76f8\u95dc\u7684\u908f\u8f2f\u70ba\u4e3b\n\u9996\u5148\u5148\u6383\u904e\u8a72 path \u5e95\u4e0b\u7684",(0,a.kt)("strong",{parentName:"p"},"hname_address"),"\uff0c\u5728\u4e4b\u524d\u7684\u904e\u7a0b\u4e2d\uff0c\u6211\u5011\u585e\u4e86\u5169\u500b ",(0,a.kt)("strong",{parentName:"p"},"struct hname_address"),"\u9032\u53bb\uff0c\u6240\u4ee5\u7406\u8ad6\u4e0a\u9019\u500b for \u8ff4\u5708\u53ea\u6703\u8dd1\u5169\u6b21\u800c\u5df2\u3002\n\u7531\u65bc\u5148\u524d\u5275\u7acb ",(0,a.kt)("strong",{parentName:"p"},"hname_address")," \u7684\u6642\u5019\uff0c\u4e5f\u9806\u4fbf\u5c07\u5176\u5e95\u4e0b\u7684 ",(0,a.kt)("strong",{parentName:"p"},"host_info")," \u4e5f\u6e96\u5099\u597d\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u500b ",(0,a.kt)("strong",{parentName:"p"},"if")," \u5224\u65b7\u65c1\u908a\u4e5f\u6709\u76f8\u5c0d\u61c9\u7684\u8a3b\u89e3\u3002\n\u9019\u908a\u6700\u4e3b\u8981\u7684\u662f\u4f7f\u7528 crc32 \u8a08\u7b97 address \u7684 hash\u4f7f\u7528\uff0c\u4f9b\u5f8c\u7e8c\u7522\u751f node_id \u4f7f\u7528\uff0c\u540c\u6642\u628a\u9019\u4e9b host_info \u90fd\u5b58\u8d77\u4f86"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0141 static void _set_host_info_in_host_address_pairs(struct d_resource *res,\n0142                          struct connection *conn,\n0143                          struct path *path)\n0144 {\n0145     struct hname_address *ha;\n0146     struct d_host_info *host_info;\n0147     int addr_hash[2], i = 0;\n0148     struct d_host_info *host_info_array[2];\n0149\n0150     STAILQ_FOREACH(ha, &path->hname_address_pairs, link) {\n0151         if (ha->host_info) { /* Implicit connection have that already set. */\n0152             host_info = ha->host_info;\n0153             if (i == 2) {\n0154                 err("LOGIC BUG in set_host_info_in_host_address_pairs()\\n");\n0155                 exit(20);\n0156             }\n0157             if (!host_info->address.addr) {\n0158                 err("\\"connection-mesh\\" (for \\"%s\\") with a host (\\"%s\\") "\n0159                         "that has no \\"address\\" defined\\n",\n0160                         res->name, ha->name);\n0161                 config_valid = 0;\n0162                 return;\n0163             }\n0164             addr_hash[i] = crc32c(0x1a656f21,\n0165                     (void *)host_info->address.addr,\n0166                     strlen(host_info->address.addr));\n0167             host_info_array[i++] = host_info;\n...........\n')),(0,a.kt)("p",null,"\u6700\u5f8c\uff0c\u82e5\u9019\u689d connection \u662f\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"create_implicit_connection")," \u7522\u751f\u7684\uff0c\u5247\u8981\u5c0d connection \u5169\u7aef\u7684 host \u53bb\u7522\u751f\u4e00\u500b node_id \u4f86\u5b58\u653e\uff0c\u9019\u908a\u4f7f\u7528\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"generate_implicit_node_id")," \u4f86\u7522\u751f node id\uff0c\u82e5\u525b\u597d\u5169\u500b hash \u90fd\u4e00\u6a23\u7684\u8a71\uff0c\u5c31\u6703\u767c\u751f\u5931\u6557\uff0c\u8a3b\u89e3\u4e2d\u6709\u63d0\u5230\u5931\u6557\u7684\u539f\u56e0\u6709\u53ef\u80fd\u5169\u500b host \u63a1\u7528\u4e86 proxy \u7684\u67b6\u69cb\uff0c\u6240\u4ee5 ip address \u90fd\u6703\u76f8\u540c\u3002\u9019\u7a2e\u60c5\u6cc1\u4e0b\u5c31\u91cd\u65b0\u900f\u904e",(0,a.kt)("inlineCode",{parentName:"p"},"crc32c"),"\u642d\u914dproxy\u7684\u8b8a\u6578\u4f86\u91cd\u65b0\u8a08\u7b97\u4e00\u6b21node id\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0224     if (conn->implicit && i == 2 && !host_info_array[0]->node_id && !host_info_array[1]->node_id) {\n0225         /* This is drbd-8.3 / drbd-8.4 compatibility, auto created node-id */\n0226         bool have_node_ids;\n0227\n0228         have_node_ids = generate_implicit_node_id(addr_hash, host_info_array);\n0229\n0230         if (!have_node_ids) {\n0231             /* That might be a config with equal node addresses, since it is\n0232               127.0.0.1:xxx with a proxy... */\n0233             i = 0;\n0234             path = STAILQ_FIRST(&conn->paths); /* there may only be one */\n0235             STAILQ_FOREACH(ha, &path->hname_address_pairs, link) {\n0236                 if (!ha->host_info)\n0237                     continue;\n0238\n0239                 if (!ha->proxy)\n0240                     break;\n0241\n0242                 addr_hash[i++] = crc32c(0x1a656f21,\n0243                             (void *)ha->proxy->outside.addr,\n0244                             strlen(ha->proxy->outside.addr));\n0245             }\n0246             have_node_ids = generate_implicit_node_id(addr_hash, host_info_array);\n0247         }\n0248         if (!have_node_ids) {\n0249             err("BAD LUCK, equal hashes\\n");\n0250             exit(20);\n0251         }\n0252     }\n')),(0,a.kt)("p",null,"\u7576\u6574\u500b\u8a2d\u5b9a\u6a94\u90fd\u89e3\u6790\u5b8c\u7562\u5f8c\uff0c\u63a5\u4e0b\u4f86\u5c31\u8981\u8655\u7406\u771f\u6b63\u7684\u53c3\u6578",(0,a.kt)("strong",{parentName:"p"},"up r0"),"\u4e86\uff0c\u6839\u64da\u4e0b\u5217\u7a0b\u5f0f\u78bc"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0326 /*  */ struct adm_cmd disconnect_cmd = {"disconnect", adm_drbdsetup, &disconnect_cmd_ctx, ACF1_DISCONNECT};\n0327 static struct adm_cmd up_cmd = {"up", adm_up, ACF1_RESNAME };\n0328 /*  */ struct adm_cmd res_options_cmd = {"resource-options", adm_resource, &resource_options_ctx, ACF1_RESNAME};\n')),(0,a.kt)("p",null,"\u53ef\u4ee5\u6e05\u695a\u7684\u770b\u5230\uff0c\u7576\u7b2c\u4e8c\u500b\u53c3\u6578\u662f ",(0,a.kt)("strong",{parentName:"p"},"up")," \u6642\uff0c\u5be6\u969b\u4e0a\u6703\u547c\u53eb ",(0,a.kt)("inlineCode",{parentName:"p"},"adm_up")," \u4f86\u9032\u884c\u5f8c\u7e8c\u7684\u8655\u7406\u3002\n\u63a5\u4e0b\u4f86\u770b ",(0,a.kt)("inlineCode",{parentName:"p"},"adm_up")," \u7684\u4ecb\u7d39"),(0,a.kt)("h3",{id:"adm_up"},"adm_up"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'1974 /* The "main" loop iterates over resources.\n1975  * This "sorts" the drbdsetup commands to bring those up\n1976  * so we will later first create all objects,\n1977  * then attach all local disks,\n1978  * adjust various settings,\n1979  * and then configure the network part */\n1980 static int adm_up(const struct cfg_ctx *ctx)\n1981 {\n     .........\n2021     return 0;\n2022 }\n')),(0,a.kt)("p",null,"\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u9019\u96bb function \u8ca0\u8cac\u8d85\u591a\u4e8b\u60c5\uff0c\u57fa\u672c\u4e0a\u5c31\u662f\u5e6b\u4f60\u628a object/disk/network \u90fd\u8655\u7406\u5b8c\u7562\u3002\u9019\u908a\u6211\u5011\u5c08\u6ce8\u65bc Network \u76f8\u95dc\u7684\u8655\u7406\u3002\n\u9996\u5148\u5148\u547c\u53eb ",(0,a.kt)("inlineCode",{parentName:"p"},"set_peer_in_resource")," \u9032\u884c\u8655\u7406"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"1988     set_peer_in_resource(ctx->res, true);\n")),(0,a.kt)("h3",{id:"set_peer_in_resource"},"set_peer_in_resource"),(0,a.kt)("p",null,"\u9019\u908a\u6703\u5148\u6383\u904e\u6240\u6709\u7684 connection\uff0c\u7136\u5f8c\u5c0d\u65bc\u6bcf\u689dconnection\uff0c\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"set_peer_in_connection")," \u53bb\u8a2d\u5b9a\u6bcf\u689d connection \u7684 peer\uff0c\u540c\u6642\u4e5f\u8a2d\u5b9a connection \u5e95\u4e0b path \u7684 peer address\u3002"),(0,a.kt)("p",null,"\u4ee5\u672c\u6587\u7684\u7bc4\u4f8b\u4f86\u8aaa\uff0c\u8a72 resource ",(0,a.kt)("strong",{parentName:"p"},"r0")," \u88e1\u9762\u5305\u542b\u5169\u53f0 host\uff0c\u5206\u5225\u662f ",(0,a.kt)("strong",{parentName:"p"},"hw1")," \u4ee5\u53ca ",(0,a.kt)("strong",{parentName:"p"},"hw2"),"\u3002\n\u4e00\u958b\u59cb\u5169\u53f0 host \u90fd\u5fc5\u9808\u8981\u57f7\u884c ",(0,a.kt)("strong",{parentName:"p"},"drbdadm")," \u4f86\u521d\u59cb\u76f8\u95dc\u7684\u529f\u80fd\uff0c\u5047\u8a2d\u4eca\u5929\u662f ",(0,a.kt)("strong",{parentName:"p"},"hw1")," \u9019\u53f0\u5728\u57f7\u884c\u3002\u5247\u5c0d hw1 \u4f86\u8aaa\uff0c\u4ed6\u770b\u5230 connection \u7684 peer \u5c31\u8981\u6307\u5411 ",(0,a.kt)("strong",{parentName:"p"},"hw2"),"\uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c hw2 \u6240\u770b\u5230\u7684 connection->peer \u61c9\u8a72\u8981\u6307\u5411 ",(0,a.kt)("strong",{parentName:"p"},"h1")," \u624d\u5c0d\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0473 void set_peer_in_resource(struct d_resource* res, int peer_required)\n0474 {\n0475     struct connection *conn;\n0476     int peers_addrs_set = 1;\n0477\n0478     for_each_connection(conn, &res->connections) {\n0479         struct path *path;\n0480         set_peer_in_connection(res, conn, peer_required);\n0481\n0482         for_each_path(path, &conn->paths) {\n0483             if (!path->peer_address)\n0484                 peers_addrs_set = 0;\n0485         }\n0486         create_implicit_net_options(conn);\n0487     }\n0488     res->peers_addrs_set = peers_addrs_set;\n0489\n0490     if (!(peer_required & DRBDSETUP_SHOW))\n0491         add_no_bitmap_opt(res);\n0492 }\n")),(0,a.kt)("p",null,"\u5728\u8a2d\u5b9a\u5b8c\u7562 ",(0,a.kt)("strong",{parentName:"p"},"peer")," \u5f8c\uff0c\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"create_implicit_net_options")," \u53bb\u8a2d\u5b9a network options \u4e2d\u7684 ",(0,a.kt)("strong",{parentName:"p"},"_name")," \u9019\u500b\u6b04\u4f4d\u800c\u5df2\u3002\n\u6700\u5f8c\u7528\u4e00\u500b\u8b8a\u6578",(0,a.kt)("strong",{parentName:"p"},"peer_addr_set"),"\u4f86\u8a18\u4f4f\u7576\u524d resource \u662f\u5426\u5df2\u7d93\u6709\u8a2d\u5b9a\u904e peer \u7684 address\u4e86\uff0c\u56e0\u70ba\u6709\u4e9b command \u672c\u8eab\u4e0d\u9700\u8981 peer \u7684\u53c3\u8207\uff0c\u6240\u4ee5\u6703\u4f7f\u7528\u9019\u500b\u8b8a\u6578\u4f86\u4f5c\u70ba\u4e00\u4e9b\u908f\u8f2f\u7684\u5224\u65b7\u3002"),(0,a.kt)("p",null,"\u6700\u5f8c\u4f86\u5230\u4e86\u6574\u500b ",(0,a.kt)("inlineCode",{parentName:"p"},"adm_up")," \u51fd\u5f0f\u7684\u91cd\u982d\u6232, \u5728\u4e00\u5207\u8cc7\u8a0a\u90fd\u6e96\u5099\u5b8c\u7562\u5f8c\uff0c\u63a5\u4e0b\u4f86\u8981\u958b\u59cb\u5728\u5169\u7aef host ",(0,a.kt)("em",{parentName:"p"},"h1"),", ",(0,a.kt)("em",{parentName:"p"},"h2")," \u5efa\u7acb\u8d77\u9023\u7dda\uff0c\u9019\u908a\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"schedule_deferred_cmd")," \u7684\u65b9\u5f0f\u53bb\u57f7\u884c\u4e09\u500b\u6307\u4ee4\uff0c\u5206\u5225\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"new-peer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"new-path")," \u4ee5\u53ca ",(0,a.kt)("inlineCode",{parentName:"p"},"connect"),"\uff0c\u7a0d\u5f8c\u9019\u4e9b\u6307\u4ee4\u90fd\u6703\u900f\u904e netlink \u7684\u65b9\u5f0f\u9001\u5230 kernel space \u53bb\u9032\u884c\u771f\u6b63\u7684\u9023\u7dda\u64cd\u4f5c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"1989     for_each_connection(conn, &ctx->res->connections) {\n1990         struct peer_device *peer_device;\n1991\n1992         if (conn->ignore)\n1993             continue;\n1994\n1995         tmp_ctx.conn = conn;\n1996\n1997         schedule_deferred_cmd(&new_peer_cmd, &tmp_ctx, CFG_NET_PREP_UP);\n1998         schedule_deferred_cmd(&new_path_cmd, &tmp_ctx, CFG_NET_PATH);\n1999         schedule_deferred_cmd(&connect_cmd, &tmp_ctx, CFG_NET_CONNECT);\n2000\n2001         STAILQ_FOREACH(peer_device, &conn->peer_devices, connection_link) {\n2002             struct cfg_ctx tmp2_ctx;\n2003\n2004             if (STAILQ_EMPTY(&peer_device->pd_options))\n2005                 continue;\n2006\n2007             tmp2_ctx = tmp_ctx;\n2008             tmp2_ctx.vol = peer_device->volume;\n2009             schedule_deferred_cmd(&peer_device_options_cmd, &tmp2_ctx, CFG_PEER_DEVICE);\n2010         }\n2011     }\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u4f86\u770b\u770b ",(0,a.kt)("inlineCode",{parentName:"p"},"new-peer"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"new-path")," \u4ee5\u53ca ",(0,a.kt)("inlineCode",{parentName:"p"},"connection")," \u5be6\u969b\u4e0a\u53c8\u505a\u4e86\u4e9b\u4ec0\u9ebc\u4e8b\u60c5\u3002\n\u5728\u5be6\u969b\u770b\u9019\u4e9b\u6307\u4ee4\u505a\u7684\u4e8b\u60c5\u4ee5\u524d\uff0c\u5148\u4f86\u770b\u770b ",(0,a.kt)("inlineCode",{parentName:"p"},"schedule_deferred_cmd")," \u600e\u9ebc\u8655\u7406\u9019\u4e9b\u6307\u4ee4\u7684\u3002"),(0,a.kt)("h3",{id:"schedule_deferred_cmd"},"schedule_deferred_cmd"),(0,a.kt)("p",null,"\u6b64 function \u4e3b\u8981\u662f\u5c07\u76f8\u95dc\u7684\u53c3\u6578\u90fd\u6536\u96c6\u8d77\u4f86\u653e\u5230 ",(0,a.kt)("strong",{parentName:"p"},"struct cfg_ctx")," \u88e1\u9762\uff0c\u7136\u5f8c\u5c07\u9019\u500b\u8981\u57f7\u884c\u7684\u6307\u4ee4\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"STAILQ_INSERT_TAIL")," \u90fd\u65b9\u5f0f\u653e\u5230\u4e00\u500b\u5168\u57df\u7684 Queue ",(0,a.kt)("strong",{parentName:"p"},"deferred_cmds")," \u5167\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0547 void schedule_deferred_cmd(struct adm_cmd *cmd,\n0548                const struct cfg_ctx *ctx,\n0549                enum drbd_cfg_stage stage)\n0550 {\n0551     struct deferred_cmd *d;\n0552\n0553     if (stage & SCHEDULE_ONCE) {\n0554         stage &= ~SCHEDULE_ONCE;\n0555\n0556         STAILQ_FOREACH(d, &deferred_cmds[stage], link) {\n0557             if (d->ctx.cmd == cmd &&\n0558                 d->ctx.res == ctx->res &&\n0559                 d->ctx.conn == ctx->conn &&\n0560                 d->ctx.vol == ctx->vol)\n0561                 return;\n0562         }\n0563     }\n0564\n0565     d = calloc(1, sizeof(struct deferred_cmd));\n0566     if (d == NULL) {\n0567         perror("calloc");\n0568         exit(E_EXEC_ERROR);\n0569     }\n0570\n0571     d->ctx = *ctx;\n0572     d->ctx.cmd = cmd;\n0573\n0574     STAILQ_INSERT_TAIL(&deferred_cmds[stage], d, link);\n0575 }\n')),(0,a.kt)("p",null,"\u6574\u500b\u7a0b\u5f0f\u7684\u6700\u5f8c\u9762\u5247\u662f\u6703\u4f9d\u8cf4 ",(0,a.kt)("inlineCode",{parentName:"p"},"_run_deferred_cmds")," \u5c07 queue \u5167\u7684\u6307\u4ee4\u4e00\u500b\u4e00\u500b\u53d6\u51fa\uff0c\u7136\u5f8c\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"__call_cmd_fn")," \u958b\u59cb\u57f7\u884c"),(0,a.kt)("h3",{id:"_run_deferred_cmds"},"_run_deferred_cmds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0698 int _run_deferred_cmds(enum drbd_cfg_stage stage)\n0699 {\n0700     struct d_resource *last_res = NULL;\n0701     struct deferred_cmd *d = STAILQ_FIRST(&deferred_cmds[stage]);\n0702     struct deferred_cmd *t;\n0703     int r;\n0704     int rv = 0;\n0705\n0706     if (d && adjust_with_progress) {\n0707         printf("\\n%15s:", drbd_cfg_stage_string[stage]);\n0708         fflush(stdout);\n0709     }\n0710\n0711     while (d) {\n0712         if (d->ctx.res->skip_further_deferred_command) {\n0713             if (adjust_with_progress) {\n0714                 if (d->ctx.res != last_res)\n0715                     printf(" [skipped:%s]", d->ctx.res->name);\n0716             } else\n0717                 err("%s: %s %s: skipped due to earlier error\\n",\n0718                     progname, d->ctx.cmd->name, d->ctx.res->name);\n0719             r = 0;\n0720         } else {\n0721             if (adjust_with_progress) {\n0722                 if (d->ctx.res != last_res)\n0723                     printf(" %s", d->ctx.res->name);\n0724             }\n0725             r = __call_cmd_fn(&d->ctx, KEEP_RUNNING);\n0726             if (r) {\n...\n')),(0,a.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u6ce8\u610f\u7684\u662f ",(0,a.kt)("strong",{parentName:"p"},"iterate_path")," \u9019\u500b\u8b8a\u6578\uff0c\u5982\u679c\u9019\u500b\u8b8a\u6578\u70ba\u771f\u7684\u5247\uff0c\u5247\u8a72\u6307\u4ee4\u6703\u91dd\u5c0d connection\u5167\u6240\u6709\u7684 paths \u90fd\u9032\u884c\u4e00\u6b21\uff0c connection \u5247\u662f\u5728\u7576\u521d\u5728 ",(0,a.kt)("strong",{parentName:"p"},"adm_up")," \u6642\u5c31\u6703\u5148\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"tmp_ctx.conn = conn")," \u653e\u9032\u53bb\u3002\u4e0d\u904e\u7531\u65bc\u672c\u6587\u7684\u8a2d\u5b9a\u6a94\u53ea\u6709\u4e00\u689d connection\uff0c\u4e14\u8a72 connection \u4e0a\u53ea\u6709\u4e00\u500b path\uff0c\u6240\u4ee5\u9019\u908a\u5be6\u969b\u4e0a\u4e5f\u53ea\u6703\u547c\u53eb\u4e00\u6b21\u3002"),(0,a.kt)("h3",{id:"__call_cmd_fn"},"__call_cmd_fn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0578 static int __call_cmd_fn(const struct cfg_ctx *ctx, enum on_error on_error)\n0579 {\n0580     struct d_volume *vol = ctx->vol;\n0581     bool iterate_paths;\n0582     int rv = 0;\n0583\n0584     iterate_paths = ctx->path ? 0 : ctx->cmd->iterate_paths;\n0585\n0586     if (ctx->cmd->disk_required &&\n0587         (!vol->disk || !vol->meta_disk || !vol->meta_index)) {\n0588         rv = 10;\n0589         err("The %s command requires a local disk, but the configuration gives none.\\n",\n0590             ctx->cmd->name);\n0591         if (on_error == EXIT_ON_FAIL)\n0592             exit(rv);\n0593         return rv;\n0594     }\n0595\n0596     if (iterate_paths) {\n0597         struct cfg_ctx tmp_ctx = *ctx;\n0598         struct path *path;\n0599\n0600         for_each_path(path, &tmp_ctx.conn->paths) {\n0601             tmp_ctx.path = path;\n0602             rv = tmp_ctx.cmd->function(&tmp_ctx);\n0603             if (rv >= 20) {\n0604                 if (on_error == EXIT_ON_FAIL)\n0605                     exit(rv);\n0606             }\n0607\n0608         }\n0609     } else {\n0610         rv = ctx->cmd->function(ctx);\n0611         if (rv >= 20) {\n0612             if (on_error == EXIT_ON_FAIL)\n0613                 exit(rv);\n0614         }\n0615     }\n0616     return rv;\n0617 }\n')),(0,a.kt)("p",null,"\u6700\u5f8c\u8981\u4f86\u770b\u9019\u4e9b\u6307\u4ee4\u600e\u9ebc\u5f80\u4e0b\u904b\u884c\u7684\uff0c\u4e0d\u8ad6\u662f ",(0,a.kt)("strong",{parentName:"p"},"new-peer"),", ",(0,a.kt)("strong",{parentName:"p"},"new-path")," \u6216\u662f ",(0,a.kt)("strong",{parentName:"p"},"connect"),"\uff0c\u5176\u5be6\u6700\u5f8c\u90fd\u662f\u4f9d\u9760 ",(0,a.kt)("inlineCode",{parentName:"p"},"drbdsetup")," \u9019\u96bb\u7a0b\u5f0f\u5728\u4f86\u904b\u884c\uff0c\u6240\u4ee5\u9019\u908a\u57fa\u672c\u4e0a\u90fd\u662f\u6536\u96c6\u597d\u53c3\u6578\u5f8c\u900f\u904e ",(0,a.kt)("inlineCode",{parentName:"p"},"system")," \u7684\u65b9\u5f0f\u5c07\u8a72\u6307\u4ee4\u53eb\u8d77\u4f86\u53bb\u57f7\u884c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'1705 static int adm_connect(const struct cfg_ctx *ctx)\n1706 {\n1707     struct d_resource *res = ctx->res;\n1708     struct connection *conn = ctx->conn;\n1709     char *argv[MAX_ARGS];\n1710     int argc = 0;\n1711\n1712     argv[NA(argc)] = drbdsetup;\n1713     argv[NA(argc)] = (char *)ctx->cmd->name; /* "connect" */\n1714     argv[NA(argc)] = ssprintf("%s", res->name);\n1715     argv[NA(argc)] = ssprintf("%s", conn->peer->node_id);\n1716\n1717     add_setup_options(argv, &argc, ctx->cmd->drbdsetup_ctx);\n1718     argv[NA(argc)] = 0;\n1719\n1720     return m_system_ex(argv, SLEEPS_SHORT, res->name);\n1721 }\n1722\n1723 static int adm_new_peer(const struct cfg_ctx *ctx)\n1724 {\n1725     struct d_resource *res = ctx->res;\n1726     struct connection *conn = ctx->conn;\n1727\n1728     char *argv[MAX_ARGS];\n1729     int argc = 0;\n1730\n1731     bool reset = (ctx->cmd == &net_options_defaults_cmd);\n1732\n1733     argv[NA(argc)] = drbdsetup;\n1734     argv[NA(argc)] = (char *)ctx->cmd->name; /* "new-peer", "net-options" */\n1735     argv[NA(argc)] = ssprintf("%s", res->name);\n1736     argv[NA(argc)] = ssprintf("%s", conn->peer->node_id);\n1737\n1738     if (reset)\n1739         argv[NA(argc)] = "--set-defaults";\n1740\n1741     if (!strncmp(ctx->cmd->name, "net-options", 11))\n1742         del_opt(&conn->net_options, "transport");\n1743\n1744     make_options(argv[NA(argc)], &conn->net_options);\n1745\n1746     add_setup_options(argv, &argc, ctx->cmd->drbdsetup_ctx);\n1747     argv[NA(argc)] = 0;\n1748\n1749     return m_system_ex(argv, SLEEPS_SHORT, res->name);\n1750 }\n1751\n1752 static int adm_path(const struct cfg_ctx *ctx)\n1753 {\n1754     struct d_resource *res = ctx->res;\n1755     struct connection *conn = ctx->conn;\n1756     struct path *path = ctx->path;\n1757\n1758     char *argv[MAX_ARGS];\n1759     int argc = 0;\n1760\n1761     argv[NA(argc)] = drbdsetup;\n1762     argv[NA(argc)] = (char *)ctx->cmd->name; /* add-path, del-path */\n1763     argv[NA(argc)] = ssprintf("%s", res->name);\n1764     argv[NA(argc)] = ssprintf("%s", conn->peer->node_id);\n1765\n1766     argv[NA(argc)] = ssprintf_addr(path->my_address);\n1767     argv[NA(argc)] = ssprintf_addr(path->connect_to);\n1768\n1769     add_setup_options(argv, &argc, ctx->cmd->drbdsetup_ctx);\n1770     argv[NA(argc)] = 0;\n1771\n1772     return m_system_ex(argv, SLEEPS_SHORT, res->name);\n1773 }\n')),(0,a.kt)("p",null,"\u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"drbdsetup")," \u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u95dc\u65bc\u9019\u4e09\u500b\u6307\u4ee4\u5c0d\u61c9\u7684\u8cc7\u8a0a\uff0c\u9019\u4e9b\u6307\u4ee4\u7684\u539f\u578b\u662f ",(0,a.kt)("strong",{parentName:"p"},"struct drbd_cmd"),"\uff0c\u7576 ",(0,a.kt)("strong",{parentName:"p"},"drbdsetup")," \u88ab\u547c\u53eb\u5f8c\uff0c\u5c0d\u61c9\u7684\u6307\u4ee4\u5c31\u6703\u8dd1\u5230\u5c0d\u61c9\u7684 ",(0,a.kt)("strong",{parentName:"p"},"drbd_cmd"),"\u4e2d\u53bb\u57f7\u884c\uff0c\u6700\u5f8c\u90fd\u6703\u57f7\u884c\u5230 ",(0,a.kt)("strong",{parentName:"p"},"drbd_cmd")," \u88e1\u9762\u7684 ",(0,a.kt)("strong",{parentName:"p"},"function (fptr)"),"\u4f86\u8655\u7406\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"0229 struct drbd_cmd {\n0230     const char* cmd;\n0231     enum cfg_ctx_key ctx_key;\n0232     int cmd_id;\n0233     int tla_id; /* top level attribute id */\n0234     int (*function)(struct drbd_cmd *, int, char **);\n0235     struct drbd_argument *drbd_args;\n0236     int (*show_function)(struct drbd_cmd*, struct genl_info *, void *u_ptr);\n0237     struct option *options;\n0238     bool missing_ok;\n0239     bool warn_on_missing;\n0240     bool continuous_poll;\n0241     bool set_defaults;\n0242     bool lockless;\n0243     struct context_def *ctx;\n0244     const char *summary;\n0245 };\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0397     {"connect", CTX_PEER_NODE,\n0398         DRBD_ADM_CONNECT, DRBD_NLA_CONNECT_PARMS,\n0399         F_CONFIG_CMD,\n0400      .ctx = &connect_cmd_ctx,\n0401      .summary = "Attempt to (re)establish a replication link to a peer host." },\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0403     {"new-peer", CTX_PEER_NODE,\n0404         DRBD_ADM_NEW_PEER, DRBD_NLA_NET_CONF,\n0405         F_CONFIG_CMD,\n0406      .ctx = &new_peer_cmd_ctx,\n0407      .summary = "Make a peer host known to a resource." },\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'0415     {"new-path", CTX_PEER_NODE,\n0416         DRBD_ADM_NEW_PATH, DRBD_NLA_PATH_PARMS,\n0417         F_CONFIG_CMD,\n0418      .drbd_args = (struct drbd_argument[]) {\n0419         { "local-addr", T_my_addr, conv_addr },\n0420         { "remote-addr", T_peer_addr, conv_addr },\n0421         { } },\n0422      .ctx = &path_cmd_ctx,\n0423      .summary = "Add a path (endpoint address pair) where a peer host should be reachable." },\n')),(0,a.kt)("p",null,"\u5728\u4e09\u500b case \u4e2d\uff0c\u4e09\u500b\u6307\u4ee4\u5c0d\u61c9\u7684 function \u5176\u5be6\u90fd\u6307\u5411\u4e86 ",(0,a.kt)("strong",{parentName:"p"},"generic_config_cmd")," \u9019 function\uff0c\u800c ",(0,a.kt)("strong",{parentName:"p"},"generic_config_cmd")," \u5247\u518d\u7e7c\u7e8c\u547c\u53eb ",(0,a.kt)("strong",{parentName:"p"},"_generic_config_cmd")," \u7e7c\u7e8c\u5f80\u4e0b\u8655\u7406"),(0,a.kt)("h3",{id:"_generic_config_cmd"},"_generic_config_cmd"),(0,a.kt)("p",null,"\u5230\u9019\u4e00\u6b65\u5f8c\uff0c\u5c31\u662f\u6839\u64da\u5148\u524d\u6307\u4ee4\u4e2d\u7684\u4e00\u4e9b\u8cc7\u8a0a\uff0c\u7d44\u51fa\u5c0d\u61c9\u7684 ",(0,a.kt)("strong",{parentName:"p"},"netlink header"),"\uff0c\u6700\u5f8c\u900f\u904e\n",(0,a.kt)("inlineCode",{parentName:"p"},"genl_send")," \u5c07\u8a72\u547d\u4ee4\u900f\u904e ",(0,a.kt)("strong",{parentName:"p"},"netlink")," \u9001\u5230 kernel \u53bb\uff0c\u7136\u5f8c\u518d\u4f7f\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"genl_recv_msgs")," \u7684\u65b9\u5f0f\u63a5\u6536\u56de\u4f86\u7684\u8a0a\u606f\uff0c\u78ba\u8a8d\u4e8b\u60c5\u5b8c\u6210\u5f8c\u5c31\u7d50\u675f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"1136 static int _generic_config_cmd(struct drbd_cmd *cm, int argc, char **argv)\n1137 {\n1138     struct drbd_argument *ad;\n1139     struct nlattr *nla;\n1140     struct option *options;\n1141     int c, i;\n1142     int rv;\n1143     char *desc = NULL; /* error description from kernel reply message */\n1144\n1145     struct drbd_genlmsghdr *dhdr;\n1146     struct msg_buff *smsg;\n1147     struct iovec iov;\n1148     struct nlmsghdr *nlh;\n1149     struct drbd_genlmsghdr *dh;\n1150     struct timespec retry_timeout = {\n1151         .tv_nsec = 62500000L,  /* 1/16 second */\n1152     };\n...\n")),(0,a.kt)("h1",{id:"summary"},"Summary"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u672c\u6587\u5230\u9019\u908a\u76ee\u524d\u5df2\u7d93\u5927\u81f4\u77ad\u89e3 user space \u7684\u6d41\u7a0b\uff0c\u63a5\u4e0b\u4f86\u8981\u63a2\u8a0e ",(0,a.kt)("strong",{parentName:"li"},"new-peer"),", ",(0,a.kt)("strong",{parentName:"li"},"new-path")," \u4ee5\u53ca ",(0,a.kt)("strong",{parentName:"li"},"connect")," \u9019\u4e09\u500b\u6307\u4ee4\u5728 kernel \u4e2d\u7684\u6d41\u7a0b\u3002")))}l.isMDXComponent=!0}}]);
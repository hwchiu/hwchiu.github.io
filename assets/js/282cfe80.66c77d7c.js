"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[9621],{3905:(e,n,t)=>{t.d(n,{Zo:()=>_,kt:()=>u});var r=t(67294);function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,p=function(e,n){if(null==e)return{};var t,r,p={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(p[t]=e[t]);return p}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},_=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,p=e.mdxType,i=e.originalType,o=e.parentName,_=a(e,["components","mdxType","originalType","parentName"]),c=l(t),k=p,u=c["".concat(o,".").concat(k)]||c[k]||m[k]||i;return t?r.createElement(u,s(s({ref:n},_),{},{components:t})):r.createElement(u,s({ref:n},_))}));function u(e,n){var t=arguments,p=n&&n.mdxType;if("string"==typeof e||p){var i=t.length,s=new Array(i);s[0]=k;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a[c]="string"==typeof e?e:p,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},74430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(87462),p=(t(67294),t(3905));const i={title:"IPvS \u5b78\u7fd2\u624b\u518a(\u4e09)",keywords:["linux","ipvs"],tags:["IPVS","Network","Linux","Kernel"],description:"\u672c\u6587\u4f5c\u70ba IPVS \u7cfb\u5217\u6587\u7b2c\u4e09\u7bc7\uff0c \u6703\u5f9e Kernel \u4f5c\u70ba\u51fa\u767c\u9ede\uff0c\u63a2\u8a0e\u4e00\u4e0b IPVS \u672c\u8eab\u7684\u6a21\u7d44\u6982\u5ff5\uff0c\u5206\u4eab\u5169\u7a2e\u4e0d\u540c\u7684\u5167\u5efa\u9664\u932f\u65b9\u5f0f\uff0c\u6b64\u5916\u4e5f\u6703\u5f9e\u539f\u59cb\u78bc\u7684\u90e8\u5206\u770b\u4e00\u4e0b IPVS \u521d\u59cb\u5316\u7684\u904e\u7a0b\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5",date:new Date("2020-04-06T00:03:29.000Z")},s="Preface",a={unversionedId:"techPost/2020/ipvs-3",id:"techPost/2020/ipvs-3",title:"IPvS \u5b78\u7fd2\u624b\u518a(\u4e09)",description:"\u672c\u6587\u4f5c\u70ba IPVS \u7cfb\u5217\u6587\u7b2c\u4e09\u7bc7\uff0c \u6703\u5f9e Kernel \u4f5c\u70ba\u51fa\u767c\u9ede\uff0c\u63a2\u8a0e\u4e00\u4e0b IPVS \u672c\u8eab\u7684\u6a21\u7d44\u6982\u5ff5\uff0c\u5206\u4eab\u5169\u7a2e\u4e0d\u540c\u7684\u5167\u5efa\u9664\u932f\u65b9\u5f0f\uff0c\u6b64\u5916\u4e5f\u6703\u5f9e\u539f\u59cb\u78bc\u7684\u90e8\u5206\u770b\u4e00\u4e0b IPVS \u521d\u59cb\u5316\u7684\u904e\u7a0b\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5",source:"@site/docs/techPost/2020/ipvs-3.md",sourceDirName:"techPost/2020",slug:"/techPost/2020/ipvs-3",permalink:"/docs/techPost/2020/ipvs-3",draft:!1,tags:[{label:"IPVS",permalink:"/docs/tags/ipvs"},{label:"Network",permalink:"/docs/tags/network"},{label:"Linux",permalink:"/docs/tags/linux"},{label:"Kernel",permalink:"/docs/tags/kernel"}],version:"current",frontMatter:{title:"IPvS \u5b78\u7fd2\u624b\u518a(\u4e09)",keywords:["linux","ipvs"],tags:["IPVS","Network","Linux","Kernel"],description:"\u672c\u6587\u4f5c\u70ba IPVS \u7cfb\u5217\u6587\u7b2c\u4e09\u7bc7\uff0c \u6703\u5f9e Kernel \u4f5c\u70ba\u51fa\u767c\u9ede\uff0c\u63a2\u8a0e\u4e00\u4e0b IPVS \u672c\u8eab\u7684\u6a21\u7d44\u6982\u5ff5\uff0c\u5206\u4eab\u5169\u7a2e\u4e0d\u540c\u7684\u5167\u5efa\u9664\u932f\u65b9\u5f0f\uff0c\u6b64\u5916\u4e5f\u6703\u5f9e\u539f\u59cb\u78bc\u7684\u90e8\u5206\u770b\u4e00\u4e0b IPVS \u521d\u59cb\u5316\u7684\u904e\u7a0b\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5",date:"2020-04-06T00:03:29.000Z"},sidebar:"techPost",previous:{title:"IPvS \u5b78\u7fd2\u624b\u518a(\u4e8c)",permalink:"/docs/techPost/2020/ipvs-2"},next:{title:"IPvS \u5b78\u7fd2\u624b\u518a(\u56db)",permalink:"/docs/techPost/2020/ipvs-4"}},o={},l=[{value:"Dynamic Option",id:"dynamic-option",level:2},{value:"IP_VS_DEBUG",id:"ip_vs_debug",level:2},{value:"register_pernet_subsys/device",id:"register_pernet_subsysdevice",level:2},{value:"ip_vs_control_net_init",id:"ip_vs_control_net_init",level:2}],_={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,p.kt)(c,(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"preface"},"Preface"),(0,p.kt)("p",null,"\u672c\u7bc7\u6587\u7ae0\u4f5c\u70ba\u7cfb\u5217\u6587\u7ae0\u7684\u7b2c\u4e09\u7bc7\uff0c\u8a72\u7cfb\u5217\u6587\u5e0c\u671b\u80fd\u5920\u5f9e\u6982\u5ff5\u5230\u5be6\u4f5c\uff0c\u5f9e\u7c21\u55ae\u5230\u8907\u96dc\u4f86\u63a2\u8a0e IPVS (IP Virtual Server) \u7684\u6982\u5ff5\uff0c\u76ee\u524d\u898f\u5283\u7684\u4e3b\u984c\u5305\u542b\uff1a"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/ipvs-1.html"},"IPVS \u7684\u57fa\u672c\u4f7f\u7528\u8207\u6982\u5ff5")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/ipvs-2.html"},"IPVS \u8207 Kubernetes \u7684\u6574\u5408")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/ipvs-3.html"},"IPVS \u9664\u932f\u65b9\u5f0f\u8207\u57fa\u672c Kernel Module \u6982\u5ff5")),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/ipvs-4.html"},"IPVS Kernel \u67b6\u69cb\u5be6\u73fe"))),(0,p.kt)("p",null,"\u672c\u6587\u4e3b\u8981\u662f\u5f9e Linux Kernel \u51fa\u767c\uff0c\u4ecb\u7d39\u4e00\u4e0b\u5c0d\u65bc ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u9019\u500b\u6a21\u7d44\u7684\u6982\u5ff5\uff0c\u540c\u6642\u4e5f\u4ecb\u7d39\u4e86\u9810\u8a2d\u7684\u5169\u7a2e\u9664\u932f\u65b9\u5f0f\u3002"),(0,p.kt)("h1",{id:"\u74b0\u5883"},"\u74b0\u5883"),(0,p.kt)("p",null,"\u6574\u7bc7\u6587\u7ae0\u90fd\u662f\u57fa\u65bc Linux Kernel 4.15 \u70ba\u57fa\u6e96\u53bb\u95b1\u8b80, \u53ef\u4ee5\u5f9e ",(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("a",{parentName:"strong",href:"https://github.com/torvalds/linux/tree/v4.15/net/netfilter/ipvs"},"Github"))," \u6216\u662f ",(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("a",{parentName:"strong",href:"https://elixir.bootlin.com/linux/v4.15/source"},"LXR"))," \u4f86\u9032\u884c\u7dda\u4e0a\u95b1\u8b80"),(0,p.kt)("p",null,"\u672c\u7bc7\u6c92\u6709\u74b0\u5883\u5efa\u7f6e\uff0c\u56e0\u70ba\u61f6\u5f97\u6253\u5305\u6574\u500b ",(0,p.kt)("strong",{parentName:"p"},"\u5efa\u7f6e Linux Kernel")," \u7684\u74b0\u5883\u5230 ",(0,p.kt)("strong",{parentName:"p"},"Vagrant")," \u88e1\u9762\u3002\u53ef\u80fd\u8981\u7b49\u5168\u90e8\u6587\u7ae0\u90fd\u5beb\u5b8c\u518d\u88dc\u9f4a"),(0,p.kt)("h1",{id:"\u6b63\u984c"},"\u6b63\u984c"),(0,p.kt)("p",null,"\u7814\u7a76\u90fd\u8981\u6709\u500b\u8d77\u9ede\uff0c\u6574\u500b Linux Kernel \u904e\u65bc\u9f90\u5927\uff0c\u5be6\u5728\u662f\u4e0d\u53ef\u80fd\u5168\u90e8\u95b1\u8b80\u3002\n\u4eca\u5929\u8981\u7814\u7a76\u7684\u662f ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u76f8\u95dc\u7684\u529f\u80fd\uff0c\u6211\u5011\u5c31\u5f9e\u5176",(0,p.kt)("a",{parentName:"p",href:"https://github.com/torvalds/linux/tree/v4.15/net/netfilter/ipvs"},"\u8cc7\u6599\u593e"),"\u5167\u958b\u59cb\u770b\u8d77\u3002"),(0,p.kt)("p",null,"\u6839\u64da\u5148\u524d\u7684\u5be6\u9a57\uff0c\u6211\u5011\u4f7f\u7528 ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u4e4b\u524d\u5fc5\u9808\u8981\u5148\u5b89\u88dd\u5c0d\u61c9\u7684 ",(0,p.kt)("strong",{parentName:"p"},"kernel module"),"\uff0c\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"kernel module")," \u90fd\u6703\u6709\u76f8\u95dc\u7684\u521d\u59cb\u5316\u51fd\u5f0f\u53ef\u4ee5\u4f7f\u7528\u3002\n\u6240\u4ee5\u6211\u5011\u5c31\u5148\u5f9e ",(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("a",{parentName:"strong",href:"https://github.com/torvalds/linux/blob/v4.15/net/netfilter/ipvs/Makefile"},"Makefile"))," \u770b\u8d77\u4f86\uff0c\u770b\u4e00\u4e0b\u5230\u5e95\u9019\u4e9b ",(0,p.kt)("strong",{parentName:"p"},"kernel module")," \u5be6\u969b\u4e0a\u5305\u542b\u4e86\u54ea\u4e9b\u6a94\u6848"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-makefile"},"# SPDX-License-Identifier: GPL-2.0\n#\n# Makefile for the IPVS modules on top of IPv4.\n#\n\n# IPVS transport protocol load balancing support\nip_vs_proto-objs-y :=\nip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_TCP) += ip_vs_proto_tcp.o\nip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_UDP) += ip_vs_proto_udp.o\nip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_AH_ESP) += ip_vs_proto_ah_esp.o\nip_vs_proto-objs-$(CONFIG_IP_VS_PROTO_SCTP) += ip_vs_proto_sctp.o\n\nip_vs-extra_objs-y :=\nip_vs-extra_objs-$(CONFIG_IP_VS_NFCT) += ip_vs_nfct.o\n\nip_vs-objs :=   ip_vs_conn.o ip_vs_core.o ip_vs_ctl.o ip_vs_sched.o    \\\n        ip_vs_xmit.o ip_vs_app.o ip_vs_sync.o              \\\n        ip_vs_est.o ip_vs_proto.o ip_vs_pe.o               \\\n        $(ip_vs_proto-objs-y) $(ip_vs-extra_objs-y)\n\n\n# IPVS core\nobj-$(CONFIG_IP_VS) += ip_vs.o\n\n# IPVS schedulers\nobj-$(CONFIG_IP_VS_RR) += ip_vs_rr.o\nobj-$(CONFIG_IP_VS_WRR) += ip_vs_wrr.o\nobj-$(CONFIG_IP_VS_LC) += ip_vs_lc.o\nobj-$(CONFIG_IP_VS_WLC) += ip_vs_wlc.o\nobj-$(CONFIG_IP_VS_FO) += ip_vs_fo.o\nobj-$(CONFIG_IP_VS_OVF) += ip_vs_ovf.o\nobj-$(CONFIG_IP_VS_LBLC) += ip_vs_lblc.o\nobj-$(CONFIG_IP_VS_LBLCR) += ip_vs_lblcr.o\nobj-$(CONFIG_IP_VS_DH) += ip_vs_dh.o\nobj-$(CONFIG_IP_VS_SH) += ip_vs_sh.o\nobj-$(CONFIG_IP_VS_SED) += ip_vs_sed.o\nobj-$(CONFIG_IP_VS_NQ) += ip_vs_nq.o\n\n# IPVS application helpers\nobj-$(CONFIG_IP_VS_FTP) += ip_vs_ftp.o\n\n# IPVS connection template retrievers\nobj-$(CONFIG_IP_VS_PE_SIP) += ip_vs_pe_sip.o\n")),(0,p.kt)("p",null,"\u9019\u500b Makefile \u770b\u8d77\u4f86\u6703\u89ba\u5f97\u597d\u50cf\u4ec0\u9ebc\u90fd\u6c92\u6709\uff0c\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f\u6574\u9ad4\u7684\u904b\u4f5c\u908f\u8f2f\u90fd\u5728 Kernel \u5176\u4ed6\u6a94\u6848\u88e1\u9762\uff0c\u7279\u5225\u662f ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/torvalds/linux/blob/v4.15/scripts/Makefile.build"},"Makefile.build")," \uff0c\u9019\u908a\u53ea\u662f\u55ae\u7d14\u5b9a\u7fa9\u4e86\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"Obj")," \u7684\u72c0\u6cc1\uff0c\u770b\u662f\u8981\u63a1\u53d6 ",(0,p.kt)("strong",{parentName:"p"},"Build-in")," \u6a21\u5f0f\u6216\u662f ",(0,p.kt)("strong",{parentName:"p"},"kernel module")," \u6a21\u5f0f\u3002"),(0,p.kt)("p",null,"\u5148\u8907\u7fd2\u4e00\u4e0b\u4e4b\u524d\u5b89\u88dd\u904e\u7a0b\u4e2d\u6240\u8f09\u5165\u7684 kernel module"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"sudo modprobe -- ip_vs\nsudo modprobe -- ip_vs_rr\nsudo modprobe -- ip_vs_wrr\nsudo modprobe -- ip_vs_sh\n")),(0,p.kt)("p",null,"\u9019\u908a\u5e7e\u500b\u53ef\u4ee5\u6ce8\u610f\u5230\u7684\u662f"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"ipvs.ko \u662f\u7531 ip_vs-objs \u9019\u4e00\u5806 objs \u5168\u90e8\u7d44\u5408\u800c\u6210\u7684\u3002"),(0,p.kt)("li",{parentName:"ol"},"\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"li"},"load balancing(scheduler)")," \u90fd\u662f\u4e00\u500b\u7368\u7acb\u7684 kernel module\uff0c\u525b\u597d\u5c0d\u61c9\u5230 ",(0,p.kt)("strong",{parentName:"li"},"ip_vs_rr"),", ",(0,p.kt)("strong",{parentName:"li"},"ip_vs_wrr"),"...\u7b49\uff0c\u5982\u679c\u4f60\u8981\u7528\u4e0d\u540c\u7684\u7b97\u6cd5\uff0c\u90a3\u8981\u78ba\u8a8d\u5c0d\u61c9\u7684 module \u90fd\u6709\u88ab\u8f09\u5165")),(0,p.kt)("p",null,"\u6709\u4e86\u9019\u500b\u65b9\u5411\uff0c\u6211\u5011\u5c31\u5f9e ",(0,p.kt)("strong",{parentName:"p"},"ip_cs-objs")," \u88e1\u9762\u7684\u958b\u59cb\u770b\u8d77\u4f86\uff0c\u5176\u4e2d ",(0,p.kt)("strong",{parentName:"p"},"ip_vs_core")," \u9019\u500b\u540d\u7a31\u975e\u5e38\u986f\u773c\uff0c\u770b\u8d77\u4f86\u5c31\u662f\u6838\u5fc3\u529f\u80fd\uff0c\u56e0\u6b64\u6c7a\u5b9a\u4e4b\u5f8c\u5f9e\u8a72\u6a94\u6848\u958b\u59cb\u770b\u8d77\u3002"),(0,p.kt)("h1",{id:"debug-ipvs"},"Debug IPVS"),(0,p.kt)("p",null,"\u958b\u59cb\u5f80\u4e0b\u95b1\u8b80 ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u539f\u59cb\u78bc\u4e4b\u524d\uff0c\u6211\u5011\u5148\u4f86\u63a2\u8a0e\u4e00\u4e0b\u5982\u4f55\u9664\u932f\u4ee5\u53ca\u5982\u4f55\u5b78\u7fd2\u76f8\u95dc\u7684\u51fd\u5f0f\u547c\u53eb\u9806\u5e8f"),(0,p.kt)("p",null,"\u4e0d\u4fee\u6539\u4efb\u4f55\u539f\u59cb\u78bc\u7684\u60c5\u6cc1\u4e0b\uff0c ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u63d0\u4f9b\u4e86\u5169\u7a2e ",(0,p.kt)("strong",{parentName:"p"},"Debug")," \u7684\u65b9\u5f0f\u8b93\u7ba1\u7406\u54e1\u53bb\u6aa2\u8996\u76f8\u95dc\u7684\u51fd\u5f0f\u547c\u53eb\u60c5\u6cc1\uff0c\u9019\u908a\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5176\u63d0\u4f9b\u7684\u662f ",(0,p.kt)("strong",{parentName:"p"},"\u51fd\u5f0f\u547c\u53eb\u60c5\u6cc1"),", \u800c\u4e0d\u662f\u4e00\u500b\u80fd\u5920\u4e00\u4e00\u6aa2\u8996\u5c01\u5305\u7684\u65b9\u5f0f\u3002\u5c31\u6211\u500b\u4eba\u7684\u4f7f\u7528\u60c5\u6cc1\u4f86\u8aaa\uff0c\u5982\u679c\u672c\u8eab\u5c0d\u65bc ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u7684\u5be6\u4f5c\u8207 ",(0,p.kt)("strong",{parentName:"p"},"Kernel")," \u4e0d\u719f\u6089\u7684\u4eba\uff0c\u5c31\u6c92\u6709\u8fa6\u6cd5 100% \u7684\u5229\u7528\u9019\u4e9b\u9664\u932f\u8a0a\u606f\u3002\n\u9019\u908a\u8ddf\u5927\u5bb6\u4ecb\u7d39\u9019\u5169\u7a2e\u9664\u932f\u65b9\u5f0f\u8a72\u5982\u4f55\u958b\u555f"),(0,p.kt)("h2",{id:"dynamic-option"},"Dynamic Option"),(0,p.kt)("p",null,"\u7b2c\u4e00\u7a2e\u65b9\u5f0f\u662f\u6574\u500b ",(0,p.kt)("strong",{parentName:"p"},"Kernel")," \u6240\u63d0\u4f9b\u7684\u9664\u932f\u65b9\u5f0f, \u7a31\u4e4b\u70ba ",(0,p.kt)("a",{parentName:"p",href:"https://www.kernel.org/doc/html/v4.19/admin-guide/dynamic-debug-howto.html"},"dynamic-debug"),"\uff0c\u6240\u6709 ",(0,p.kt)("strong",{parentName:"p"},"kernel function")," \u90fd\u53ef\u4ee5\u5411 ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u8a3b\u518a\u4e00\u7d44\u8f38\u51fa\u683c\u5f0f\u8207\u689d\u4ef6\uff0c\u7576\u4eca\u5929\u7ba1\u7406\u54e1\u6709\u9700\u6c42\u6642\u5c31\u53ef\u4ee5\u52d5\u614b\u7684\u6253\u958b\u9019\u4e9b\u958b\u95dc\u4f7f\u5f97 ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u958b\u59cb\u8f38\u51fa\u76f8\u95dc\u8a0a\u606f\u3002"),(0,p.kt)("p",null,"\u7cfb\u7d71\u4e0a\u652f\u63f4\u7684 ",(0,p.kt)("strong",{parentName:"p"},"dynamic debug")," \u90fd\u5b58\u653e\u65bc ",(0,p.kt)("inlineCode",{parentName:"p"},"/sys/kernel/debug/dynamic_debug/control")," \u9019\u500b\u8def\u5f91\uff0c\u900f\u904e ",(0,p.kt)("strong",{parentName:"p"},"cat")," \u7684\u65b9\u5f0f\u53ef\u4ee5\u770b\u5230\u7684\u5167\u5bb9\u90fd\u662f\u7531 ",(0,p.kt)("strong",{parentName:"p"},"filename:line_number, ","[kernel_module name]",", topic, output_format")," \u9019\u6a23\u7684\u683c\u5f0f\uff0c\u8b6c\u5982\u4e0b\u5217\u7bc4\u4f8b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},'cat /sys/kernel/debug/dynamic_debug/control\nnet/netfilter/xt_LOG.c:60 [xt_LOG]log_tg_check =_ "prefix is not null-terminated\\012"\nnet/netfilter/xt_LOG.c:55 [xt_LOG]log_tg_check =_ "level %u >= 8\\012"\nnet/bridge/netfilter/ebtables.c:2260 [ebtables]compat_do_replace =_ "tmp.entries_size %d, kern off %d, user off %d delta %d\\012"\nnet/bridge/netfilter/ebtables.c:2129 [ebtables]size_entry_mwt =_ "change offset %d to %d\\012"\nnet/bridge/netfilter/ebtables.c:1775 [ebtables]compat_calc_entry =_ "0x%08X -> 0x%08X\\012"\nnet/netfilter/ipvs/ip_vs_proto.c:266 [ip_vs]ip_vs_tcpudp_debug_packet_v6 =_ "%s: %s %s\\012"\nnet/netfilter/ipvs/ip_vs_proto.c:234 [ip_vs]ip_vs_tcpudp_debug_packet_v4 =_ "%s: %s %s\\012"\n')),(0,p.kt)("p",null,"\u524d\u9762\u4ee3\u8868\u7684\u662f\u6bcf\u500b\u6a94\u6848\u7684\u8def\u5f91\u8207\u884c\u6578\uff0c\u518d\u4f86\u662f\u5c0d\u61c9\u7684 ",(0,p.kt)("strong",{parentName:"p"},"kernel module name")," \u4ee5\u53ca\u6a19\u984c\uff0c\u6700\u5f8c\u662f\u5176\u8f38\u51fa\u7684\u683c\u5f0f\u3002"),(0,p.kt)("p",null,"\u5c0d\u65bc\u7ba1\u7406\u8005\u4f86\u8aaa\uff0c\u53ef\u4ee5\u91dd\u5c0d ",(0,p.kt)("strong",{parentName:"p"},"\u6a94\u6848\u540d\u7a31, \u884c\u6578 \u6216\u662f kernel module name \u4f86\u9032\u884c\u958b\u95dc\uff0c\u8b6c\u5982\u6211\u4eca\u5929\u60f3\u8981\u6253\u958b\u8ddf "),"ipvs** \u6709\u95dc\u7684\u6240\u6709\u8f38\u51fa\uff0c\u5c31\u53ef\u4ee5\u57f7\u884c"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"echo -n 'module ip_vs +p' > /sys/kernel/debug/dynamic_debug/control\n")),(0,p.kt)("p",null,"\u9019\u6a23 ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u5c31\u6703\u77e5\u9053\u628a ",(0,p.kt)("strong",{parentName:"p"},"control")," \u88e1\u9762\u5168\u90e8\u5c6c\u65bc ",(0,p.kt)("strong",{parentName:"p"},"ip_vs")," \u7684\u8a0a\u606f\u90fd\u8f38\u51fa\uff0c\u8b6c\u5982"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"[ 3415.992622] ip_vs_tcpudp_debug_packet_v4:234: IPVS: ip_vs_in: packet continues traversal as normal: TCP 10.0.2.2:58199->10.0.2.15:22\n")),(0,p.kt)("p",null,"\u5c0d\u65bc\u60f3\u8981\u7d30\u90e8\u89c0\u5bdf\u5c01\u5305\u6d41\u5411\u4f86\u8aaa\uff0c\u4e5f\u662f\u4e0d\u7121\u5c0f\u88dc\uff0c\u63d0\u4f9b\u4e00\u4e9b\u8cc7\u8a0a\u89c0\u5bdf"),(0,p.kt)("h2",{id:"ip_vs_debug"},"IP_VS_DEBUG"),(0,p.kt)("p",null,"\u7b2c\u4e8c\u500b\u5247\u662f\u7531 ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u81ea\u5df1\u5be6\u4f5c\u7684\u9664\u932f\u65b9\u5f0f\uff0c\u9019\u500b\u9664\u932f\u65b9\u5f0f\u76f8\u95dc\u7684\u529f\u80fd\u5247\u662f\u5728\u7de8\u8b6f\u671f\u9593\u6839\u64da\u53c3\u6578 ",(0,p.kt)("strong",{parentName:"p"},"IP_VS_DEBUG")," \u4f86\u5b9a\u662f\u5426\u8981\u4e00\u8d77\u7de8\u8b6f, \u9810\u8a2d\u60c5\u6cc1\u4e0b\u9019\u500b\u529f\u80fd\u662f\u95dc\u9589\u7684\uff0c\u9019\u4e5f\u610f\u5473\u5404\u4f4d\u5982\u679c\u90fd\u9069\u7528\u5df2\u7d93\u5efa\u7f6e\u597d\u7684 ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u90a3\u57fa\u672c\u4e0a\u662f\u6c92\u6709\u8fa6\u6cd5\u6253\u958b\u9019\u500b\u529f\u80fd\u7684\u3002\n\u70ba\u4e86\u6253\u958b\u9019\u500b\u529f\u80fd\uff0c\u4f60\u5fc5\u9808\u8981\u57f7\u884c\u4e0b\u5217\u6b65\u9a5f"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u6e96\u5099\u5c0d\u61c9\u4f60\u7cfb\u7d71\u7248\u672c\u7684 kernel source code"),(0,p.kt)("li",{parentName:"ol"},"\u52a0\u5165\u76f8\u95dc\u7684\u53c3\u6578\uff0c\u91cd\u65b0\u5efa\u7f6e IP_VS \u7684 kernel module"),(0,p.kt)("li",{parentName:"ol"},"\u79fb\u9664\u820a\u6709\u7684 kernel module \u4e26\u5b89\u88dd\u65b0\u7684\u5230\u7cfb\u7d71\u5167")),(0,p.kt)("p",null,"\u5982\u679c\u4f60\u6709\u8208\u8da3\u8981\u5617\u8a66\u770b\u770b\u7684\u8a71\uff0c\u9019\u908a\u53ef\u4ee5\u986f\u793a\u4e00\u4e0b\u5927\u6982\u7684\u4fee\u6539\u904e\u7a0b (\u5047\u8a2d\u4f60\u6e96\u5099\u597d\u76f8\u95dc\u7684 kernel source code) \u4e4b\u5f8c"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u5148\u8907\u88fd\u7cfb\u7d71\u76ee\u524d\u4f7f\u7528\u7684 kernel config (Ubutnu \u70ba\u7bc4\u4f8b)"),(0,p.kt)("li",{parentName:"ol"},"\u6839\u64da\u8a72\u8a2d\u5b9a\u6a94\u6848\u91cd\u65b0\u52a0\u5165 IP_VS_DEBUG \u7684\u53c3\u6578"),(0,p.kt)("li",{parentName:"ol"},"\u91cd\u65b0\u5efa\u7f6e Kernel Module"),(0,p.kt)("li",{parentName:"ol"},"\u79fb\u9664\u820a\u6709\u7684 Kernel Module, \u4e26\u4e14\u52a0\u5165\u65b0\u7684")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"cp /boot/config-`uname -r` .config\nmake menuconfig\nsudo rmmod ip_vs_wlc\nsudo rmmod ip_vs\nsudo insmod net/netfilter/ipvs/ip_vs.ko\nsudo insmod net/netfilter/ipvs/ip_vs_wlc.ko\nmake -j4\n")),(0,p.kt)("p",null,"\u5176\u4e2d\u7b2c\u4e8c\u90e8\u6703\u5f48\u51fa\u4e00\u500b\u7070\u8272\u756b\u9762\uff0c\u53ef\u4ee5\u900f\u904e ",(0,p.kt)("inlineCode",{parentName:"p"},"f")," \u9032\u884c\u53c3\u6578\u7684\u641c\u5c0b\uff0c\u627e\u5230\u5c0d\u61c9\u7684\u4f4d\u7f6e\uff0c\u7136\u5f8c\u5c07\u5176\u6253\u8a72\u8a2d\u5b9a\u6210 ",(0,p.kt)("strong",{parentName:"p"},"Y")," \u5373\u53ef\uff0c\u756b\u9762\u5982\u4e0b\n",(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/TuejssF.png",alt:null}),"\n",(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/VakjFDI.png",alt:null}),"\n\u5716\u4e2d\u4e5f\u53ef\u4ee5\u770b\u5230 ",(0,p.kt)("strong",{parentName:"p"},"IPVS"),' \u6eff\u6eff\u7684\u53c3\u6578\u6709\u54ea\u4e9b\uff0c\u5176\u4e2d\u6a19\u793a\u70ba "M" \u90fd\u4ee3\u8868\u6703\u5efa\u7f6e\u6210\u7368\u7acb\u7684 ',(0,p.kt)("strong",{parentName:"p"},"kernel module"),"\uff0c\u5982\u679c\u6709\u8208\u8da3\u7684\u4e5f\u53ef\u4ee5\u5c07\u5168\u90e8\u8b8a\u6210 ",(0,p.kt)("strong",{parentName:"p"},"Build-in")," \u7684\u65b9\u5f0f\uff0c\u9019\u610f\u5473 ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u672c\u8eab\u5c31\u6703\u5305\u542b\u9019\u4e9b\u529f\u80fd\uff0c\u4e0d\u9700\u8981\u984d\u5916\u5728\u90a3\u908a ",(0,p.kt)("strong",{parentName:"p"},"insmod/rmmod"),"\u3002"),(0,p.kt)("p",null,"\u6b64\u5916\u5982\u679c\u4f60\u672c\u8eab\u5df2\u7d93\u6709\u5efa\u7f6e\u904e ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u7684\u8a71\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f38\u5165 ",(0,p.kt)("strong",{parentName:"p"},"make modules")," \u55ae\u7d14\u7de8\u8b6f ",(0,p.kt)("strong",{parentName:"p"},"kernel modules")," \u76f8\u95dc\u5373\u53ef"),(0,p.kt)("p",null,"\u5b8c\u6210\u4e0a\u8ff0\u6b65\u9a5f\u4e4b\u5f8c\u5c31\u53ef\u4ee5\u5728\u7cfb\u7d71\u4e0a\u7684\u4f4d\u7f6e\u767c\u73fe\u591a\u4e86\u4e00\u500b\u8def\u5f91 ",(0,p.kt)("strong",{parentName:"p"},"/proc/sys/net/ipv4/vs/debug_level"),"\n",(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/f4yNxpd.png",alt:null})),(0,p.kt)("p",null,"\u8a72\u8def\u5f91\u5c0d\u61c9\u5230 ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u5167\u5247\u662f\u4e00\u500b\u6574\u6578\uff0c\u9810\u8a2d\u662f ",(0,p.kt)("strong",{parentName:"p"},"0"),", \u4eca\u5929\u5982\u679c\u8981\u6253\u958b ",(0,p.kt)("strong",{parentName:"p"},"debug")," \u529f\u80fd\u7684\u8a71\uff0c\u5c31\u8f38\u5165\u6578\u5b57\u5230\u8a72\u8def\u5f91\u5373\u53ef\uff0c\u8b6c\u5982"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},' echo "12" > /proc/sys/net/ipv4/vs/debug_level\n')),(0,p.kt)("p",null,"\u4e00\u4f46\u8a72\u529f\u80fd\u6253\u958b\u5f8c\uff0c\u5c31\u6703\u770b\u5230\u7cfb\u7d71\u5674\u51fa\u6eff\u6eff\u7684\u9664\u932f\u8a0a\u606f\uff0c\u8b6c\u5982"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"[391968.554844] IPVS: Enter: ip_vs_out, net/netfilter/ipvs/ip_vs_core.c line 1352\n[391968.554846] IPVS: Enter: ip_vs_proto_name, net/netfilter/ipvs/ip_vs_core.c line 83\n[391968.554847] IPVS: lookup/out TCP 172.17.8.111:37926->172.17.8.156:80 not hit\n[391968.554848] IPVS: Enter: sysctl_nat_icmp_send, net/netfilter/ipvs/ip_vs_core.c line 671\n[391968.554849] IPVS: Enter: ip_vs_local_request4, net/netfilter/ipvs/ip_vs_core.c line 2074\n[391968.554850] IPVS: Enter: ip_vs_in, net/netfilter/ipvs/ip_vs_core.c line 1884\n[391968.554851] IPVS: Enter: ip_vs_proto_name, net/netfilter/ipvs/ip_vs_core.c line 83\n[391968.554852] IPVS: lookup/in TCP 172.17.8.111:37926->172.17.8.156:80 hit\n[391968.554853] IPVS: Enter: is_new_conn, net/netfilter/ipvs/ip_vs_core.c line 1084\n[391968.554854] IPVS: Enter: sysctl_expire_nodest_conn, net/netfilter/ipvs/ip_vs_core.c line 677\n[391968.554854] IPVS: Enter: is_new_conn_expected, net/netfilter/ipvs/ip_vs_core.c line 1111\n[391968.554855] IPVS: Enter: ip_vs_in_stats, net/netfilter/ipvs/ip_vs_core.c line 117\n[391968.554856] IPVS: Enter: ip_vs_set_state, net/netfilter/ipvs/ip_vs_core.c line 209\n[391968.554858] IPVS: Enter: ip_vs_nat_xmit, net/netfilter/ipvs/ip_vs_xmit.c line 756\n[391968.554859] IPVS: Enter: __ip_vs_get_out_rt, net/netfilter/ipvs/ip_vs_xmit.c line 325\n[391968.554860] IPVS: Enter: __ip_vs_dst_check, net/netfilter/ipvs/ip_vs_xmit.c line 98\n[391968.554861] IPVS: Enter: crosses_local_route_boundary, net/netfilter/ipvs/ip_vs_xmit.c line 179\n[391968.554862] IPVS: Enter: decrement_ttl, net/netfilter/ipvs/ip_vs_xmit.c line 269\n[391968.554863] IPVS: Enter: ensure_mtu_is_adequate, net/netfilter/ipvs/ip_vs_xmit.c line 226\n[391968.554865] IPVS: Enter: ip_vs_nat_send_or_cont, net/netfilter/ipvs/ip_vs_xmit.c line 624\n[391968.554868] IPVS: Enter: ip_vs_nat_send_or_cont, net/netfilter/ipvs/ip_vs_xmit.c line 641\n")),(0,p.kt)("h1",{id:"module-init"},"Module Init"),(0,p.kt)("p",null,"\u5982\u4e0a\u9762\u6240\u8ff0\uff0c \u6211\u5011\u5c07\u5f9e ",(0,p.kt)("strong",{parentName:"p"},"ip_vs_core.c")," \u4f86\u63a2\u8a0e\u6574\u500b ",(0,p.kt)("strong",{parentName:"p"},"ip_vs")," \u7684\u521d\u59cb\u5316\u904e\u7a0b\n\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u78bc\u4f86\u81ea ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/torvalds/linux/blob/v4.15/net/netfilter/ipvs/ip_vs_core.c"},"Linux 4.15 GitHub ip_vs_core.c")),(0,p.kt)("p",null,"\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"Kernel Module")," \u90fd\u6703\u5f9e ",(0,p.kt)("strong",{parentName:"p"},"module_init")," \u9019\u908a\u958b\u59cb\uff0c\u50b3\u5165\u7684\u53c3\u6578\u90fd\u6703\u662f\u4e00\u500b ",(0,p.kt)("strong",{parentName:"p"},"function"),"\uff0c\u7576 Module \u88ab\u8f09\u5165\u5f8c\u9019\u500b function \u5c31\u6703\u88ab\u57f7\u884c\uff0c\u4e5f\u53ef\u4ee5\u60f3\u6210 ",(0,p.kt)("strong",{parentName:"p"},"modprobe ip_vs")," \u547c\u53eb\u5f8c\uff0c\u9019\u500b function \u5c31\u6703\u5148\u88ab\u57f7\u884c"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c="},"module_init(ip_vs_init);\n")),(0,p.kt)("p",null,"\u6839\u64da\u4e0a\u8ff0\u8a9e\u6cd5\uff0c\u53ef\u4ee5\u89c0\u5bdf\u5230 ",(0,p.kt)("strong",{parentName:"p"},"ip_vs_init")," \u9019\u500b ",(0,p.kt)("strong",{parentName:"p"},"function")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c="},'static int __init ip_vs_init(void)\n{\n    int ret;\n\n    ret = ip_vs_control_init();\n    if (ret < 0) {\n        pr_err("can\'t setup control.\\n");\n        goto exit;\n    }\n\n    ip_vs_protocol_init();\n\n    ret = ip_vs_conn_init();\n    if (ret < 0) {\n        pr_err("can\'t setup connection table.\\n");\n        goto cleanup_protocol;\n    }\n\n    ret = register_pernet_subsys(&ipvs_core_ops);   /* Alloc ip_vs struct */\n    if (ret < 0)\n        goto cleanup_conn;\n\n    ret = register_pernet_device(&ipvs_core_dev_ops);\n    if (ret < 0)\n        goto cleanup_sub;\n\n    ret = ip_vs_register_nl_ioctl();\n    if (ret < 0) {\n        pr_err("can\'t register netlink/ioctl.\\n");\n        goto cleanup_dev;\n    }\n\n    pr_info("ipvs loaded.\\n");\n\n    return ret;\n\ncleanup_dev:\n    unregister_pernet_device(&ipvs_core_dev_ops);\ncleanup_sub:\n    unregister_pernet_subsys(&ipvs_core_ops);\ncleanup_conn:\n    ip_vs_conn_cleanup();\ncleanup_protocol:\n    ip_vs_protocol_cleanup();\n    ip_vs_control_cleanup();\nexit:\n    return ret;\n}\nmodule_init(ip_vs_init);\nmodule_exit(ip_vs_cleanup);\n')),(0,p.kt)("p",null,"\u901a\u5e38\u89c0\u5bdf\u4e00\u500b ",(0,p.kt)("inlineCode",{parentName:"p"},"kernel module")," \u5c31\u662f\u5148\u89c0\u5bdf ",(0,p.kt)("inlineCode",{parentName:"p"},"init function"),", \u770b\u770b\u5230\u5e95\u521d\u59cb\u5316\u54ea\u4e9b\u76f8\u95dc\u7684\u8cc7\u8a0a\uff0c\u5176\u4e2d\u4e0a\u9762\u547c\u53eb\u7684\u51fd\u793a\u6709"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"ip_vs_control_init\n\u7528\u4f86\u5e6b\u5167\u90e8\u4e00\u4e9b\u8cc7\u6599\u7d50\u69cb\u521d\u59cb\u5316\uff0c\u4e3b\u8981\u90fd\u662f HASH table \u76f8\u95dc\u7684\u8cc7\u6599\u7d50\u69cb")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"ip_vs_protocol_init\n\u7528\u4f86\u521d\u59cb\u5316\u652f\u6301\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"Protocol"),"\uff0c\u8b6c\u5982 ",(0,p.kt)("inlineCode",{parentName:"p"},"TCP,UDP,SCTP")," \u7b49\n\u6839\u64da\u524d\u8ff0\u7684 ",(0,p.kt)("strong",{parentName:"p"},"make menuconfig")," \u6211\u5011\u53ef\u4ee5\u89c0\u5bdf\u5230\u76f8\u95dc\u5354\u5b9a\u7684\u652f\u6301\u4e5f\u662f\u53ef\u4ee5\u900f\u904e\u53c3\u6578\u53bb\u958b\u95dc\u7684\u3002")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"ip_vs_conn_init\n\u4e3b\u8981\u662f\u7528\u4f86\u521d\u59cb\u5316\u8ddf ",(0,p.kt)("inlineCode",{parentName:"p"},"connection")," \u6709\u95dc\u7684\u8cc7\u8a0a\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"connection")," \u53ef\u4ee5\u60f3\u6210 ",(0,p.kt)("inlineCode",{parentName:"p"},"Client")," \u7684\u8acb\u6c42\u8207\u914d\u7f6e ",(0,p.kt)("inlineCode",{parentName:"p"},"Real Server")," \u7684\u95dc\u4fc2\u8868\u3002 \u4e5f\u662f\u900f\u904e ",(0,p.kt)("inlineCode",{parentName:"p"},"connection")," \u4f86\u78ba\u4fdd\u76f8\u540c\u9023\u7dda\u7684\u5c01\u5305\u90fd\u6703\u88ab\u8f49\u767c\u5230\u76f8\u540c\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"Real Server")," \u4e0a")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"register_pernet_subsys/register_pernet_device\n\u4e0a\u8ff0\u5169\u500b\u51fd\u5f0f\u975e\u5e38\u6709\u8da3\uff0c\u4ed6\u5011\u7684\u90fd\u662f\u7528\u4f86\u8a3b\u518a ",(0,p.kt)("inlineCode",{parentName:"p"},"pernet")," \u5e95\u4e0b\u76f8\u95dc\u5143\u4ef6\u7684\u51fd\u5f0f\n\uff0c\u9019\u908a\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"pernet")," \u7684\u610f\u601d\u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},"\u6bcf\u500b Network Namespace"),"\u3002 \u7b49\u7b49\u6211\u5011\u518d\u4f86\u4ed4\u7d30\u770b\u770b\u5230\u5e95\u505a\u4e86\u4ec0\u9ebc")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"ip_vs_register_nl_ioctl\n\u7528\u4f86\u8a3b\u518a\u57fa\u65bc ",(0,p.kt)("inlineCode",{parentName:"p"},"netlink")," \u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"function handler"),"\uff0c\u9019\u4e5f\u662f\u6211\u5011\u900f\u904e ",(0,p.kt)("inlineCode",{parentName:"p"},"ipvsadm")," \u9019\u500b\u5de5\u5177\u7528\u4f86\u64cd\u4f5c\u6574\u500b ",(0,p.kt)("inlineCode",{parentName:"p"},"kernel")," \u5167\u90e8\u908f\u8f2f\u7684\u5165\u53e3\u3002\u6240\u6709\u7684\u64cd\u4f5c\u6307\u4ee4\u90fd\u6703\u900f\u904e ",(0,p.kt)("inlineCode",{parentName:"p"},"netlink")," \u5f9e ",(0,p.kt)("inlineCode",{parentName:"p"},"userspace")," \u9001\u5230 ",(0,p.kt)("inlineCode",{parentName:"p"},"kernel space")," \u4e26\u4e14\u547c\u53eb\u8d77\u5c0d\u61c9\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"Function")," \u4f86\u8655\u7406\u3002"))),(0,p.kt)("h2",{id:"register_pernet_subsysdevice"},"register_pernet_subsys/device"),(0,p.kt)("p",null,"Kernel \u5c0d\u65bc ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u7684\u5275\u5efa\u63d0\u4f9b\u4e86\u5169\u500b\u65b9\u6cd5\u4f86\u8a3b\u518a\u76f8\u95dc\u7684 ",(0,p.kt)("strong",{parentName:"p"},"handler"),", \u9019\u5169\u500b\u5dee\u7570\u4e3b\u8981\u5728\u65bc\u5c0d\u80cc\u5f8c\u8cc7\u6599\u7d50\u69cb\u64cd\u4f5c\u7684\u4f4d\u7f6e\u4e0d\u540c\uff0c\u8a73\u7d30\u7684\u53ef\u4ee5\u53c3\u95b1 ",(0,p.kt)("a",{parentName:"p",href:"http://www.programmersought.com/article/907433913/"},"Kernel network namespace\n"),", \u9019\u908a\u5c31\u55ae\u7d14\u91dd\u5c0d ",(0,p.kt)("inlineCode",{parentName:"p"},"register_pernet_subsys")," \u4f86\u7814\u7a76\u3002"),(0,p.kt)("p",null,"\u76f4\u63a5\u770b\u4e00\u4e0b\u8a72\u51fd\u5f0f\u7684\u8a3b\u89e3\uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u8a3b\u518a\u4e00\u7d44\u4efb\u4f55 ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u88ab\u522a\u9664\u8207\u5275\u5efa\u6642\u90fd\u6703\u88ab\u547c\u53eb\u7684\u51fd\u5f0f\uff0c\u800c\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\u7576\u8a3b\u518a\u7684\u77ac\u9593\uff0c\u4e5f\u6703\u5c0d\u6240\u6709\u5df2\u7d93\u5b58\u5728\u7684 ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u547c\u53eb\u4e00\u6b21\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c="}," *      register_pernet_subsys - register a network namespace subsystem\n *      @ops:  pernet operations structure for the subsystem\n *\n *      Register a subsystem which has init and exit functions\n *      that are called when network namespaces are created and\n *      destroyed respectively.\n *\n *      When registered all network namespace init functions are\n *      called for every existing network namespace.  Allowing kernel\n *      modules to have a race free view of the set of network namespaces.\n *\n *      When a new network namespace is created all of the init\n *      methods are called in the order in which they were registered.\n *\n *      When a network namespace is destroyed all of the exit methods\n *      are called in the reverse of the order with which they were\n *      registered.\n")),(0,p.kt)("p",null,"\u63a5\u4e0b\u4f86\u770b\u4e00\u4e0b\u9019\u500b\u51fd\u5f0f\u7684\u547c\u53eb\u7bc4\u4f8b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c="},"    ret = register_pernet_subsys(&ipvs_core_ops);   /* Alloc ip_vs struct */\n")),(0,p.kt)("p",null,"\u5176\u50b3\u5165\u7684\u53c3\u6578\u662f\u4e00\u500b\u540d\u70ba ",(0,p.kt)("inlineCode",{parentName:"p"},"ipvs_core_ops")," \u7684\u7d50\u69cb\uff0c\u800c\u8a72\u7d50\u69cb\u5167\u5bb9\u5982\u4e0b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c\uff1d"},"static struct pernet_operations ipvs_core_ops = {\n    .init = __ip_vs_init,\n    .exit = __ip_vs_cleanup,\n    .id   = &ip_vs_net_id,\n    .size = sizeof(struct netns_ipvs),\n};\n")),(0,p.kt)("p",null,"\u9019\u500b\u7d50\u69cb\u5167\u6700\u91cd\u8981\u7684\u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},".init")," \u9019\u500b ",(0,p.kt)("strong",{parentName:"p"},"function pointer"),"\uff0c\u5176\u610f\u601d\u662f ",(0,p.kt)("strong",{parentName:"p"},"\u6bcf\u7576\u6709\u4efb\u4f55\u4e00\u500b namespace \u88ab\u5275\u5efa\u4e4b\u6642"),"\uff0c\u8acb\u547c\u53eb\u5c0d\u61c9\u7684 ",(0,p.kt)("strong",{parentName:"p"},"function")," \u4f86\u8655\u7406\uff0c\u800c\u9019\u908a\u9019\u500b ",(0,p.kt)("strong",{parentName:"p"},"function")," \u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},"__ip_vs_init"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c="},"/*\n *  Initialize IP Virtual Server netns mem.\n */\nstatic int __net_init __ip_vs_init(struct net *net)\n{\n    struct netns_ipvs *ipvs;\n    int ret;\n\n    ipvs = net_generic(net, ip_vs_net_id);\n    if (ipvs == NULL)\n        return -ENOMEM;\n\n    /* Hold the beast until a service is registerd */\n    ipvs->enable = 0;\n    ipvs->net = net;\n    /* Counters used for creating unique names */\n    ipvs->gen = atomic_read(&ipvs_netns_cnt);\n    atomic_inc(&ipvs_netns_cnt);\n    net->ipvs = ipvs;\n\n    if (ip_vs_estimator_net_init(ipvs) < 0)\n        goto estimator_fail;\n\n    if (ip_vs_control_net_init(ipvs) < 0)\n        goto control_fail;\n\n    if (ip_vs_protocol_net_init(ipvs) < 0)\n        goto protocol_fail;\n\n    if (ip_vs_app_net_init(ipvs) < 0)\n        goto app_fail;\n\n    if (ip_vs_conn_net_init(ipvs) < 0)\n        goto conn_fail;\n\n    if (ip_vs_sync_net_init(ipvs) < 0)\n        goto sync_fail;\n\n    ret = nf_register_net_hooks(net, ip_vs_ops, ARRAY_SIZE(ip_vs_ops));\n    if (ret < 0)\n        goto hook_fail;\n\n    return 0;\n/*\n * Error handling\n */\n\nhook_fail:\n    ip_vs_sync_net_cleanup(ipvs);\nsync_fail:\n    ip_vs_conn_net_cleanup(ipvs);\nconn_fail:\n    ip_vs_app_net_cleanup(ipvs);\napp_fail:\n    ip_vs_protocol_net_cleanup(ipvs);\nprotocol_fail:\n    ip_vs_control_net_cleanup(ipvs);\ncontrol_fail:\n    ip_vs_estimator_net_cleanup(ipvs);\nestimator_fail:\n    net->ipvs = NULL;\n    return -ENOMEM;\n}\n")),(0,p.kt)("p",null,"\u8a72\u51fd\u5f0f\u7684\u8a3b\u89e3\u76f4\u63a5\u6a19\u793a\uff0c\u91dd\u5c0d\u6bcf\u4e00\u500b ",(0,p.kt)("inlineCode",{parentName:"p"},"network namespace")," \u53bb\u9032\u884c\u76f8\u95dc\u7684\u521d\u59cb\u5316\uff0c\u5176\u4e2d\u70ba\u91cd\u8981\u7684\u5247\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"ip_vs_control_net_init")," \u4ee5\u53ca ",(0,p.kt)("inlineCode",{parentName:"p"},"nf_register_net_hooks")," \u9019\u5169\u500b\u51fd\u5f0f\uff0c\u5f8c\u8005\u5247\u662f\u8207 ",(0,p.kt)("strong",{parentName:"p"},"netfilter")," \u4e5f\u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},"iptables")," \u76f8\u95dc\u7684\u4e92\u52d5\uff0c\u4e0b\u4e00\u7ae0\u7bc0\u6211\u5011\u518d\u4f86\u4ed4\u7d30\u770b\u4e00\u4e0b\u9019\u500b\u51fd\u5f0f\u3002"),(0,p.kt)("h2",{id:"ip_vs_control_net_init"},"ip_vs_control_net_init"),(0,p.kt)("p",null,"\u6839\u64da\u4e0a\u8ff0\u7684 ",(0,p.kt)("strong",{parentName:"p"},"debug")," \u898f\u5247\u6211\u5011\u77e5\u9053\u7cfb\u7d71\u4e0a\u6703\u6709\u4e00\u500b\u8def\u5f91 ",(0,p.kt)("strong",{parentName:"p"},"/proc/sys/net/ipv4/vs")," \u53ef\u4ee5\u8b93\u4f7f\u7528\u8005\u8207\u4e4b\u4e92\u52d5\uff0c\u800c\u9019\u500b\u4ecb\u9762\u7684\u521d\u59cb\u5316\u5176\u5be6\u5c31\u662f\u900f\u904e ",(0,p.kt)("strong",{parentName:"p"},"ip_vs_control_net_init")," \u4f86\u5b8c\u6210\u7684\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c++"},"int __net_init ip_vs_control_net_init(struct netns_ipvs *ipvs)\n{\n        int i, idx;\n...\n...\n        if (ip_vs_control_net_init_sysctl(ipvs))\n                goto err;\n...\n")),(0,p.kt)("p",null,"\u5176\u547c\u53eb\u4e86 ",(0,p.kt)("inlineCode",{parentName:"p"},"ip_vs_control_net_init_sysctl")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c++"},'#ifdef CONFIG_SYSCTL\nstatic int __net_init ip_vs_control_net_init_sysctl(struct netns_ipvs *ipvs)\n{\n        struct net *net = ipvs->net;\n        int idx;\n        struct ctl_table *tbl;\n...\n        idx = 0;\n...\n        tbl[idx++].data = &ipvs->sysctl_backup_only;\n        ipvs->sysctl_conn_reuse_mode = 1;\n        tbl[idx++].data = &ipvs->sysctl_conn_reuse_mode;\n        tbl[idx++].data = &ipvs->sysctl_schedule_icmp;\n        tbl[idx++].data = &ipvs->sysctl_ignore_tunneled;\n...\n        ipvs->sysctl_hdr = register_net_sysctl(net, "net/ipv4/vs", tbl);\n...\n    return 0\n}\n')),(0,p.kt)("p",null,"\u4e0a\u8ff0\u7684\u6982\u5ff5\u5c31\u662f\u5275\u5efa\u4e00\u500b ",(0,p.kt)("strong",{parentName:"p"},"struct ctl_table *tbl")," \u7684\u7269\u4ef6\uff0c\u4e26\u4e14\u586b\u5165\u76f8\u95dc\u7684\u8cc7\u8a0a\u5f8c\uff0c\u547c\u53eb ",(0,p.kt)("strong",{parentName:"p"},"register_net_stsctl")," \u4f86\u8a3b\u518a\u9019\u4e00\u7cfb\u5217\u7684\u8def\u5f91\uff0c\u4e5f\u53ef\u4ee5\u89c0\u5bdf\u5230\u5176\u5b50\u8def\u5f91\u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},"net/ipv4/vs"),". \u800c\u9019\u4e9b ",(0,p.kt)("strong",{parentName:"p"},"table")," \u7684\u8cc7\u6599\u7684\u5b9a\u7fa9\u5982\u4e0b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c++"},'/*\n *      IPVS sysctl table (under the /proc/sys/net/ipv4/vs/)\n *      Do not change order or insert new entries without\n *      align with netns init in ip_vs_control_net_init()\n */\n\nstatic struct ctl_table vs_vars[] = {\n        {\n                .procname       = "amemthresh",\n                .maxlen         = sizeof(int),\n                .mode           = 0644,\n                .proc_handler   = proc_dointvec,\n        },\n        {\n                .procname       = "am_droprate",\n                .maxlen         = sizeof(int),\n                .mode           = 0644,\n                .proc_handler   = proc_dointvec,\n        },\n        {\n                .procname       = "drop_entry",\n                .maxlen         = sizeof(int),\n                .mode           = 0644,\n                .proc_handler   = proc_do_defense_mode,\n        },\n....\n#ifdef CONFIG_IP_VS_DEBUG\n        {\n                .procname       = "debug_level",\n                .data           = &sysctl_ip_vs_debug_level,\n                .maxlen         = sizeof(int),\n                .mode           = 0644,\n                .proc_handler   = proc_dointvec,\n        },\n#endif\n        { }\n};\n')),(0,p.kt)("p",null,"\u9019\u908a\u7528\u4e00\u7a2e\u683c\u5f0f\u5316\u7684\u65b9\u5f0f\u53bb\u5b9a\u7fa9\u6bcf\u500b\u8def\u5f91\u7684 ",(0,p.kt)("strong",{parentName:"p"},"\u540d\u7a31, \u985e\u5225\uff0c \u76f8\u95dc\u7684\u8655\u7406\u51fd\u5f0f\u4ee5\u53ca\u5b58\u53d6\u6a21\u5f0f"),"\uff0c\u7279\u5225\u6ce8\u610f\u5230\u7684\u662f ",(0,p.kt)("strong",{parentName:"p"},"debug_level")," \u672c\u8eab\u5247\u662f\u88ab ",(0,p.kt)("strong",{parentName:"p"},"ifdef CONFIG_IP_VS_DEBUG")," \u9019\u500b ",(0,p.kt)("strong",{parentName:"p"},"macro")," \u7d66\u5305\u8d77\u4f86\uff0c\u6240\u4ee5\u5982\u679c\u6c92\u6709\u7279\u5225\u8655\u7406\u7684\u8a71\uff0c\u9810\u8a2d\u60c5\u6cc1\u4e0b\u5c31\u4e0d\u6703\u628a ",(0,p.kt)("strong",{parentName:"p"},"debug_level")," \u7d66\u7de8\u8b6f\u9032\u53bb\u3002"),(0,p.kt)("p",null,"\u89c0\u770b\u9019\u4e9b\u8cc7\u6599\u9084\u6709\u4e00\u500b\u597d\u8655\u5c31\u662f\u4f60\u53ef\u4ee5\u77e5\u9053\u7cfb\u7d71\u4e2d\u6709\u54ea\u4e9b\u53c3\u6578\u53ef\u4ee5\u9935\u7d66 Kernel \u53bb\u8655\u7406\uff0c\u540c\u6642\u4e5f\u53ef\u4ee5\u642d\u914d\u89c0\u770b\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u4e86\u89e3\u9019\u4e9b\u53c3\u6578\u5230\u5e95\u5be6\u969b\u4e0a\u505a\u4e86\u4ec0\u9ebc\u3002"),(0,p.kt)("p",null,"\u9019\u908a\u6709\u4e00\u500b\u6982\u5ff5\u8981\u6ce8\u610f\u7684\u5c31\u662f ",(0,p.kt)("strong",{parentName:"p"},"net")," \u9019\u500b\u7269\u4ef6\u662f ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u5167\u7db2\u8def\u7cfb\u7d71\u6700\u91cd\u8981\u7684\u7d50\u69cb\uff0c\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"netowrk namespace")," \u90fd\u6703\u6709\u4e00\u500b\u81ea\u5df1\u7684\u526f\u672c\uff0c\u57fa\u672c\u4e0a\u53ea\u8981\u51fd\u6578\u672c\u8eab\u6709\u5403 ",(0,p.kt)("strong",{parentName:"p"},"net")," \u53c3\u6578\uff0c\u5c31\u53ef\u4ee5\u731c\u5230\u9019\u500b\u529f\u80fd\u7d55\u5c0d\u662f\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u7368\u7acb\u3002\u9019\u908a\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f ",(0,p.kt)("strong",{parentName:"p"},"Host")," \u672c\u8eab\u4e5f\u662f\u4e00\u500b ",(0,p.kt)("strong",{parentName:"p"},"network namespace"),"\uff0c\u6240\u4ee5\u7576\u6211\u5011\u8a3b\u518a\u9019\u500b\u51fd\u5f0f\u7684\u6642\u5019\uff0c\u5c31\u6703\u5148\u91dd\u5c0d\u7cfb\u7d71\u672c\u8eab\u9019\u500b ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u547c\u53eb\u9019\u4e00\u7d44\u5c0d\u61c9\u7684 ",(0,p.kt)("strong",{parentName:"p"},"init function"),"."),(0,p.kt)("p",null,"\u5982\u679c\u4f60\u7684\u64cd\u4f5c\u74b0\u5883\u662f\u820a\u7248\u4e00\u9ede\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"kernel")," \uff0c\u8b6c\u5982 ",(0,p.kt)("inlineCode",{parentName:"p"},"4.4.0")," \u4e4b\u985e\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u7cfb\u7d71\u89c0\u5bdf\u5230\u985e\u4f3c\u4e0b\u5217\u7684\u8a0a\u606f"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"[3534469.163231] IPVS: Creating netns size=2192 id=1342\n[3534793.388007] IPVS: Creating netns size=2192 id=1343\n[3535052.371673] IPVS: Creating netns size=2192 id=1344\n[3535706.550968] IPVS: Creating netns size=2192 id=1345\n[3535761.378872] IPVS: Creating netns size=2192 id=1346\n[3537083.860486] IPVS: Creating netns size=2192 id=1347\n")),(0,p.kt)("p",null,"\u984c\u5916\u8a71\uff0c ",(0,p.kt)("inlineCode",{parentName:"p"},"kernel code")," \u5167\u6eff\u6eff\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"goto"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"goto")," \u4e0d\u662f\u4e0d\u80fd\u7528\uff0c\u800c\u662f\u4f60\u8981\u6703\u7528\uff0c\u53ef\u4ee5\u770b\u770b ",(0,p.kt)("strong",{parentName:"p"},"kernel")," \u9019\u908a\u7684\u7528\u6cd5\uff0c\u540c\u6642\u4f60\u4e5f\u53ef\u4ee5\u60f3\u60f3\u4e0d\u7528 ",(0,p.kt)("strong",{parentName:"p"},"goto")," \u7684\u8a71\uff0c\u9019\u4e9b\u7a0b\u5f0f\u78bc\u4f60\u6703\u600e\u9ebc\u4fee\u6539\u3002"),(0,p.kt)("h1",{id:"summary"},"Summary"),(0,p.kt)("p",null,"\u4eca\u5929\u9019\u500b\u7ae0\u7bc0\u91dd\u5c0d ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u5e95\u5c64\u7684\u8cc7\u8a0a\u9032\u884c\u4e86\u7c97\u7565\u5730\u63a2\u7d22\uff0c\u4e3b\u8981\u662f\u77e5\u9053\u8981\u5982\u4f55\u900f\u904e ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u63d0\u4f9b\u7684\u65b9\u5f0f\u4f86\u9032\u884c\u9664\u932f\uff0c\u85c9\u7531\u9019\u9664\u932f\u65b9\u5f0f\u4e4b\u5f8c\u6703\u66f4\u65b9\u4fbf\u5730\u53bb\u6574\u500b\u77ad\u89e3\u7a0b\u5f0f\u7684\u547c\u53eb\u8108\u7d61\u4e26\u4e14\u6211\u8a8d\u70ba\u4e5f\u662f\u4e00\u500b\u5f88\u597d\u7684\u5b78\u7fd2\u65b9\u5f0f"),(0,p.kt)("p",null,"\u5c0d\u65bc ",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u7684\u6982\u5ff5\u53ef\u4ee5\u7406\u89e3\u6210\uff0c",(0,p.kt)("strong",{parentName:"p"},"IPVS")," \u7684\u529f\u80fd\u7531 ",(0,p.kt)("strong",{parentName:"p"},"Kernel")," \u63d0\u4f9b\uff0c\u4f46\u662f\u6bcf\u500b ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u4e92\u76f8\u7368\u7acb\u4e0d\u5f71\u97ff\u5f7c\u6b64\uff0c\u6240\u4ee5\u4f60\u5230\u4e0d\u540c\u7684 ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u5167\u900f\u904e ",(0,p.kt)("strong",{parentName:"p"},"ipvsadm")," \u770b\u5230\u7684\u7d50\u679c\u90fd\u4e92\u76f8\u7368\u7acb\uff0c\u4e0d\u6703\u727d\u626f\u5f7c\u6b64\u3002"),(0,p.kt)("p",null,"\u900f\u904e\u8a3b\u518a ",(0,p.kt)("strong",{parentName:"p"},"register_pernet_subsys")," \u9019\u500b\u51fd\u5f0f\uff0c ",(0,p.kt)("strong",{parentName:"p"},"ipvs")," \u80fd\u5920\u81ea\u52d5\u5c0d\u7cfb\u7d71\u4e0a\u6bcf\u500b\u5df2\u7d93\u5b58\u5728/\u672a\u4f86\u65b0\u589e\u7684 ",(0,p.kt)("strong",{parentName:"p"},"network namespace")," \u9032\u884c\u8655\u7406\uff0c\u5e6b\u5176\u521d\u59cb\u5316 ",(0,p.kt)("strong",{parentName:"p"},"ipvs")," \u76f8\u95dc\u7684\u7269\u4ef6\u3002"),(0,p.kt)("p",null,"\u6700\u5f8c\uff0c\u7531\u65bc ",(0,p.kt)("strong",{parentName:"p"},"init")," \u51fd\u5f0f\u958b\u59cb\u5f8c\u5c31\u6703\u53bb\u9032\u884c ",(0,p.kt)("strong",{parentName:"p"},"sys")," \u76f8\u95dc\u7684\u521d\u59cb\u5316\uff0c\u4f86\u4e0d\u53ca\u5c07 ",(0,p.kt)("strong",{parentName:"p"},"debug_level")," \u8a2d\u5b9a\u800c\u8f38\u51fa\uff0c\u56e0\u6b64\u6211\u5728\u4fee\u6539\u539f\u59cb\u78bc\u4e4b\u5f8c\u91cd\u65b0\u5b89\u88dd\u5230\u7cfb\u7d71\u4f86\u89c0\u5bdf\u66f4\u7d30\u90e8\u7684 ",(0,p.kt)("strong",{parentName:"p"},"init")," \u6d41\u7a0b\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"[669447.783857] IPVS: Enter: ip_vs_init, net/netfilter/ipvs/ip_vs_core.c line 2371\n[669447.783858] IPVS: Enter: ip_vs_control_init, net/netfilter/ipvs/ip_vs_ctl.c line 4122\n[669447.783862] IPVS: Enter: ip_vs_protocol_init, net/netfilter/ipvs/ip_vs_proto.c line 338\n[669447.783863] IPVS: Registered protocols (TCP, UDP, SCTP, AH, ESP)\n[669447.783864] IPVS: Enter: ip_vs_conn_init, net/netfilter/ipvs/ip_vs_conn.c line 1403\n[669447.783937] IPVS: Connection hash table configured (size=4096, memory=64Kbytes)\n[669447.783937] IPVS: Each connection entry needs 288 bytes at least\n[669447.783944] IPVS: Enter: __ip_vs_init, net/netfilter/ipvs/ip_vs_core.c line 2257\n[669447.783945] IPVS: Enter: ip_vs_control_net_init, net/netfilter/ipvs/ip_vs_ctl.c line 4037\n[669447.783951] IPVS: Enter: ip_vs_control_net_init_sysctl, net/netfilter/ipvs/ip_vs_ctl.c line 3926\n[669447.783963] IPVS: Enter: ip_vs_protocol_net_init, net/netfilter/ipvs/ip_vs_proto.c line 309\n[669447.783966] IPVS: Enter: ip_vs_conn_net_init, net/netfilter/ipvs/ip_vs_conn.c line 1384\n[669447.783968] IPVS: Enter: __ip_vs_dev_init, net/netfilter/ipvs/ip_vs_core.c line 2329\n[669447.981664] IPVS: Enter: ip_vs_register_nl_ioctl, net/netfilter/ipvs/ip_vs_ctl.c line 4091\n[669447.981678] IPVS: ipvs loaded.\n")),(0,p.kt)("p",null,"\u4e0b\u4e00\u7ae0\u7bc0\u6211\u5011\u6703\u4e3b\u8981\u91dd\u5c0d \u5c01\u5305\u7684\u6d41\u5411 \u4f86\u9032\u884c\u63a2\u8a0e\uff0c\u5305\u542b ",(0,p.kt)("strong",{parentName:"p"},"iptables/netfilter")," \u8207\u4e4b\u7684\u4e92\u52d5\uff0c\u4ee5\u53ca\u5be6\u969b\u7531\u672c\u5730\u7aef\u9001\u51fa\u4e00\u500b\u5c01\u5305\u5f8c\uff0c\u5be6\u969b\u4e0a\u80cc\u5f8c\u7684\u904b\u4f5c\u908f\u8f2f\u662f\u54ea\u4e9b\uff0c\u53c8\u6703\u547c\u53eb\u5230\u54ea\u4e9b ",(0,p.kt)("strong",{parentName:"p"},"function")," \u4f86\u8655\u7406\u3002"))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[60724],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>g});var s=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,s)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,s,r=function(n,e){if(null==n)return{};var t,s,r={},o=Object.keys(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(s=0;s<o.length;s++)t=o[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var i=s.createContext({}),d=function(n){var e=s.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},l=function(n){var e=d(n.components);return s.createElement(i.Provider,{value:e},n.children)},u="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},m=s.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,i=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),u=d(t),m=r,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return t?s.createElement(g,a(a({ref:e},l),{},{components:t})):s.createElement(g,a({ref:e},l))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c[u]="string"==typeof n?n:r,a[1]=c;for(var d=2;d<o;d++)a[d]=t[d];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2917:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=t(87462),r=(t(67294),t(3905));const o={title:"TCP\u4f7f\u7528sendto",date:"2013-03-31 00:13",tags:["System","Network","Linux"]},a=void 0,c={unversionedId:"techPost/2013/tcp-sendto",id:"techPost/2013/tcp-sendto",title:"TCP\u4f7f\u7528sendto",description:"OS:Linux",source:"@site/docs/techPost/2013/tcp-sendto.md",sourceDirName:"techPost/2013",slug:"/techPost/2013/tcp-sendto",permalink:"/docs/techPost/2013/tcp-sendto",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"Network",permalink:"/docs/tags/network"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",frontMatter:{title:"TCP\u4f7f\u7528sendto",date:"2013-03-31 00:13",tags:["System","Network","Linux"]},sidebar:"techPost",previous:{title:"Strategy Pattern",permalink:"/docs/techPost/2013/strategy-pattern"},next:{title:"Wireshark with Openflow-Plugin in Fedora 14",permalink:"/docs/techPost/2013/wireshark-with-openflow-plugin-in-fedora-14"}},i={},d=[],l={toc:d},u="wrapper";function p(n){let{components:e,...t}=n;return(0,r.kt)(u,(0,s.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"OS:Linux"),(0,r.kt)("p",null,"\u4ee5\u524d\u5728\u5bebSocket Programming\u7684\u6642\u5019\uff0c\u5c0d\u65bcTCP\u8ddfUDP\u5728\u4f7f\u7528\u4e0a\u6703\u6709\u4e00\u4e9b\u5340\u5225\nTCP\u8981\u5148\u5efa\u7acb\u9023\u7dda\uff0c\u63a5\u8005\u900f\u904e\u8a72\u9023\u7dda\u628a\u8cc7\u6599\u9001\u51fa\u53bb\uff0c\u800cUDP\u56e0\u70ba\u6c92\u6709\u9023\u7dda\uff0c\u6bcf\u6b21\u9001\u51fa\u8cc7\u6599\u6642\u90fd\u8981\u6307\u5b9a\u5c0d\u65b9\u7684\u4f4d\u7f6e\n\u5bebTCP\u7684\u6642\u5019\uff0c\u6211\u7fd2\u6163\u4f7f\u7528write\u8ddfsend\u5169\u500bfunction \u4f86\u50b3\u9001\u8cc7\u6599\n\u5bebUDP\u7684\u6642\u5019\uff0c\u6211\u7fd2\u6163\u4f7f\u7528sendto\u4f86\u50b3\u9001\u8cc7\u6599"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"     ssize_t\n     send(int s, const void *msg, size_t len, int flags);\n\n     ssize_t\n     sendto(int s, const void *msg, size_t len, int flags,\n         const struct sockaddr *to, socklen_t tolen);\n")),(0,r.kt)("p",null,"\u4f46\u662f\u8fd1\u671f\u807d\u5b78\u9577\u8aaa\uff0c\u770b\u5230\u6709\u7a0b\u5f0f\u78bc\u4ee5sendto\u4f86\u50b3\u9001\u8cc7\u6599\uff0c\u9019\u662f\u6211\u7b2c\u4e00\u6b21\u807d\u5230\uff0c\u597d\u5947\u4e4b\u4e0b\uff0c\u4fbf\u53bb\u67e5\u8a62\u4e86\u4e00\u4e0b\n\u9019\u908a\u4ee5linux-3.5.4\u7248\u672c\u70ba\u4f8b"),(0,r.kt)("p",null,"\u7576\u4f7f\u7528\u8005\u547c\u53ebsend\u4f86\u50b3\u9001\u8cc7\u6599\u6642\uff0c\u6703\u5148\u547c\u53eb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"SYSCALL_DEFINE4(send, int, fd, void __user *, buff, size_t, len,\n        unsigned int, flags)\n{\n    return sys_sendto(fd, buff, len, flags, NULL, 0);\n}\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0csend\u505a\u7684\u4e8b\u60c5\u975e\u5e38\u7c21\u55ae\uff0c\u5c31\u662f\u5728\u53bb\u547c\u53ebsendto\uff0c\u7136\u5f8c\u5f8c\u9762\u5169\u500b\u4f4d\u7f6e\u7684\u90e8\u5206\u5c31\u7d66\u4ed6\u586b\u70baNULL\uff0c\u6240\u4ee5\u5c0dTCP\u9023\u7dda\u4f86\u8aaa\uff0c\u4f7f\u7528sendto\u4e26\u4e14\u5f8c\u5169\u500b\u53c3\u6578\u4e5f\u7d66NULL\uff0c\u4e5f\u4e00\u6a23\u53ef\u4ee5work\u3002"),(0,r.kt)("p",null,"\u90a3\u9019\u908a\u5c31\u597d\u5947\u4e86\uff0c\u65e2\u7136\u540c\u6a23\u90fd\u662f\u4f7f\u7528sendto\u4f86\u50b3\u9001\u8cc7\u6599\uff0c\u90a3TCP\u6c92\u6709\u7d66\u5b9a\u4f4d\u7f6e\u662f\u56e0\u70ba\u672c\u8eab\u5df2\u7d93\u6709\u9023\u7dda\u4e86\uff0c\n\u90a3\u5230\u5e95\u5728sendto\u4e2d\u662f\u5982\u4f55\u8fa6\u5230\u9019\u4ef6\u4e8b\u60c5\u4e86\uff0c\u6240\u4ee5\u53c8\u7e7c\u7e8c\u5f80\u4e0b\u770b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"SYSCALL_DEFINE6(sendto, int, fd, void __user *, buff, size_t, len,\n        unsigned int, flags, struct sockaddr __user *, addr,\n        int, addr_len)\n{\n    struct socket *sock;\n    struct sockaddr_storage address;\n    int err;\n    struct msghdr msg;\n    struct iovec iov;\n    int fput_needed;\n\n    if (len > INT_MAX)\n        len = INT_MAX;\n    sock = sockfd_lookup_light(fd, &err, &fput_needed);\n    if (!sock)\n        goto out;\n\n    iov.iov_base = buff;\n    iov.iov_len = len;\n    msg.msg_name = NULL;\n    msg.msg_iov = &iov;\n    msg.msg_iovlen = 1;\n    msg.msg_control = NULL;\n    msg.msg_controllen = 0;\n    msg.msg_namelen = 0;\n    if (addr) {\n        err = move_addr_to_kernel(addr, addr_len, &address);\n        if (err < 0)\n            goto out_put;\n        msg.msg_name = (struct sockaddr *)&address;\n        msg.msg_namelen = addr_len;\n    }\n    if (sock->file->f_flags & O_NONBLOCK)\n        flags |= MSG_DONTWAIT;\n    msg.msg_flags = flags;\n    err = sock_sendmsg(sock, &msg, len);\n\nout_put:\n    fput_light(sock->file, fput_needed);\nout:\n    return err;\n}\n\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\u6703\u5229\u7528sock->file->f_flags & O_NONBLOCK\u4f86\u6aa2\u67e5\u662f\u5426\u662f\u500bnonblock\u7684\u50b3\u9001\u3002\n\u56de\u6b78\u6b63\u984c\uff0c\u5148\u57f7\u884cmove_addr_to_kernel\u9019\u500bfunction,\u628a\u5c0d\u65b9\u4f4d\u7f6e\u7d66\u8f49\u79fb\u5230kernel space\u4e2d\uff0c\n\u5982\u679c\u662fTCP\u9023\u7dda\u7684\u8a71\uff0c\u50b3\u9032\u53bb\u7684\u53c3\u6578\u5c31\u6703\u662fNULL\u8ddf0\uff0c\u800c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int move_addr_to_kernel(void __user *uaddr, int ulen, struct sockaddr_storage *kaddr)\n{\n    if (ulen < 0 || ulen > sizeof(struct sockaddr_storage))\n        return -EINVAL;\n    if (ulen == 0)\n        return 0;\n    if (copy_from_user(kaddr, uaddr, ulen))\n        return -EFAULT;\n    return audit_sockaddr(ulen, kaddr);\n}\n\n")),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u7576\u50b3\u5165\u7684ulen\u662f0\u7684\u6642\u5019\uff0c\u5c31\u6703\u56de\u50b30\uff0c\u56e0\u6b64\u9019\u908a\u5c0d\u65bcTCP\u5c31\u4e0d\u6703\u56de\u50b3\u932f\u8aa4\u3002\n\u9019\u908a\u53ef\u4ee5\u770b\u5230"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"msg.msg_name = (struct sockaddr *)&address;\nmsg.msg_namelen = addr_len;\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\u6703\u628a\u5c0d\u65b9\u4f4d\u7f6e\u7684\u76f8\u95dc\u8cc7\u8a0a\u7d66\u5b58\u5230msg\u4e2d\uff0c\u4f30\u8a08\u662f\u4e4b\u5f8cUDP\u6703\u7528\u5230\n\u63a5\u4e0b\u4f86\u900f\u904esock_sendmsg\u50b3\u9001\u8cc7\u6599\nsock_sendmsg ->",(0,r.kt)("strong",{parentName:"p"},"sock_sendmsg->"),"sock_sendmsg_nosec"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"static inline int __sock_sendmsg_nosec(struct kiocb *iocb, struct socket *sock,\n                       struct msghdr *msg, size_t size)\n{\n    struct sock_iocb *si = kiocb_to_siocb(iocb);\n\n    sock_update_classid(sock->sk);\n\n    sock_update_netprioidx(sock->sk);\n\n    si->sock = sock;\n    si->scm = NULL;\n    si->msg = msg;\n    si->size = size;\n\n    return sock->ops->sendmsg(iocb, sock, msg, size);\n}\n\n\n")),(0,r.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230 \u6700\u5f8c\u6703\u900f\u904esock->ops->sendmsg(iocb, sock, msg, size) \u9019\u884c\u628a\u8cc7\u6599\u9001\u51fa\u53bb\n\u6839\u64dasocket\u7684\u7a2e\u985e\u662fTCP\u9084\u662fUDP\uff0c\u5c0d\u61c9\u5230\u4e0d\u540c\u7684function pointer\n\u5206\u5225\u662ftcp_sendmsg,udp_sendmsg"),(0,r.kt)("p",null,"\u800c\u5728udp_sendmsg\u4e2d\u5c31\u6703\u53bb\u4f7f\u7528\u5230\u525b\u525b\u5728sendto\u90a3\u908a\u8a2d\u5b9a\u7684msg\n\u7bc0\u9304\u81eaudp_sendmsg\n\u9019\u908a\u53ef\u4ee5\u660e\u986f\u770b\u5230\u6703\u628amsg\u4e2d\u95dc\u65bc\u5c0d\u65b9\u4f4d\u7f6e\u7684\u8cc7\u8a0a\u7d66\u6293\u51fa\u4f86\uff0c\u7136\u5f8c\u8a2d\u5b9a\u5230daddr\u4ee5\u53cadport"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"    if(msg->msg_name) {\n        struct sockaddr_in *usin = (struct sockaddr_in *)msg->msg_name;\n        if (msg->msg_namelen < sizeof(*usin))\n            return -EINVAL;\n        if (usin->sin_family != AF_INET) {\n            if (usin->sin_family != AF_UNSPEC)\n                return -EAFNOSUPPORT;\n        }\n\n        daddr = usin->sin_addr.s_addr;\n        dport = usin->sin_port;\n        if (dport == 0)\n            return -EINVAL;\n    } else {\n        if (sk->sk_state != TCP_ESTABLISHED)\n            return -EDESTADDRREQ;\n        daddr = inet->inet_daddr;\n        dport = inet->inet_dport;\n        /* Open fast path for connected socket.\n           Route will not be used, if at least one option is set.\n         */\n        connected = 1;\n    }\n\n")),(0,r.kt)("p",null,"\u6b64\u5916\uff0crecv\u4ee5\u53carecvfrom\u4e5f\u662f\u4e00\u6a23\u7684\u7d44\u5408\uff0c\u8207sent\u548csendto\u7684\u95dc\u4fc2\u5dee\u4e0d\u591a"))}p.isMDXComponent=!0}}]);
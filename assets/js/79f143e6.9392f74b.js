"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[1438],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>v});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),s=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=s(t.components);return r.createElement(l.Provider,{value:e},t.children)},_="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,l=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),_=s(n),u=i,v=_["".concat(l,".").concat(u)]||_[u]||p[u]||a;return n?r.createElement(v,o(o({ref:e},d),{},{components:n})):r.createElement(v,o({ref:e},d))}));function v(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,o=new Array(a);o[0]=u;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c[_]="string"==typeof t?t:i,o[1]=c;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},13957:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={title:"[Switchdev] How Kernel Implement SwitchDev(ii)",date:"2016-04-04 08:38",tags:["System","Linux","Kernel","Switchdev","Network"],description:"\u63a2\u8a0e Kernel \u5982\u4f55\u5be6\u4f5c SwitchDev (II)"},o=void 0,c={unversionedId:"techPost/2016/switchdev-iii",id:"techPost/2016/switchdev-iii",title:"[Switchdev] How Kernel Implement SwitchDev(ii)",description:"\u63a2\u8a0e Kernel \u5982\u4f55\u5be6\u4f5c SwitchDev (II)",source:"@site/docs/techPost/2016/switchdev-iii.md",sourceDirName:"techPost/2016",slug:"/techPost/2016/switchdev-iii",permalink:"/docs/techPost/2016/switchdev-iii",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"Linux",permalink:"/docs/tags/linux"},{label:"Kernel",permalink:"/docs/tags/kernel"},{label:"Switchdev",permalink:"/docs/tags/switchdev"},{label:"Network",permalink:"/docs/tags/network"}],version:"current",frontMatter:{title:"[Switchdev] How Kernel Implement SwitchDev(ii)",date:"2016-04-04 08:38",tags:["System","Linux","Kernel","Switchdev","Network"],description:"\u63a2\u8a0e Kernel \u5982\u4f55\u5be6\u4f5c SwitchDev (II)"},sidebar:"techPost",previous:{title:"[Switchdev] How Kernel Implement SwitchDev(i)",permalink:"/docs/techPost/2016/switchdev-ii"},next:{title:"2015",permalink:"/docs/category/2015"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Structure",id:"structure",level:2},{value:"Transaction",id:"transaction",level:3},{value:"Attribute",id:"attribute",level:3},{value:"Object",id:"object",level:3},{value:"Operation",id:"operation",level:3},{value:"Notifier",id:"notifier",level:3},{value:"Implementation",id:"implementation",level:2},{value:"SwitchDev Port Attribute",id:"switchdev-port-attribute",level:3},{value:"SwitchDev Port Object operation",id:"switchdev-port-object-operation",level:3},{value:"Port Bridge",id:"port-bridge",level:3},{value:"FDB Operations",id:"fdb-operations",level:3},{value:"FIB Operations",id:"fib-operations",level:3},{value:"Notifier",id:"notifier-1",level:3}],d={toc:s},_="wrapper";function p(t){let{components:e,...n}=t;return(0,i.kt)(_,(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"\u672c\u7bc7\u6587\u7ae0\u4e3b\u8981\u6703\u5c08\u6ce8\u65bc switchdev \u672c\u8eab\u7684\u5be6\u4f5c\u4e0a\uff0c\u5305\u542b\u4e86\u5176\u7d50\u69cb\u4ee5\u53ca\u63d0\u4f9b\u7684 API \u7b49\u3002"),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("h3",{id:"transaction"},"Transaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"struct switchdev_trans_item {\n        struct list_head list;\n        void *data;\n        void (*destructor)(const void *data);\n};\n\nstruct switchdev_trans {\n        struct list_head item_list;\n        bool ph_prepare;\n};\n\nstatic inline bool switchdev_trans_ph_prepare(struct switchdev_trans *trans)\n{\n        return trans && trans->ph_prepare;\n}\n\nstatic inline bool switchdev_trans_ph_commit(struct switchdev_trans *trans)\n{\n        return trans && !trans->ph_prepare;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Switchdev ",(0,i.kt)("a",{parentName:"li",href:"https://patchwork.ozlabs.org/patch/519719/"},"\u5be6\u4f5c"),"\u4e86\u4e00\u7a2e trans \u7684\u6a5f\u5236\uff0c\u5c0d\u65bc hardware switch \u9032\u884c\u4e00\u4e9b\u5beb\u5165\u7684\u52d5\u4f5c\uff0c\u5982 set/add \u6642\uff0c\u8a72\u52d5\u4f5c\u6703\u88ab\u62c6\u6210\u5169\u90e8\u4efd\uff0c\u5206\u5225\u662f prepare/commit \u5169\u90e8\u5206\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u4e00\u958b\u59cb\u6703\u5148\u5c07 ",(0,i.kt)("strong",{parentName:"li"},"ph_prepare")," \u7d66\u8a2d\u5b9a\u70ba ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"\uff0c\u7136\u5f8c\u5beb\u5165\u7684\u8cc7\u6599\u50b3\u7d66 driver\uff0c\u8b93 driver \u77e5\u9053\u9019\u6b21\u7684\u5beb\u5165\u53ea\u662f\u7528\u4f86\u78ba\u8a8d\u53ef\u884c\u6027\u800c\u5df2\uff0c\u5982\u679c driver \u78ba\u5b9a\u53ef\u4ee5\u5beb\u5165\u5f8c\uff0c\u6703\u5c07 ",(0,i.kt)("strong",{parentName:"li"},"ph_prepare")," \u8b8a\u70ba ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," \u5f8c\uff0c\u518d\u6b21\u8981\u6c42 driver \u5c07\u771f\u6b63\u7684\u8cc7\u6599\u7d66\u5beb\u5165\u3002")),(0,i.kt)("h3",{id:"attribute"},"Attribute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"enum switchdev_attr_id {\n        SWITCHDEV_ATTR_ID_UNDEFINED,\n        SWITCHDEV_ATTR_ID_PORT_PARENT_ID,\n        SWITCHDEV_ATTR_ID_PORT_STP_STATE,\n        SWITCHDEV_ATTR_ID_PORT_BRIDGE_FLAGS,\n        SWITCHDEV_ATTR_ID_BRIDGE_AGEING_TIME,\n        SWITCHDEV_ATTR_ID_BRIDGE_VLAN_FILTERING,\n};\n")),(0,i.kt)("p",null,"  \u6b64 enum \u7528\u4f86\u5b9a\u7fa9 switch attribute \u7684\u7a2e\u985e\uff0c\u7576 switch driver \u6536\u5230\u4e00\u4e9b\u5982 get \u7684\u6307\u4ee4\u6642\uff0c\u6703\u6839\u64da\u8a72 attribute\u7684\u7a2e\u985e\u56de\u50b3\u7279\u5b9a\u8cc7\u6599"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"struct switchdev_attr {\n        struct net_device *orig_dev;\n        enum switchdev_attr_id id;\n        u32 flags;\n        union {\n                struct netdev_phys_item_id ppid;        /* PORT_PARENT_ID */\n                u8 stp_state;                           /* PORT_STP_STATE */\n                unsigned long brport_flags;             /* PORT_BRIDGE_FLAGS */\n                u32 ageing_time;                        /* BRIDGE_AGEING_TIME */\n                bool vlan_filtering;                    /* BRIDGE_VLAN_FILTERING */\n        } u;\n};\n")),(0,i.kt)("p",null,"\u5be6\u969b\u4e0a\u7528\u4f86\u7d00\u9304 switch attribute \u7684\u7d50\u69cb"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"net_device")," \u4f86\u8a18\u9304\u662f\u54ea\u500b\u76ee\u6a19 device"),(0,i.kt)("li",{parentName:"ul"},"id \u5982\u524d\u8ff0\u6240\u8aaa\u7684\u7a2e\u985e"),(0,i.kt)("li",{parentName:"ul"},"flags \u76ee\u524d\u6709\u4e09\u7a2e\u503c")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"#define SWITCHDEV_F_NO_RECURSE          BIT(0)\n#define SWITCHDEV_F_SKIP_EOPNOTSUPP     BIT(1)\n#define SWITCHDEV_F_DEFER               BIT(2)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"u \u5247\u662f\u7528\u4f86\u5b58\u653e\u8a72 id \u6240\u4ee3\u8868\u7684\u503c")),(0,i.kt)("h3",{id:"object"},"Object"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"enum switchdev_obj_id {\n        SWITCHDEV_OBJ_ID_UNDEFINED,\n        SWITCHDEV_OBJ_ID_PORT_VLAN,\n        SWITCHDEV_OBJ_ID_IPV4_FIB,\n        SWITCHDEV_OBJ_ID_PORT_FDB,\n        SWITCHDEV_OBJ_ID_PORT_MDB,\n};\n")),(0,i.kt)("p",null,"  \u6b64 enum \u7528\u4f86\u8a18\u9304\u8a72 switch object \u7684\u7a2e\u985e\uff0c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"struct switchdev_obj {\n        struct net_device *orig_dev;\n        enum switchdev_obj_id id;\n        u32 flags;\n};\n")),(0,i.kt)("p",null,"  \u6b64\u7d50\u69cb\u8a18\u9304 type\uff0c net_device \u4ee5\u53ca flag\uff0c\u5c0d\u61c9\u7a2e\u985e\u7684\u6578\u503c\u56e0\u70ba\u592a\u904e\u65bc\u5ee3\u6cdb\uff0c\u6240\u4ee5\u6b64 structure \u6703\u518d\u88ab\u5176\u4ed6\u7684\u7d50\u69cb\u7d66\u5305\u8d77\u4f86\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"struct switchdev_obj_port_vlan {\n        struct switchdev_obj obj;\n        u16 flags;\n        u16 vid_begin;\n        u16 vid_end;\n};\nstruct switchdev_obj_ipv4_fib {\n        struct switchdev_obj obj;\n        u32 dst;\n        int dst_len;\n        struct fib_info fi;\n        u8 tos;\n        u8 type;\n        u32 nlflags;\n        u32 tb_id;\n};\nstruct switchdev_obj_port_fdb {\n        struct switchdev_obj obj;\n        unsigned char addr[ETH_ALEN];\n        u16 vid;\n        u16 ndm_state;\n};\nstruct switchdev_obj_port_mdb {\n        struct switchdev_obj obj;\n        unsigned char addr[ETH_ALEN];\n        u16 vid;\n};\n")),(0,i.kt)("p",null,"\u7531\u4e0a\u9762\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u76ee\u524d\u5df2\u7d93\u5be6\u4f5c\u4e86\u56db\u7a2e\u7684 switchdev obj\uff0c\u5206\u5225\u662f vlan \u7684\u8a2d\u5b9a\uff0c L2 \u7684 FDB/MDB \u4ee5\u53ca L3 \u7684 FIB."),(0,i.kt)("h3",{id:"operation"},"Operation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"/**\n * struct switchdev_ops - switchdev operations\n *\n * @switchdev_port_attr_get: Get a port attribute (see switchdev_attr).\n *\n * @switchdev_port_attr_set: Set a port attribute (see switchdev_attr).\n *\n * @switchdev_port_obj_add: Add an object to port (see switchdev_obj_*).\n *\n * @switchdev_port_obj_del: Delete an object from port (see switchdev_obj_*).\n *\n * @switchdev_port_obj_dump: Dump port objects (see switchdev_obj_*).\n */\nstruct switchdev_ops {\n        int     (*switchdev_port_attr_get)(struct net_device *dev,\n                                           struct switchdev_attr *attr);\n        int     (*switchdev_port_attr_set)(struct net_device *dev,\n                                           const struct switchdev_attr *attr,\n                                           struct switchdev_trans *trans);\n        int     (*switchdev_port_obj_add)(struct net_device *dev,\n                                          const struct switchdev_obj *obj,\n                                          struct switchdev_trans *trans);\n        int     (*switchdev_port_obj_del)(struct net_device *dev,\n                                          const struct switchdev_obj *obj);\n        int     (*switchdev_port_obj_dump)(struct net_device *dev,\n                                           struct switchdev_obj *obj,\n                                           switchdev_obj_dump_cb_t *cb);\n};\n")),(0,i.kt)("p",null,"\u6b64\u7d50\u69cb\u88ab\u52a0\u5165\u5230 ",(0,i.kt)("strong",{parentName:"p"},"struct net_device"),"\u5167\uff0c\u6240\u4ee5 hardware switch driver \u5728\u5275\u5efa net_divce \u6642\uff0c\u8981\u9806\u4fbf\u5c0d\u8a72\u7d50\u69cb\u9032\u884c\u521d\u59cb\u5316\uff0c\u9019\u6a23\u5c0d\u61c9\u7684 function pointer \u624d\u6709\u8fa6\u6cd5\u5728\u9069\u7576\u7684\u6642\u6a5f\u88ab\u57f7\u884c\uff0c\u9019\u90e8\u5206\u53ef\u4ee5\u53c3\u8003 rocker driver\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"dev->switchdev_ops = &rocker_port_switchdev_ops;\n")),(0,i.kt)("h3",{id:"notifier"},"Notifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"enum switchdev_notifier_type {\n        SWITCHDEV_FDB_ADD = 1,\n        SWITCHDEV_FDB_DEL,\n};\n\nstruct switchdev_notifier_info {\n        struct net_device *dev;\n};\n\nstruct switchdev_notifier_fdb_info {\n        struct switchdev_notifier_info info; /* must be first */\n        const unsigned char *addr;\n        u16 vid;\n};\n")),(0,i.kt)("p",null,"Notifier \u662f\u7528\u4f86\u8b93 hardware switch \u901a\u77e5 linux kernel \u7528\u7684\uff0c\u76ee\u524d\u53ea\u6709\u5be6\u4f5c FDB \u7684\u90e8\u5206\u3002\n\u7576 hardware switch \u7684 FDB offload \u6709\u8b8a\u5316\u6642(ADD/DEL)\uff0c\u8981\u900f\u904e\u9019\u500b\u65b9\u5f0f\u4e00\u8def\u901a\u77e5\u9053 linux kernel \u53bb\uff0c\u9019\u6a23\u7684\u8a71\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"brctl show")," \u6307\u4ee4\u53bb\u770b\u7684\u6642\u5019\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5373\u6642\u7684\u72c0\u614b\u8b8a\u5316\u3002"),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("h3",{id:"switchdev-port-attribute"},"SwitchDev Port Attribute"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"int switchdev_port_attr_get(struct net_device *dev,\n                            struct switchdev_attr *attr);\nint switchdev_port_attr_set(struct net_device *dev,\n                            const struct switchdev_attr *attr);\n")),(0,i.kt)("p",null,"\u9019\u5169\u500b function \u662f\u7528\u4f86\u8655\u7406 attribute \u7684\uff0c\u5176\u8655\u7406\u908f\u8f2f\u985e\u4f3c\uff0c\u57fa\u672c\u4e0a\u90fd\u6309\u7167\u4e0b\u5217\u8d70\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"const struct switchdev_ops *ops = dev->switchdev_ops;\n\nif (ops && ops->switchdev_port_attr_get)\n    return ops->switchdev_port_attr_get(dev, attr);\n\nif (attr->flags & SWITCHDEV_F_NO_RECURSE)\n    return err;\n\nnetdev_for_each_lower_dev(dev, lower_dev, iter) {\n    /* do something */\n}\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u5148\u5224\u65b7\u8a72 device \u662f\u5426\u6709\u5be6\u4f5c switchdev_ops,\u82e5\u6709\u7684\u8a71\u5247\u76f4\u63a5\u547c\u53eb fptr \u4f86\u8655\u7406.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u53c3\u8003 rocker driver.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"static const struct switchdev_ops rocker_port_switchdev_ops = {\n    .switchdev_port_attr_get        = rocker_port_attr_get,\n    .switchdev_port_attr_set        = rocker_port_attr_set,\n}\n...\ndev->switchdev_ops = &rocker_port_switchdev_ops;\n...\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"\u5224\u65b7\u8a72 device \u662f\u5426\u6709\u88ab\u8a2d\u5b9a\u4e0d\u9700\u8981\u905e\u8ff4\u5f80\u4e0b\u5c0b\u627e\uff0c\u82e5\u6709\u7684\u8a71\u5247\u76f4\u63a5\u7d50\u675f"),(0,i.kt)("li",{parentName:"ol"},"\u56e0\u70ba switch port \u53ef\u80fd\u662f\u5c6c\u65bc bond/team/vlan \u7b49 device \u5e95\u4e0b\uff0c\u6240\u4ee5\u82e5\u76f4\u63a5\u64cd\u4f5c\u4e0a\u5c64\u7684 device \u662f\u6c92\u6709\u8fa6\u6cd5\u78b0\u5230 switch port \u7684\uff0c\u9019\u908a\u6703\u4f7f\u7528 ",(0,i.kt)("a",{parentName:"li",href:"https://lists.ubuntu.com/archives/kernel-team/2014-June/043300.html"},"netdev_for_each_lower_dev")," \u4f86\u5617\u8a66\u6293\u53d6\u5230\u5e95\u4e0b\u6240\u6709\u7684 device\u3002",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u5c0d\u65bc get/set \u4f86\u8aaa\uff0c\u6703\u91dd\u5c0d\u5e95\u4e0b\u6bcf\u500b device \u5617\u8a66\u53bb get/set \u5176 attribute.")))),(0,i.kt)("h3",{id:"switchdev-port-object-operation"},"SwitchDev Port Object operation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"int switchdev_port_obj_add(struct net_device *dev,\n                           const struct switchdev_obj *obj);\nint switchdev_port_obj_del(struct net_device *dev,\n                           const struct switchdev_obj *obj);\nint switchdev_port_obj_dump(struct net_device *dev, struct switchdev_obj *obj,\n                            switchdev_obj_dump_cb_t *cb);\n")),(0,i.kt)("p",null,"\u9019\u4e09\u500b function \u90fd\u662f\u7528\u4f86\u8655\u7406 object \u7684\uff0c\u5176\u904b\u4f5c\u908f\u8f2f\u4e5f\u985e\u4f3c"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"const struct switchdev_ops *ops = dev->switchdev_ops;\n\nif (ops && ops->switchdev_port_obj_add)\n                return ops->switchdev_port_obj_add(dev, obj, trans);\nnetdev_for_each_lower_dev(dev, lower_dev, iter) {\n    /* do something */\n}\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u5148\u6aa2\u67e5\u8a72 device \u662f\u5426\u6709\u5be6\u4f5c switchdev_ops,\u82e5\u6709\u5c31\u547c\u53eb\u5c0d\u61c9\u7684 function \u4f86\u8655\u7406"),(0,i.kt)("li",{parentName:"ol"},"\u905e\u8ff4\u5b58\u53d6\u5e95\u4e0b\u6240\u6709\u7684 device (bond/team/vlan), \u91dd\u5c0d\u6bcf\u500b device \u90fd\u8dd1\u4e00\u6b21\u5c0d\u61c9\u7684\u7d50\u679c\u3002"),(0,i.kt)("li",{parentName:"ol"},"obj_dump \u7684\u90e8\u5206\u9084\u6703\u50b3\u5165\u4e00\u500b ",(0,i.kt)("strong",{parentName:"li"},"call back")," function, \u76ee\u524d\u770b\u5230\u7684\u53ea\u6709\u5169\u500b\u5be6\u4f5c\uff0c\u5206\u5225\u662f ",(0,i.kt)("strong",{parentName:"li"},"switchdev_port_obj_dump")," \u4ee5\u53ca ",(0,i.kt)("strong",{parentName:"li"},"switchdev_port_vlan_dump_cb"),"\u3002 \u5169\u8005\u90fd\u8981\u642d\u914d\u53e6\u5916\u4e00\u500b `switchdev_port_xxx_dump** \u7684\u7d50\u69cb\u4f86\u4f7f\u7528\uff0c\u76ee\u524d\u611f\u89ba\u7528\u9014\u4e0d\u662f\u5f88 general.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"fdb \u7684 dump \u8207 ",(0,i.kt)("strong",{parentName:"li"},"rfnetlink")," \u6709\u95dc\u4fc2\uff0c\u8981\u642d\u914d ",(0,i.kt)("strong",{parentName:"li"},"ndo_fdb_dump")," \u4f7f\u7528\u3002user space tool \u900f\u904e netlink \u4f86\u554f fdb \u7684\u8cc7\u6599\u6642\uff0c\u6703\u900f\u904e\u6b64 cb \u5c07\u5c0d\u61c9\u7684\u5167\u5bb9\u586b\u5165\u5230 netlink header \u4e2d\uff0c\u6700\u5f8c\u518d\u4e00\u8def\u9001\u56de user space \u53bb\u6aa2\u67e5\u3002")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vlan \u7684\u90e8\u5206\u5247\u662f ",(0,i.kt)("strong",{parentName:"li"},"rfnetlink")," \u5728\u4f7f\u7528\u7684\uff0c\u6703\u5148\u547c\u53eb\u5230 ",(0,i.kt)("strong",{parentName:"li"},"ndo_bridge_getlink"),", \u6700\u5f8c\u8dd1\u5230 ",(0,i.kt)("strong",{parentName:"li"},"ndo_dflt_bridge_getlink")," \u624d\u6703\u4f7f\u7528\uff0cndo (network device operation) \u7684 netlink \u64cd\u4f5c\u6709\u5fc5\u8981\u518d\u591a\u82b1\u4e00\u4e9b\u6642\u9593\u53bb\u77ad\u89e3\u4e86\u3002")),(0,i.kt)("h3",{id:"port-bridge"},"Port Bridge"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"int switchdev_port_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq,\n                                  struct net_device *dev, u32 filter_mask,\n                                  int nlflags);\nint switchdev_port_bridge_setlink(struct net_device *dev,\n                                  struct nlmsghdr *nlh, u16 flags);\nint switchdev_port_bridge_dellink(struct net_device *dev,\n                                  struct nlmsghdr *nlh, u16 flags);\n")),(0,i.kt)("p",null,"\u9019\u4e09\u500b function \u662f\u7528\u4f86\u64cd\u4f5c bridge port attribute \u7684\uff0c\u57fa\u672c\u4e0a\u90fd\u662f\u88ab\u8a2d\u5b9a\u6210 ",(0,i.kt)("strong",{parentName:"p"},"ndo_bridge_xxx")," \u7684 handler\u3002\n\u76ee\u524d\u53ef\u4ee5\u53c3\u8003\u7684\u7bc4\u4f8b\u61c9\u8a72\u662f\u4f7f\u7528 ",(0,i.kt)("strong",{parentName:"p"},"br")," \u9019\u500b\u8207 ",(0,i.kt)("strong",{parentName:"p"},"ip")," \u985e\u4f3c\u7684 user-space tool.\n\u8a73\u7d30\u8aaa\u660e\u53ef\u4ee5\u53c3\u8003\u6b64 ",(0,i.kt)("a",{parentName:"p",href:"http://comments.gmane.org/gmane.linux.network/232104"},"link")),(0,i.kt)("h3",{id:"fdb-operations"},"FDB Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"int switchdev_port_fdb_add(struct ndmsg *ndm, struct nlattr *tb[],\n                           struct net_device *dev, const unsigned char *addr,\n                           u16 vid, u16 nlm_flags);\nint switchdev_port_fdb_del(struct ndmsg *ndm, struct nlattr *tb[],\n                           struct net_device *dev, const unsigned char *addr,\n                           u16 vid);\nint switchdev_port_fdb_dump(struct sk_buff *skb, struct netlink_callback *cb,\n                            struct net_device *dev,\n                            struct net_device *filter_dev, int idx);\n")),(0,i.kt)("p",null,"\u9019\u4e09\u500b function \u662f\u7528\u4f86\u64cd\u4f5c fdb \u7684\uff0c\u7576\u4e0a\u5c64\u8d70 ",(0,i.kt)("strong",{parentName:"p"},"rtnetlink")," \u4e2d\u7684 ",(0,i.kt)("strong",{parentName:"p"},"ndo_fdb_xxx")," type \u6642\uff0c\u5c31\u6703\u89f8\u767c\u5c0d\u61c9\u7684 function handler\uff0c\u9019\u4e9b function \u6700\u5f8c\u90fd\u6703\u547c\u53eb\u5230\u5c0d\u61c9\u7684 ",(0,i.kt)("strong",{parentName:"p"},"switchdev_port_obj_xxx"),"\u3002"),(0,i.kt)("p",null,"\u95dc\u65bc\u6574\u500b FDB \u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e0b\u5217\u9019\u5f35\u5716\u4f86\u7e3d\u7d50\n",(0,i.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/-sk760sgtc28/VwO9Wle0NKI/AAAAAAAAFOo/QrHADU1hDps5c5SmGBwU-nd54ZSJ7UjpQCCo/s720-Ic42/FDB.png",alt:null})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u85cd\u7dda\u4ee3\u8868\u7684\u662f Notifer\uff0c\u7576 Rocket \u5728 FDB \u6709\u4efb\u4f55\u8b8a\u66f4\u6642\uff0c\u6703\u4e00\u8def\u901a\u77e5\u5230 Linux Kernel \u53bb\uff0c\u4ee5\u78ba\u4fdd FDB \u8cc7\u6599\u4e00\u81f4\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5716\u4e2d\u7d05\u7dda\u4ee3\u8868\u7684\u662f\u8d70 ndo \u7cfb\u5217\u7684 netlink event\uff0c\u6703\u76f4\u63a5\u8ddf Rocker \u6e9d\u901a\uff0c\u56e0\u6b64\u900f\u904e ",(0,i.kt)("inlineCode",{parentName:"li"},"br")," \u6b64\u6307\u4ee4\u53bb\u4fee\u6539 FDB entry\u6642\uff0c\u6703\u5148\u8d70\u7d05\u7dda\u5230 Rocker \u53bb\uff0c\u63a5\u8005\u8d70\u85cd\u7dda\u53bb\u901a\u77e5 Kernel \u540c\u6b65 FDB\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u7576\u900f\u904e",(0,i.kt)("inlineCode",{parentName:"li"},"brctl"),"\u6307\u4ee4\u53bb\u64cd\u4f5c\u6642\uff0c\u9019\u908a\u76ee\u524d\u80fd\u505a\u7684\u53ea\u6709\u90e8\u5206 attribute/obj \u7684\u4fee\u6539\uff0c\u5982 STP \u7684\u72c0\u614b\uff0c\u6b64\u6642\u5247\u6703\u4e00\u8def\u5f9e switchdev \u7684\u6838\u5fc3\u50b3\u5230 Rocker \u53bb\u8655\u7406\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u57fa\u672c\u4e0a MDB \u7684\u64cd\u4f5c\u5247\u7c21\u55ae\u5f88\u591a\uff0c\u8207 FIB \u6bd4\u8f03\u985e\u4f3c\u3002")),(0,i.kt)("h3",{id:"fib-operations"},"FIB Operations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int switchdev_fib_ipv4_add(u32 dst, int dst_len, struct fib_info *fi,\n                           u8 tos, u8 type, u32 nlflags, u32 tb_id);\nint switchdev_fib_ipv4_del(u32 dst, int dst_len, struct fib_info *fi,\n                           u8 tos, u8 type, u32 tb_id);\nvoid switchdev_fib_ipv4_abort(struct fib_info *fi);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9019\u4e09\u500b function \u662f\u7528\u4f86\u64cd\u4f5c IPv4 FIB offload \u7684\uff0c\u4e0d\u540c\u65bc FDB\uff0c\u6b64 offload rule \u672c\u8eab\u7684\u5b78\u7fd2\u53ea\u80fd\u9760 linux kernl \u4f86\u7ba1\u7406\uff0c\u7576 kernel \u6c7a\u5b9a\u8981\u91dd\u5c0d\u7279\u5b9a FIB route \u8655\u7406\u6642\uff0c\u6703\u547c\u53eb\u4e0a\u8ff0\u7684 add/del \u5c07\u76f8\u95dc\u7684 FIB router \u7d66\u52a0\u5165\u5230 hardware switch \u4e2d\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="},"err = switchdev_fib_ipv4_add(key, plen, fi,\n      new_fa->fa_tos,\n      cfg->fc_type,\n      cfg->fc_nlflags,\n      tb->tb_id);\nif (err) {\n      switchdev_fib_ipv4_abort(fi);\n      kmem_cache_free(fn_alias_kmem, new_fa);\n      goto out;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7576\u57f7\u884c\u5931\u6557\u7684\u6642\u5019\uff0c\u6703\u547c\u53eb abort \u5c07 rules \u7d66\u5168\u90e8\u6e05\u7a7a\uff0c\u4e26\u4e14\u5c07 IPv4 offload \u7d66\u95dc\u9589",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u9019\u90e8\u5206\u9084\u6709\u5f85\u52a0\u5f37\uff0c\u7531\u8a3b\u89e3\u4e5f\u53ef\u4ee5\u770b\u51fa\u4f86")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c="}," /* There was a problem installing this route to the offload\n * device.  For now, until we come up with more refined\n * policy handling, abruptly end IPv4 fib offloading for\n * for entire net by flushing offload device(s) of all\n * IPv4 routes, and mark IPv4 fib offloading broken from\n * this point forward.\n */\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u800c\u76ee\u524d\u5728\u52a0\u5165 rules \u7684\u90e8\u5206\uff0c\u4e5f\u6709\u91dd\u5c0d\u689d\u4ef6\u53bb\u7be9\u9078\uff0c\u4e26\u975e\u6240\u6709\u7684 FIB \u90fd\u6703\u88ab\u52a0\u5165")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#ifdef CONFIG_IP_MULTIPLE_TABLES\n        if (fi->fib_net->ipv4.fib_has_custom_rules)\n                return 0;\n#endif\n\n        if (fi->fib_net->ipv4.fib_offload_disabled)\n                return 0;\n")),(0,i.kt)("p",null,"\u95dc\u65bc\u6574\u500b FIB \u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u7528\u4e0b\u5217\u9019\u5f35\u5716\u4f86\u7e3d\u7d50\n",(0,i.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/-6xvPI9pzSrQ/VwO-v0MUQ5I/AAAAAAAAFPA/4P4aYSo6pfMzzPLacKWG-lfICRtn087xQCCo/s720-Ic42/FIB.png",alt:null})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u76f8\u5c0d\u65bc FDB\uff0c\u975e\u5e38\u7684\u7c21\u55ae\uff0c\u53ea\u6709 kernel \u4e3b\u52d5\u53bb\u52a0\u5165 Rocker \u800c\u5df2"),(0,i.kt)("li",{parentName:"ul"},"\u76ee\u524d ndo_xxx_ooo \u7cfb\u5217\u7684\u64cd\u4f5c\u4e2d\uff0c\u9084\u6c92\u6709\u770b\u5230 FIB \u76f8\u95dc\u7684\uff0c\u5927\u90e8\u5206\u90fd\u662f bridge/vlan/macvlan \u7b49\u3002")),(0,i.kt)("h3",{id:"notifier-1"},"Notifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"int register_switchdev_notifier(struct notifier_block *nb);\nint unregister_switchdev_notifier(struct notifier_block *nb);\nint call_switchdev_notifiers(unsigned long val, struct net_device *dev,\n                             struct switchdev_notifier_info *info);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u57fa\u672c\u4e0a\u5c31\u662f\u7528\u8b93 hardware switch driver \u547c\u53eb\u7684\uff0c\u7576 switchdevb \u6709\u4efb\u4f55\u66f4\u52d5\u9700\u8981\u8b93\u4e0a\u5c64\u77e5\u9053\u6642\u5c31\u6703\u547c\u53eb ",(0,i.kt)("strong",{parentName:"li"},"call_switchdev_notifiers"),"\uff0c\u6b64\u6642\u6240\u6709\u900f\u904e ",(0,i.kt)("strong",{parentName:"li"},"register_switchdev_notifier")," \u8a3b\u518a\u7684 handler \u90fd\u6703\u53bb\u8655\u7406"),(0,i.kt)("li",{parentName:"ul"},"\u76ee\u524d\u6709\u900f\u904e\u7684 ",(0,i.kt)("strong",{parentName:"li"},"register_switchdev_notifier")," \u8a3b\u518a\u7684\u53ea\u6709 bridge(br.c), \u76ee\u7684\u662f\u7528\u4f86\u540c\u6b65 FIB \u8cc7\u8a0a\u3002")))}p.isMDXComponent=!0}}]);
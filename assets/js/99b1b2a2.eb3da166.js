"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[85387],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},k=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),k=o,f=p["".concat(s,".").concat(k)]||p[k]||u[k]||i;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=k;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}k.displayName="MDXCreateElement"},66298:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const i={title:"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0b)",date:new Date("2018-08-15T07:38:53.000Z"),tags:["Kubernetes","Linux","DNS","SourceCode","Docker"],description:"\u5728\u524d\u7bc7\u6587\u7ae0\u6709\u8ddf\u5927\u5bb6\u5206\u4eab\u904e\u5be6\u969b\u90e8\u5c6c\u4e0a\u9047\u5230\u7684 DNS \u554f\u984c\uff0c\u4e26\u4e14\u900f\u904e\u5be6\u9a57\u4f50\u8b49\u53bb\u89c0\u5bdf\u7d50\u679c, \u672c\u7bc7\u6587\u7ae0\u5247\u662f\u900f\u904e\u53e6\u5916\u4e00\u7a2e\u89c0\u9ede\u4f86\u89c0\u5bdf\u7d50\u679c,\u900f\u904e\u95b1\u8b80\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u89c0\u5bdf\u5230\u5e95 kubernetes \u518d\u5275\u5efa\u76f8\u95dc\u7684 Pod \u6642\u6703\u5982\u4f55\u53bb\u8655\u7406 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u7531\u65bc\u6574\u500b\u904e\u7a0b\u727d\u626f\u5230 kubernetes \u4ee5\u53ca CRI(Container Runtime Interface)\u7684\u64cd\u4f5c\uff0c\u800c\u6211\u5011\u9810\u8a2d\u4f7f\u7528\u7684\u5247\u662f Docker \u4f5c\u70ba\u5e95\u5c64\u5bb9\u5668\u7684\u64cd\u4f5c. \u672c\u7bc7\u6587\u7ae0\u6703\u91dd\u5c0d\u5f8c\u534a\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u6240\u8b02\u7684 docker(dockerd) \u672c\u8eab\u518d\u5275\u5efa\u5bb9\u5668\u7684\u6642\u5019\uff0c\u6703\u5982\u4f55\u8655\u7406\u5176 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u900f\u904e\u95b1\u8b80 docker-ce \u4ee5\u53ca libnetwork \u76f8\u95dc\u7684\u539f\u59cb\u78bc\uff0c\u4e0d\u4f46\u80fd\u5920\u66f4\u6e05\u695a\u7684\u91d0\u6e05\u5168\u90e8\u7684\u904b\u4f5c\u539f\u7406\uff0c\u4e5f\u80fd\u5920\u5b78\u7fd2\u5230 docker \u5e95\u5c64\u5be6\u8e10\u7684\u904e\u7a0b\u8207\u7cbe\u795e"},a="Preface",l={unversionedId:"techPost/2018/kubernetes-dns-iiii",id:"techPost/2018/kubernetes-dns-iiii",title:"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0b)",description:"\u5728\u524d\u7bc7\u6587\u7ae0\u6709\u8ddf\u5927\u5bb6\u5206\u4eab\u904e\u5be6\u969b\u90e8\u5c6c\u4e0a\u9047\u5230\u7684 DNS \u554f\u984c\uff0c\u4e26\u4e14\u900f\u904e\u5be6\u9a57\u4f50\u8b49\u53bb\u89c0\u5bdf\u7d50\u679c, \u672c\u7bc7\u6587\u7ae0\u5247\u662f\u900f\u904e\u53e6\u5916\u4e00\u7a2e\u89c0\u9ede\u4f86\u89c0\u5bdf\u7d50\u679c,\u900f\u904e\u95b1\u8b80\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u89c0\u5bdf\u5230\u5e95 kubernetes \u518d\u5275\u5efa\u76f8\u95dc\u7684 Pod \u6642\u6703\u5982\u4f55\u53bb\u8655\u7406 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u7531\u65bc\u6574\u500b\u904e\u7a0b\u727d\u626f\u5230 kubernetes \u4ee5\u53ca CRI(Container Runtime Interface)\u7684\u64cd\u4f5c\uff0c\u800c\u6211\u5011\u9810\u8a2d\u4f7f\u7528\u7684\u5247\u662f Docker \u4f5c\u70ba\u5e95\u5c64\u5bb9\u5668\u7684\u64cd\u4f5c. \u672c\u7bc7\u6587\u7ae0\u6703\u91dd\u5c0d\u5f8c\u534a\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u6240\u8b02\u7684 docker(dockerd) \u672c\u8eab\u518d\u5275\u5efa\u5bb9\u5668\u7684\u6642\u5019\uff0c\u6703\u5982\u4f55\u8655\u7406\u5176 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u900f\u904e\u95b1\u8b80 docker-ce \u4ee5\u53ca libnetwork \u76f8\u95dc\u7684\u539f\u59cb\u78bc\uff0c\u4e0d\u4f46\u80fd\u5920\u66f4\u6e05\u695a\u7684\u91d0\u6e05\u5168\u90e8\u7684\u904b\u4f5c\u539f\u7406\uff0c\u4e5f\u80fd\u5920\u5b78\u7fd2\u5230 docker \u5e95\u5c64\u5be6\u8e10\u7684\u904e\u7a0b\u8207\u7cbe\u795e",source:"@site/docs/techPost/2018/kubernetes-dns-iiii.md",sourceDirName:"techPost/2018",slug:"/techPost/2018/kubernetes-dns-iiii",permalink:"/docs/techPost/2018/kubernetes-dns-iiii",draft:!1,tags:[{label:"Kubernetes",permalink:"/docs/tags/kubernetes"},{label:"Linux",permalink:"/docs/tags/linux"},{label:"DNS",permalink:"/docs/tags/dns"},{label:"SourceCode",permalink:"/docs/tags/source-code"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",frontMatter:{title:"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0b)",date:"2018-08-15T07:38:53.000Z",tags:["Kubernetes","Linux","DNS","SourceCode","Docker"],description:"\u5728\u524d\u7bc7\u6587\u7ae0\u6709\u8ddf\u5927\u5bb6\u5206\u4eab\u904e\u5be6\u969b\u90e8\u5c6c\u4e0a\u9047\u5230\u7684 DNS \u554f\u984c\uff0c\u4e26\u4e14\u900f\u904e\u5be6\u9a57\u4f50\u8b49\u53bb\u89c0\u5bdf\u7d50\u679c, \u672c\u7bc7\u6587\u7ae0\u5247\u662f\u900f\u904e\u53e6\u5916\u4e00\u7a2e\u89c0\u9ede\u4f86\u89c0\u5bdf\u7d50\u679c,\u900f\u904e\u95b1\u8b80\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u89c0\u5bdf\u5230\u5e95 kubernetes \u518d\u5275\u5efa\u76f8\u95dc\u7684 Pod \u6642\u6703\u5982\u4f55\u53bb\u8655\u7406 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u7531\u65bc\u6574\u500b\u904e\u7a0b\u727d\u626f\u5230 kubernetes \u4ee5\u53ca CRI(Container Runtime Interface)\u7684\u64cd\u4f5c\uff0c\u800c\u6211\u5011\u9810\u8a2d\u4f7f\u7528\u7684\u5247\u662f Docker \u4f5c\u70ba\u5e95\u5c64\u5bb9\u5668\u7684\u64cd\u4f5c. \u672c\u7bc7\u6587\u7ae0\u6703\u91dd\u5c0d\u5f8c\u534a\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u6240\u8b02\u7684 docker(dockerd) \u672c\u8eab\u518d\u5275\u5efa\u5bb9\u5668\u7684\u6642\u5019\uff0c\u6703\u5982\u4f55\u8655\u7406\u5176 DNS \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u900f\u904e\u95b1\u8b80 docker-ce \u4ee5\u53ca libnetwork \u76f8\u95dc\u7684\u539f\u59cb\u78bc\uff0c\u4e0d\u4f46\u80fd\u5920\u66f4\u6e05\u695a\u7684\u91d0\u6e05\u5168\u90e8\u7684\u904b\u4f5c\u539f\u7406\uff0c\u4e5f\u80fd\u5920\u5b78\u7fd2\u5230 docker \u5e95\u5c64\u5be6\u8e10\u7684\u904e\u7a0b\u8207\u7cbe\u795e"},sidebar:"techPost",previous:{title:"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0a)",permalink:"/docs/techPost/2018/kubernetes-dns-iii"},next:{title:"[Kubernetes] DNS setting in your Pod",permalink:"/docs/techPost/2018/kubernetes-dns"}},s={},c=[{value:"ContainerStart",id:"containerstart",level:2},{value:"containerStart",id:"containerstart-1",level:2},{value:"initializeNetworking",id:"initializenetworking",level:2},{value:"allocateNetwork",id:"allocatenetwork",level:2},{value:"connectToNetwork",id:"connecttonetwork",level:2},{value:"NewSandbox",id:"newsandbox",level:2},{value:"setupDNS",id:"setupdns",level:2},{value:"FilterResolveDNS",id:"filterresolvedns",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"preface"},"Preface"),(0,o.kt)("p",null,"\u6b64\u7bc7\u6587\u7ae0\u662f Kubernetes Pod-DNS \u7cfb\u5217\u6587\u7ae0\u6700\u5f8c\u4e00\u7bc7\n\u6b64\u7cfb\u5217\u6587\u6703\u5f9e\u4f7f\u7528\u8005\u7684\u7528\u6cd5\u5230\u4e00\u4e9b\u554f\u984c\u7684\u767c\u6398\uff0c\u6700\u5f8c\u900f\u904e\u95b1\u8b80\u7a0b\u5f0f\u78bc\u7684\u65b9\u5f0f\u53bb\u5206\u6790\u9019\u4e9b\u554f\u984c"),(0,o.kt)("p",null,"\u76f8\u95dc\u7684\u6587\u7ae0\u9023\u7d50\u5982\u4e0b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/kubernetes-dns.html"},"[Kubernetes] DNS setting in your Pod")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/kubernetes-dns-ii.html"},"[Kubernetes] DNS Setting with Dockerd")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.hwchiu.com/kubernetes-dns-iii.html"},"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0a)"))),(0,o.kt)("h1",{id:"\u6b63\u6587"},"\u6b63\u6587"),(0,o.kt)("p",null,"\u518d\u4e0a\u7bc7\u6587\u7ae0 - ",(0,o.kt)("a",{parentName:"p",href:"https://www.hwchiu.com/kubernetes-dns-iii.html"},"[Kubernetes] DNS Setting with Dockerd(\u539f\u59cb\u78bc\u5206\u6790\u4e0a)")," \u4e2d\uff0c\u6211\u5011\u900f\u904e\u95b1\u8b80 ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes")," \u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u5df2\u7d93\u7406\u89e3\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes")," \u672c\u8eab\u662f\u600e\u9ebc\u53bb\u8655\u7406 ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u7684\u8a2d\u5b9a\u3002 \u4f46\u662f\u537b\u7559\u4e0b\u4e86\u4e00\u500b\u8b0e\u5718\u5c31\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"dockerd")," \u5230\u5e95\u5982\u4f55\u8655\u7406\u6bcf\u500b\u5bb9\u5668\u672c\u8eab\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u8a2d\u5b9a?"),(0,o.kt)("p",null,"\u91cd\u65b0\u8907\u7fd2\u4e00\u6b21\u4e4b\u524d\u89c0\u5bdf\u5230\u7684\u7d50\u679c"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"node\\dockerd"),(0,o.kt)("th",{parentName:"tr",align:null},"\u6709\u8a2d\u5b9a DNS"),(0,o.kt)("th",{parentName:"tr",align:null},"\u6c92\u8a2d\u5b9a DNS"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6709\u6578\u503c"),(0,o.kt)("td",{parentName:"tr",align:null},"node"),(0,o.kt)("td",{parentName:"tr",align:null},"node")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"\u6c92\u6709\u6578\u503c"),(0,o.kt)("td",{parentName:"tr",align:null},"dockerd"),(0,o.kt)("td",{parentName:"tr",align:null},"8.8.8.8")))),(0,o.kt)("p",null,"\u9019\u908a\u76f4\u63a5\u958b\u9580\u898b\u5c71\u7684\u8aaa\u660e\u7d50\u8ad6\n\u7576\u6bcf\u6b21\u5275\u5efa\u5bb9\u5668\u6642\uff0c\u5927\u62b5\u4e0a\u90fd\u6703\u9075\u5faa\u4e0b\u5217\u908f\u8f2f"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5148\u6839\u64da\u53c3\u6578",(0,o.kt)("inlineCode",{parentName:"li"},"resolveConf")," \u4f86\u8b80\u53d6\u7576\u524d ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u5168\u90e8\u8a2d\u5b9a"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u53c3\u6578\uff0c\u5c31\u6703\u5168\u9762\u4f7f\u7528\u9019\u908a\u7684\u8a2d\u5b9a\uff0c\u5b8c\u5168\u5ffd\u7565(1)\u8f09\u5165\u7684\u8a2d\u5b9a"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6c92\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u8a71\uff0c\u5c31\u6703\u91dd\u5c0d (1) \u8f09\u5165\u7684\u8a2d\u5b9a\u9032\u884c\u4e00\u6b21\u904e\u6ffe",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u91dd\u5c0d 127.0.0.1/8 \u4e4b\u985e\u7684\u9032\u884c\u904e\u6ffe"),(0,o.kt)("li",{parentName:"ul"},"\u904e\u6ffe\u5f8c\u82e5\u767c\u73fe\u662f\u7a7a\u7684\uff0c\u5247\u88dc\u4e0a 8.8.8.8/8.8.4.4")))),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u6211\u5011\u5c31\u6703\u900f\u904e\u76f4\u63a5\u95b1\u8b80 ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-ce")," \u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u7406\u89e3\u9019\u500b\u554f\u984c"),(0,o.kt)("h1",{id:"dockerd"},"dockerd"),(0,o.kt)("p",null,"\u5982\u540c\u524d\u7bc7\u6587\u7ae0\u6240\u8aaa\uff0c\u8981\u900f\u904e\u95b1\u8b80\u539f\u59cb\u78bc\u627e\u5c0b\u554f\u984c\u7684\u6700\u5927\u56f0\u96e3\u9ede\u5c31\u662f\u8d77\u9ede\uff0c\u8981\u5148\u60f3\u8fa6\u6cd5\u627e\u5230\u8207\u76ee\u6a19\u554f\u984c\u6709\u95dc\u7684\u9032\u5165\u9ede\uff0c\u7136\u5f8c\u5f9e\u8a72\u9032\u5165\u9ede\u958b\u59cb\u6316\u6398\u8ddf\u76ee\u6a19\u6709\u95dc\u7684\u7a0b\u5f0f\u78bc\u3002"),(0,o.kt)("p",null,"\u9019\u908a\u4f7f\u7528\u4e0a\u6b21\u7684\u90a3\u5f35\u6d41\u7a0b\u5716\uff0c\u5c07\u5176\u4fee\u6539\u4e00\u4e0b\u4f86\u7b26\u5408\u672c\u7bc7\u7684\u65b9\u5411\u4f86\u770b\u3002"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u7576 ",(0,o.kt)("inlineCode",{parentName:"p"},"kubelet")," \u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"CRI (Contaienr Runtime Interface)")," \u5c07\u5bb9\u5668\u76f8\u95dc\u7684\u64cd\u4f5c\u8acb\u6c42\u9001\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"docekrd")," \u5f8c\u5c31\u6703\u958b\u59cb\u9032\u884c\u5bb9\u5668\u7684\u5275\u898b/\u522a\u9664/\u4fee\u6539"),(0,o.kt)("p",null,"\u5047\u8a2d\u6211\u5011\u8981\u9032\u884c\u7684\u5275\u5efa\u5bb9\u5668\u9019\u500b\u64cd\u4f5c\uff0c\u4ee5 ",(0,o.kt)("inlineCode",{parentName:"p"},"dockerd")," \u7684\u89d2\u5ea6\u4f86\u8aaa\u7528\u6bd4\u8f03\u7c21\u55ae\u7684\u65b9\u5f0f\u4f86\u770b\u5927\u6982\u5c31\u662f"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5275\u5efa\u5bb9\u5668"),(0,o.kt)("li",{parentName:"ol"},"\u5c0d\u8a72\u5bb9\u5668\u8a2d\u5b9a\u76f8\u95dc\u898f\u5247",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u7db2\u8def\u76f8\u95dc\u529f\u80fd"),(0,o.kt)("li",{parentName:"ul"},"AppArmor \u76f8\u95dc"),(0,o.kt)("li",{parentName:"ul"},"...\u7b49\u5404\u5f0f\u5404\u6a23\u7684\u529f\u80fd")))),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/HBxFvzA.png",alt:"Imgur"})),(0,o.kt)("p",null,"\u4e0a\u9762\u53ea\u662f\u4e00\u500b\u6bd4\u8f03\u62bd\u8c61\u7684\u65b9\u5f0f\u53bb\u63cf\u8ff0\u6574\u500b\u904e\u7a0b\uff0c\u6211\u5011\u60f3\u8981\u77ad\u89e3\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"DNS"),"\u76f8\u95dc\u7684\u8a2d\u5b9a\u90fd\u5728\u6240\u8b02\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"Config Network")," \u88e1\u9762\u3002"),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5e6b\u5927\u5bb6\u7bc0\u7701\u6642\u9593\uff0c\u76f4\u63a5\u5c07\u8a73\u7d30\u7528\u5230\u7684\u7a0b\u5f0f\u78bc\u6d41\u7a0b\u5217\u5728\u4e0b\u5217\u5716\u8868\u4e2d\n",(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/AElxokT.png",alt:"Imgur"})),(0,o.kt)("p",null,"\u6211\u5011\u63a5\u4e0b\u4f86\u5c31\u76f4\u63a5\u5f9e\u6574\u500b\u5275\u9020\u5bb9\u5668\u7684\u8d77\u9ede ",(0,o.kt)("inlineCode",{parentName:"p"},"ContaienrStart")," \u4f86\u958b\u59cb\u770b\u5427!"),(0,o.kt)("h1",{id:"\u7a0b\u5f0f\u78bc\u7814\u7a76"},"\u7a0b\u5f0f\u78bc\u7814\u7a76"),(0,o.kt)("h2",{id:"containerstart"},"ContainerStart"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"ContaienrStart https://github.com/docker/docker-ce/blob/da1e08d48493406ce290a1b99269e52879af5b0e/components/engine/daemon/start.go#L18 start.go",ContaienrStart:!0,"https://github.com/docker/docker-ce/blob/da1e08d48493406ce290a1b99269e52879af5b0e/components/engine/daemon/start.go#L18":!0,"start.go":!0},"\nfunc (daemon *Daemon) ContainerStart(name string, hostConfig *containertypes.HostConfig, checkpoint string, checkpointDir string) error {\n...\n    // check if hostConfig is in line with the current system settings.\n    // It may happen cgroups are umounted or the like.\n    if _, err = daemon.verifyContainerSettings(container.OS, container.HostConfig, nil, false); err != nil {\n        return errdefs.InvalidParameter(err)\n    }\n    // Adapt for old containers in case we have updates in this function and\n    // old containers never have chance to call the new function in create stage.\n    if hostConfig != nil {\n        if err := daemon.adaptContainerSettings(container.HostConfig, false); err != nil {\n            return errdefs.InvalidParameter(err)\n        }\n    }\n    return daemon.containerStart(container, checkpoint, checkpointDir, true)\n}\n")),(0,o.kt)("p",null,"\u9019\u908a\u7684\u908f\u8f2f\u57fa\u672c\u4e0a\u5c31\u662f\u8655\u7406\u4e00\u4e9b ",(0,o.kt)("inlineCode",{parentName:"p"},"Container")," \u76f8\u95dc\u8a2d\u5b9a\uff0c\u6700\u5f8c\u76f4\u63a5\u547c\u53eb\u4e00\u500b\u79c1\u6709\u51fd\u5f0f ",(0,o.kt)("inlineCode",{parentName:"p"},"containerStart")," \u4f86\u9032\u884c\u66f4\u9032\u4e00\u6b65\u7684\u8655\u7406"),(0,o.kt)("h2",{id:"containerstart-1"},"containerStart"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"containerStart https://github.com/docker/docker-ce/blob/da1e08d48493406ce290a1b99269e52879af5b0e/components/engine/daemon/start.go#L102 start.go",containerStart:!0,"https://github.com/docker/docker-ce/blob/da1e08d48493406ce290a1b99269e52879af5b0e/components/engine/daemon/start.go#L102":!0,"start.go":!0},"\n// containerStart prepares the container to run by setting up everything the\n// container needs, such as storage and networking, as well as links\n// between containers. The container is left waiting for a signal to\n// begin running.\nfunc (daemon *Daemon) containerStart(container *container.Container, checkpoint string, checkpointDir string, resetRestartManager bool) (err error) {\n\n....\n    if err := daemon.conditionalMountOnStart(container); err != nil {\n        return err\n    }\n\n    if err := daemon.initializeNetworking(container); err != nil {\n        return err\n    }\n\n....\n    if daemon.saveApparmorConfig(container); err != nil {\n        return err\n    }\n...\n    err = daemon.containerd.Create(context.Background(), container.ID, spec, createOptions)\n    if err != nil {\n        return translateContainerdStartErr(container.Path, container.SetExitCode, err)\n    }\n\n    // TODO(mlaventure): we need to specify checkpoint options here\n    pid, err := daemon.containerd.Start(context.Background(), container.ID, checkpointDir,\n        container.StreamConfig.Stdin() != nil || container.Config.Tty,\n        container.InitializeStdio)\n...\n\n    container.SetRunning(pid, true)\n    container.HasBeenManuallyStopped = false\n    container.HasBeenStartedBefore = true\n    daemon.setStateCounter(container)\n\n    daemon.initHealthMonitor(container)\n...\n}\n")),(0,o.kt)("p",null,"\u9019\u500b\u51fd\u5f0f\u975e\u5e38\u7684\u91cd\u8981\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u8a72\u51fd\u5f0f\u7684\u8a3b\u89e3\n// containerStart prepares the container to run by setting up everything the\n// container needs, such as storage and networking, as well as links\n// between containers. The container is left waiting for a signal to\n// begin running."),(0,o.kt)("p",null,"\u518d\u9019\u500b\u51fd\u5f0f\u5167\u6703\u5275\u5efa\u597d\u76f8\u95dc\u7684\u5bb9\u5668\uff0c\u4e26\u4e14\u6703\u5c07\u8a72\u5bb9\u5668\u7528\u5230\u7684\u76f8\u95dc\u8cc7\u6e90(\u5132\u5b58/\u7db2\u8def)\u7b49\u90fd\u6e96\u5099\u597d\n\uff0c\u7531\u65bc\u6211\u5011\u8981\u89c0\u5bdf\u7684\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u76f8\u95dc\u7684\u8cc7\u8a0a\uff0c\u6240\u4ee5\u6211\u5011\u8981\u7e7c\u7e8c\u5f80 ",(0,o.kt)("inlineCode",{parentName:"p"},"initializeNetworking")," \u7684\u65b9\u5411\u5f80\u4e0b\u8ffd\u3002"),(0,o.kt)("h2",{id:"initializenetworking"},"initializeNetworking"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"initializeNetworking https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L916 container_operations.go",initializeNetworking:!0,"https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L916":!0,"container_operations.go":!0},"\nfunc (daemon *Daemon) initializeNetworking(container *container.Container) error {\n    var err error\n\n    if container.HostConfig.NetworkMode.IsContainer() {\n...\n    }\n\n    if container.HostConfig.NetworkMode.IsHost() {\n...\n    }\n\n    if err := daemon.allocateNetwork(container); err != nil {\n        return err\n    }\n\n    return container.BuildHostnameFile()\n}\n\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u90fd\u662f\u6839\u64da\u5404\u7a2e ",(0,o.kt)("inlineCode",{parentName:"p"},"Networking")," \u76f8\u95dc\u7684\u8a2d\u5b9a\u4f86\u8655\u7406\uff0c\u524d\u9762\u5169\u500b\u7684\u5224\u65b7\u8655\u7406\u5247\u662f\u6839\u64da\u7576\u521d\u5275\u5efa\u8a72\u5bb9\u5668\u6642\uff0c\u6709\u6c92\u6709\u6307\u4ee4 ",(0,o.kt)("inlineCode",{parentName:"p"},"--network=xxxx")," \u4f86\u7279\u5225\u8655\u7406\uff0c\u82e5\u6709\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"p"},"--network=host")," \u6216\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"--network=container:xxxx")," \u6703\u6709\u4e00\u4e9b\u984d\u5916\u7684\u8655\u7406\u3002"),(0,o.kt)("p",null,"\u56e0\u70ba\u9019\u4e9b\u60c5\u5883\u8ddf\u6211\u5011\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"Kubernetes")," \u7684\u4f7f\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u6211\u5011\u4e0d\u6703\u8d70\u5230\u9019\u908a\u7684\u5224\u65b7\uff0c\u800c\u662f\u76f4\u63a5\u6703\u8d70\u5230\u4e0b\u9762\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"allocateNetwork")," \u4f86\u958b\u59cb\u6e96\u5099\u7db2\u8def\u76f8\u95dc\u7684\u8cc7\u8a0a\u3002"),(0,o.kt)("h2",{id:"allocatenetwork"},"allocateNetwork"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"allocateNetwork https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L501 container_operations.go",allocateNetwork:!0,"https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L501":!0,"container_operations.go":!0},"func (daemon *Daemon) allocateNetwork(container *container.Container) error {\n...\n\n    // always connect default network first since only default\n    // network mode support link and we need do some setting\n    // on sandbox initialize for link, but the sandbox only be initialized\n    // on first network connecting.\n    defaultNetName := runconfig.DefaultDaemonNetworkMode().NetworkName()\n    if nConf, ok := container.NetworkSettings.Networks[defaultNetName]; ok {\n        cleanOperationalData(nConf)\n        if err := daemon.connectToNetwork(container, defaultNetName, nConf.EndpointSettings, updateSettings); err != nil {\n            return err\n        }\n\n    }\n...\n    return nil\n}\n")),(0,o.kt)("p",null,"\u518d\u9019\u500b\u51fd\u5f0f\u5167\uff0c\u9996\u5148\u6703\u5617\u8a66\u4f7f\u7528\u9810\u8a2d\u7684\u7db2\u8def\u578b\u614b\uff0c\u9019\u908a\u6307\u7684\u5c31\u662f\u5728\u5275\u5efa\u5bb9\u5668\u6240\u4e0b\u7684\u53c3\u6578 ",(0,o.kt)("inlineCode",{parentName:"p"},"--net=xxx"),"\uff0c\u800c\u9810\u8a2d\u7684\u985e\u578b\u5c31\u662f ",(0,o.kt)("inlineCode",{parentName:"p"},"bridge"),".\n\u6240\u4ee5\u63a5\u4e0b\u4f86\u5c31\u5f88\u76f4\u89ba\u7684\u53bb\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"p"},"connectToNetwork")," \u4f86\u9032\u884c\u4e0b\u4e00\u968e\u6bb5\u7684\u8655\u7406"),(0,o.kt)("h2",{id:"connecttonetwork"},"connectToNetwork"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"connectToNetwork https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L690 container_operations.go",connectToNetwork:!0,"https://github.com/docker/docker-ce/blob/6e92e5909666b3b9c2aecebf582e8af85f228899/components/engine/daemon/container_operations.go#L690":!0,"container_operations.go":!0},"func (daemon *Daemon) connectToNetwork(container *container.Container, idOrName string, endpointConfig *networktypes.EndpointSettings, updateSettings bool) (err error) {\n    start := time.Now()\n    if container.HostConfig.NetworkMode.IsContainer() {\n        return runconfig.ErrConflictSharedNetwork\n    }\n    if containertypes.NetworkMode(idOrName).IsBridge() &&\n        daemon.configStore.DisableBridge {\n        container.Config.NetworkDisabled = true\n        return nil\n    }\n\n....\n    sb := daemon.getNetworkSandbox(container)\n    createOptions, err := buildCreateEndpointOptions(container, n, endpointConfig, sb, daemon.configStore.DNS)\n    if err != nil {\n        return err\n    }\n....\n    if sb == nil {\n        options, err := daemon.buildSandboxOptions(container)\n        if err != nil {\n            return err\n        }\n        sb, err = controller.NewSandbox(container.ID, options...)\n        if err != nil {\n            return err\n        }\n\n        updateSandboxNetworkSettings(container, sb)\n    }\n....\n    return nil\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"connectToNetwork")," \u4e26\u4e0d\u662f\u53ea\u6709\u5275\u5efa\u65b0\u7684\u5bb9\u5668\u6642\u624d\u6703\u4f7f\u7528\uff0c\u6240\u4ee5\u9019\u908a\u9084\u6703\u9032\u884c\u4e00\u4e9b\u76f8\u95dc\u7684\u53c3\u6578\u6aa2\u67e5\u3002\n\u7531\u65bc\u6211\u5011\u662f\u7b2c\u4e00\u6b21\u4e32\u4ef6\u8a72\u5bb9\u5668\uff0c\u6240\u4ee5\u5bb9\u5668\u6240\u5c0d\u61c9\u7684\u6c99\u76d2 ",(0,o.kt)("inlineCode",{parentName:"p"},"SandBox")," \u6703\u662f\u7a7a\u7684\u3002\n\u6700\u5f8c\u6839\u64da\u7a7a\u7684\u6c99\u76d2\uff0c\u6c7a\u5b9a\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"controller.NewSanbox")," \u53bb\u5275\u5efa\u4e00\u500b\u6c99\u76d2\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9019\u908a\u6709\u4e00\u500b ",(0,o.kt)("inlineCode",{parentName:"p"},"buildSandboxOptions")," \u6703\u628a\u5176\u4ed6\u7528\u5230\u7684\u53c3\u6578\u90fd\u91cd\u65b0\u6574\u7406\u4e00\u6b21\uff0c\u7136\u5f8c\u50b3\u5165\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"controller.NewSandbox")," \u9019\u908a\u53bb\u8655\u7406\u3002"),(0,o.kt)("h2",{id:"newsandbox"},"NewSandbox"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"NewSandbox https://github.com/docker/libnetwork/blob/f30a35b091cc2a431ef9856c75c343f75bb5f2e2/controller.go#L1126 controller.go",NewSandbox:!0,"https://github.com/docker/libnetwork/blob/f30a35b091cc2a431ef9856c75c343f75bb5f2e2/controller.go#L1126":!0,"controller.go":!0},'func (c *controller) NewSandbox(containerID string, options ...SandboxOption) (Sandbox, error) {\n    if containerID == "" {\n        return nil, types.BadRequestErrorf("invalid container ID")\n    }\n\n    var sb *sandbox\n...\n\n    // Create sandbox and process options first. Key generation depends on an option\n    if sb == nil {\n        sb = &sandbox{\n            id:                 sandboxID,\n            containerID:        containerID,\n            endpoints:          []*endpoint{},\n            epPriority:         map[string]int{},\n            populatedEndpoints: map[string]struct{}{},\n            config:             containerConfig{},\n            controller:         c,\n            extDNS:             []extDNSEntry{},\n        }\n    }\n\n    sb.processOptions(options...)\n...\n    if err = sb.setupResolutionFiles(); err != nil {\n        return nil, err\n    }\n\n\n    return sb, nil\n}\n')),(0,o.kt)("p",null,"\u7279\u5225\u6ce8\u610f\u4e00\u4e0b\uff0c\u7576\u6211\u5011\u5230\u9019\u908a\u57f7\u884c\u76f8\u95dc\u51fd\u5f0f\u7684\u6642\u5019\uff0c\u6211\u5011\u7684\u5c08\u6848\u5df2\u7d93\u5f9e",(0,o.kt)("inlineCode",{parentName:"p"},"docker-ce"),"\u9077\u79fb\u5230",(0,o.kt)("inlineCode",{parentName:"p"},"libnetwork"),"\u4e86\u3002"),(0,o.kt)("p",null,"\u9019\u500b\u51fd\u5f0f\u975e\u5e38\u7684\u9577\uff0c\u63cf\u8ff0\u7684\u5275\u5efa\u65b0\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"Sandbox")," \u671f\u9593\u9700\u8981\u6ce8\u610f\u7684\u6240\u6709\u4e8b\u9805\uff0c\u9019\u908a\u9996\u5148\u6703\u900f\u904e",(0,o.kt)("inlineCode",{parentName:"p"},"sb.processOptions")," \u53bb\u8a2d\u5b9a\u76f8\u95dc\u8b8a\u6578\u7684\u6578\u503c\uff0c\u9019\u908a\u8981\u7279\u5225\u6ce8\u610f\u7684\u662f\u5176\u5be6\u6bcf\u4e00\u500b ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," \u672c\u8eab\u662f\u5c0d\u61c9\u5230\u4e00\u500b ",(0,o.kt)("inlineCode",{parentName:"p"},"function pointer"),"\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u6211\u5011\u7576\u521d\u6709\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"dockerd")," \u53bb\u8a2d\u5b9a\u76f8\u95dc\u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u8a2d\u5b9a\u7684\u8a71\uff0c\u9019\u908a\u5176\u5be6\u5be6\u969b\u4e0a\u6703\u8ce6\u503c\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"sb.config.dnsList"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"sb.config.dnsSearchList")," \u4ee5\u53ca ",(0,o.kt)("inlineCode",{parentName:"p"},"sb.config.dnsOptionsList")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"setupResolutionFiles https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/sandbox_dns_unix.go#L61 sandbox_dns_unix.go",setupResolutionFiles:!0,"https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/sandbox_dns_unix.go#L61":!0,"sandbox_dns_unix.go":!0},"func (sb *sandbox) setupResolutionFiles() error {\n    if err := sb.buildHostsFile(); err != nil {\n        return err\n    }\n\n    if err := sb.updateParentHosts(); err != nil {\n        return err\n    }\n\n    return sb.setupDNS()\n}\n")),(0,o.kt)("p",null,"\u9019\u908a\u5176\u5be6\u975e\u5e38\u7c21\u55ae\uff0c\u6211\u5011\u7684\u4e3b\u8981\u76ee\u6a19\u7d42\u65bc\u51fa\u73fe\u4e86!!!\n",(0,o.kt)("inlineCode",{parentName:"p"},"setupDNS")," \u610f\u601d\u5c31\u5982\u540c\u540d\u7a31\u4e00\u6a23\u76f4\u63a5\uff0c\u5c31\u662f\u8a2d\u5b9a\u8a72\u6c99\u76d2\u5167",(0,o.kt)("inlineCode",{parentName:"p"},"DNS"),"\u7684\u8a2d\u5b9a\u3002"),(0,o.kt)("h2",{id:"setupdns"},"setupDNS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"setupDNS https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/sandbox_dns_unix.go#L181 sandbox_dns_unix.go",setupDNS:!0,"https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/sandbox_dns_unix.go#L181":!0,"sandbox_dns_unix.go":!0},'func (sb *sandbox) setupDNS() error {\n    var newRC *resolvconf.File\n....\n\n    originResolvConfPath := sb.config.originResolvConfPath\n    if originResolvConfPath == "" {\n        // if not specified fallback to default /etc/resolv.conf\n        originResolvConfPath = resolvconf.DefaultResolvConf\n    }\n    currRC, err := resolvconf.GetSpecific(originResolvConfPath)\n    if err != nil {\n        if !os.IsNotExist(err) {\n            return err\n        }\n        // it\'s ok to continue if /etc/resolv.conf doesn\'t exist, default resolvers (Google\'s Public DNS)\n        // will be used\n        currRC = &resolvconf.File{}\n        logrus.Infof("/etc/resolv.conf does not exist")\n    }\n\n    if len(sb.config.dnsList) > 0 || len(sb.config.dnsSearchList) > 0 || len(sb.config.dnsOptionsList) > 0 {\n        var (\n            err            error\n            dnsList        = resolvconf.GetNameservers(currRC.Content, types.IP)\n            dnsSearchList  = resolvconf.GetSearchDomains(currRC.Content)\n            dnsOptionsList = resolvconf.GetOptions(currRC.Content)\n        )\n        if len(sb.config.dnsList) > 0 {\n            dnsList = sb.config.dnsList\n        }\n        if len(sb.config.dnsSearchList) > 0 {\n            dnsSearchList = sb.config.dnsSearchList\n        }\n        if len(sb.config.dnsOptionsList) > 0 {\n            dnsOptionsList = sb.config.dnsOptionsList\n        }\n        newRC, err = resolvconf.Build(sb.config.resolvConfPath, dnsList, dnsSearchList, dnsOptionsList)\n        if err != nil {\n            return err\n        }\n        // After building the resolv.conf from the user config save the\n        // external resolvers in the sandbox. Note that --dns 127.0.0.x\n        // config refers to the loopback in the container namespace\n        sb.setExternalResolvers(newRC.Content, types.IPv4, false)\n    } else {\n        // If the host resolv.conf file has 127.0.0.x container should\n        // use the host resolver for queries. This is supported by the\n        // docker embedded DNS server. Hence save the external resolvers\n        // before filtering it out.\n        sb.setExternalResolvers(currRC.Content, types.IPv4, true)\n\n        // Replace any localhost/127.* (at this point we have no info about ipv6, pass it as true)\n        if newRC, err = resolvconf.FilterResolvDNS(currRC.Content, true); err != nil {\n            return err\n        }\n        // No contention on container resolv.conf file at sandbox creation\n        if err := ioutil.WriteFile(sb.config.resolvConfPath, newRC.Content, filePerm); err != nil {\n            return types.InternalErrorf("failed to write unhaltered resolv.conf file content when setting up dns for sandbox %s: %v", sb.ID(), err)\n        }\n    }\n\n    // Write hash\n    if err := ioutil.WriteFile(sb.config.resolvConfHashFile, []byte(newRC.Hash), filePerm); err != nil {\n        return types.InternalErrorf("failed to write resolv.conf hash file when setting up dns for sandbox %s: %v", sb.ID(), err)\n    }\n\n    return nil\n}\n')),(0,o.kt)("p",null,"\u9019\u500b\u51fd\u5f0f\u6703\u91dd\u5c0d\u4e00\u4e9b\u8ddf ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u76f8\u95dc\u7684\u53c3\u6578\u4f86\u9032\u884c\u8655\u7406\uff0c\u5305\u542b\u4e86"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"dnsServer"),(0,o.kt)("li",{parentName:"ol"},"dnsSearch"),(0,o.kt)("li",{parentName:"ol"},"dnsOptions"),(0,o.kt)("li",{parentName:"ol"},"resolveConf")),(0,o.kt)("p",null,"\u9019\u908a\u7684\u904b\u4f5c\u908f\u8f2f\u5982\u4e0b"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5148\u6839\u64da\u53c3\u6578",(0,o.kt)("inlineCode",{parentName:"li"},"resolveConf"),"\u4f86\u8b80\u53d6\u7576\u524d ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u5168\u90e8\u8a2d\u5b9a"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u53c3\u6578\uff0c\u5c31\u6703\u5168\u9762\u4f7f\u7528\u9019\u908a\u7684\u8a2d\u5b9a\uff0c\u5b8c\u5168\u5ffd\u7565(1)\u8f09\u5165\u7684\u8a2d\u5b9a\n2.1 \u9019\u908a\u6700\u5f8c\u6703\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"li"},"resolvconf.Build")," \u5c07\u53c3\u6578\u7684\u8a2d\u5b9a\u76f4\u63a5\u8986\u5beb\u5230\u5bb9\u5668\u5167\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"/etc/resolv.conf")),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6c92\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u8a71\uff0c\u5c31\u6703\u91dd\u5c0d (1) \u8f09\u5165\u7684\u8a2d\u5b9a\u9032\u884c\u4e00\u6b21\u904e\u6ffe\n3.1 \u91dd\u5c0d 127.0.0.1/8 \u4e4b\u985e\u7684\u9032\u884c\u904e\u6ffe ",(0,o.kt)("inlineCode",{parentName:"li"},"FilterResolveDNS"),"\n3.2 \u904e\u6ffe\u5f8c\u82e5\u767c\u73fe\u662f\u7a7a\u7684\uff0c\u5247\u88dc\u4e0a 8.8.8.8/8.8.4.4")),(0,o.kt)("p",null,"\u9019\u6a23\u5c31\u4f86\u770b\u4e00\u4e0b ",(0,o.kt)("inlineCode",{parentName:"p"},"FilterResolveDNS")," \u600e\u9ebc\u8655\u7406 ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")),(0,o.kt)("h2",{id:"filterresolvedns"},"FilterResolveDNS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-FilterResolveDNS",metastring:"https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/resolvconf/resolvconf.go resolvconf.go","https://github.com/docker/libnetwork/blob/c3a682c10b554b2ff2fac8ca134ddb9047ffdd93/resolvconf/resolvconf.go":!0,"resolvconf.go":!0},'\n// FilterResolvDNS cleans up the config in resolvConf.  It has two main jobs:\n// 1. It looks for localhost (127.*|::1) entries in the provided\n//    resolv.conf, removing local nameserver entries, and, if the resulting\n//    cleaned config has no defined nameservers left, adds default DNS entries\n// 2. Given the caller provides the enable/disable state of IPv6, the filter\n//    code will remove all IPv6 nameservers if it is not enabled for containers\n//\nfunc FilterResolvDNS(resolvConf []byte, ipv6Enabled bool) (*File, error) {\n    cleanedResolvConf := localhostNSRegexp.ReplaceAll(resolvConf, []byte{})\n    // if IPv6 is not enabled, also clean out any IPv6 address nameserver\n    if !ipv6Enabled {\n        cleanedResolvConf = nsIPv6Regexp.ReplaceAll(cleanedResolvConf, []byte{})\n    }\n    // if the resulting resolvConf has no more nameservers defined, add appropriate\n    // default DNS servers for IPv4 and (optionally) IPv6\n    if len(GetNameservers(cleanedResolvConf, types.IP)) == 0 {\n        logrus.Infof("No non-localhost DNS nameservers are left in resolv.conf. Using default external servers: %v", defaultIPv4Dns)\n        dns := defaultIPv4Dns\n        if ipv6Enabled {\n            logrus.Infof("IPv6 enabled; Adding default IPv6 external servers: %v", defaultIPv6Dns)\n            dns = append(dns, defaultIPv6Dns...)\n        }\n        cleanedResolvConf = append(cleanedResolvConf, []byte("\\n"+strings.Join(dns, "\\n"))...)\n    }\n    hash, err := ioutils.HashData(bytes.NewReader(cleanedResolvConf))\n    if err != nil {\n        return nil, err\n    }\n    return &File{Content: cleanedResolvConf, Hash: hash}, nil\n}\n\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u9996\u5148\u5148\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"li"},"ReplaceAll")," \u628a\u6240\u6709 ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost 127.0.0.0/8")," \u76f8\u95dc\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"IP")," \u90fd\u6e05\u7a7a\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u6e05\u7a7a\u4e4b\u5f8c\uff0c\u82e5\u767c\u73fe\u9019\u6642\u5019\u6c92\u6709 ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u8a71\uff0c\u76f4\u63a5\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"li"},"dns := defaultIPv4Dns")," \u88dc\u4e0a\u9810\u8a2d\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," (8.8.8.8/8.8.4.4)")),(0,o.kt)("h1",{id:"summary"},"summary"),(0,o.kt)("p",null,"\u7576\u6bcf\u6b21\u5275\u5efa\u65b0\u5bb9\u5668\u6642\uff0c\u6700\u5f8c\u6703\u4f9d\u8cf4\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"libnetwork")," \u5167\u8ddf ",(0,o.kt)("inlineCode",{parentName:"p"},"DNS")," \u76f8\u95dc\u7684\u53c3\u6578\u4f86\u8a2d\u5b9a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u53c3\u6578\uff0c\u5c31\u6703\u5168\u9762\u4f7f\u7528\u9019\u908a\u7684\u8a2d\u5b9a\uff0c\u5b8c\u5168\u5ffd\u7565(1)\u8f09\u5165\u7684\u8a2d\u5b9a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u9019\u908a\u6700\u5f8c\u6703\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"li"},"resolvconf.Build")," \u5c07\u53c3\u6578\u7684\u8a2d\u5b9a\u76f4\u63a5\u8986\u5beb\u5230\u5bb9\u5668\u5167\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"/etc/resolv.conf")))),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u4f7f\u7528\u8005\u6c92\u6709\u81ea\u884c\u8a2d\u5b9a ",(0,o.kt)("inlineCode",{parentName:"li"},"DNS")," \u7684\u8a71\uff0c\u5c31\u6703\u91dd\u5c0d (1) \u8f09\u5165\u7684\u8a2d\u5b9a\u9032\u884c\u4e00\u6b21\u904e\u6ffe",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u91dd\u5c0d 127.0.0.1/8 \u4e4b\u985e\u7684\u9032\u884c\u904e\u6ffe ",(0,o.kt)("inlineCode",{parentName:"li"},"FilterResolveDNS")),(0,o.kt)("li",{parentName:"ul"},"\u904e\u6ffe\u5f8c\u82e5\u767c\u73fe\u662f\u7a7a\u7684\uff0c\u5247\u88dc\u4e0a 8.8.8.8/8.8.4.4")))))}u.isMDXComponent=!0}}]);
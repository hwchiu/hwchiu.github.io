"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[13082],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=o(n),h=i,f=u["".concat(c,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(f,s(s({ref:t},p),{},{components:n})):a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var o=2;o<r;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var a=n(87462),i=(n(67294),n(3905));const r={title:"Floodlight Core RestAPI - part1",date:"2013-11-24 05:58",comments:!0,tags:["SDN","Floodlight","Java","Network","SourceCode"],description:"\u672c\u6587\u57fa\u65bc SDN Controller Floodlight \u7684\u539f\u59cb\u78bc\u9032\u884c\u4e86\u4e00\u6b21\u7c21\u55ae\u7684\u5206\u6790\uff0c\u85c9\u7531\u5206\u6790\u9019\u4e9b\u539f\u59cb\u78bc\u66f4\u53ef\u4ee5\u77ad\u89e3\u6bcf\u500b\u958b\u653e\u51fa\u4f86\u7684 Restful API \u8a72\u600e\u9ebc\u4f7f\u7528\u3002\u76f8\u5c0d\u65bc\u6587\u4ef6\u7684\u66f4\u65b0\u901f\u5ea6\uff0c\u7a0b\u5f0f\u78bc\u672c\u8eab\u7684\u8fed\u4ee3\u901f\u5ea6\u66f4\u70ba\u654f\u6377\uff0c\u56e0\u6b64\u5e38\u5e38\u6703\u767c\u751f\u6587\u4ef6\u8ddf\u4e0d\u4e0a\u5be6\u969b\u904b\u884c\u529f\u80fd\u7684\u6848\u4f8b\u3002\u85c9\u7531\u5b78\u7fd2\u95b1\u8b80\u539f\u59cb\u78bc\uff0c\u6211\u5011\u53ef\u4ee5\u66f4\u5feb\u4e5f\u66f4\u6e05\u695a\u7684\u638c\u63e1\u7576\u524d\u9019\u4e9b\u958b\u6e90\u8edf\u9ad4\u7684\u767c\u5c55\u72c0\u614b\uff0c\u751a\u81f3\u4e5f\u80fd\u5920\u8ca2\u737b\u793e\u7fa4\u5e6b\u5fd9\u88dc\u9f4a\u6587\u4ef6\u3002"},s="Preface",l={unversionedId:"techPost/2013/floodlight-core-restapi",id:"techPost/2013/floodlight-core-restapi",title:"Floodlight Core RestAPI - part1",description:"\u672c\u6587\u57fa\u65bc SDN Controller Floodlight \u7684\u539f\u59cb\u78bc\u9032\u884c\u4e86\u4e00\u6b21\u7c21\u55ae\u7684\u5206\u6790\uff0c\u85c9\u7531\u5206\u6790\u9019\u4e9b\u539f\u59cb\u78bc\u66f4\u53ef\u4ee5\u77ad\u89e3\u6bcf\u500b\u958b\u653e\u51fa\u4f86\u7684 Restful API \u8a72\u600e\u9ebc\u4f7f\u7528\u3002\u76f8\u5c0d\u65bc\u6587\u4ef6\u7684\u66f4\u65b0\u901f\u5ea6\uff0c\u7a0b\u5f0f\u78bc\u672c\u8eab\u7684\u8fed\u4ee3\u901f\u5ea6\u66f4\u70ba\u654f\u6377\uff0c\u56e0\u6b64\u5e38\u5e38\u6703\u767c\u751f\u6587\u4ef6\u8ddf\u4e0d\u4e0a\u5be6\u969b\u904b\u884c\u529f\u80fd\u7684\u6848\u4f8b\u3002\u85c9\u7531\u5b78\u7fd2\u95b1\u8b80\u539f\u59cb\u78bc\uff0c\u6211\u5011\u53ef\u4ee5\u66f4\u5feb\u4e5f\u66f4\u6e05\u695a\u7684\u638c\u63e1\u7576\u524d\u9019\u4e9b\u958b\u6e90\u8edf\u9ad4\u7684\u767c\u5c55\u72c0\u614b\uff0c\u751a\u81f3\u4e5f\u80fd\u5920\u8ca2\u737b\u793e\u7fa4\u5e6b\u5fd9\u88dc\u9f4a\u6587\u4ef6\u3002",source:"@site/docs/techPost/2013/floodlight-core-restapi.md",sourceDirName:"techPost/2013",slug:"/techPost/2013/floodlight-core-restapi",permalink:"/docs/techPost/2013/floodlight-core-restapi",draft:!1,tags:[{label:"SDN",permalink:"/docs/tags/sdn"},{label:"Floodlight",permalink:"/docs/tags/floodlight"},{label:"Java",permalink:"/docs/tags/java"},{label:"Network",permalink:"/docs/tags/network"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"Floodlight Core RestAPI - part1",date:"2013-11-24 05:58",comments:!0,tags:["SDN","Floodlight","Java","Network","SourceCode"],description:"\u672c\u6587\u57fa\u65bc SDN Controller Floodlight \u7684\u539f\u59cb\u78bc\u9032\u884c\u4e86\u4e00\u6b21\u7c21\u55ae\u7684\u5206\u6790\uff0c\u85c9\u7531\u5206\u6790\u9019\u4e9b\u539f\u59cb\u78bc\u66f4\u53ef\u4ee5\u77ad\u89e3\u6bcf\u500b\u958b\u653e\u51fa\u4f86\u7684 Restful API \u8a72\u600e\u9ebc\u4f7f\u7528\u3002\u76f8\u5c0d\u65bc\u6587\u4ef6\u7684\u66f4\u65b0\u901f\u5ea6\uff0c\u7a0b\u5f0f\u78bc\u672c\u8eab\u7684\u8fed\u4ee3\u901f\u5ea6\u66f4\u70ba\u654f\u6377\uff0c\u56e0\u6b64\u5e38\u5e38\u6703\u767c\u751f\u6587\u4ef6\u8ddf\u4e0d\u4e0a\u5be6\u969b\u904b\u884c\u529f\u80fd\u7684\u6848\u4f8b\u3002\u85c9\u7531\u5b78\u7fd2\u95b1\u8b80\u539f\u59cb\u78bc\uff0c\u6211\u5011\u53ef\u4ee5\u66f4\u5feb\u4e5f\u66f4\u6e05\u695a\u7684\u638c\u63e1\u7576\u524d\u9019\u4e9b\u958b\u6e90\u8edf\u9ad4\u7684\u767c\u5c55\u72c0\u614b\uff0c\u751a\u81f3\u4e5f\u80fd\u5920\u8ca2\u737b\u793e\u7fa4\u5e6b\u5fd9\u88dc\u9f4a\u6587\u4ef6\u3002"},sidebar:"techPost",previous:{title:"Facade Pattern",permalink:"/docs/techPost/2013/facade-pattern"},next:{title:"FloodLight--Module",permalink:"/docs/techPost/2013/floodlight-module"}},c={},o=[{value:"\u7279\u5b9aswitch id",id:"\u7279\u5b9aswitch-id",level:2},{value:"\u6240\u6709switch",id:"\u6240\u6709switch",level:2}],p={toc:o},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"preface"},"Preface"),(0,i.kt)("p",null,"Floodlight Openflow Controller \u9810\u8a2d\u5c31\u6709Rest Server \u4e26\u4e14\u63d0\u4f9b\u5c0d\u61c9\u7684Rest API\u4f9b\u4f7f\u7528\u8005\u547c\u53eb\u4f7f\u7528"),(0,i.kt)("p",null,"\u518dcore module\u9019\u908a\uff0c\u76ee\u524d\u63d0\u4f9b\u4e868\u7a2erestAPI\u4f7f\u7528"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"/wm/core/switch/all/$statType/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/swtich/$switchi>/$statType$/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/controller/switches/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/role/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/counter/$counterTitle/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/counter/$switchId/$counterName$/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/memory/json"),(0,i.kt)("li",{parentName:"ul"},"/wm/core/module/{all}/json")),(0,i.kt)("p",null,"\u7b2c\u4e00\u7bc7\u4e3b\u8981\u8b1b\u524d\u9762\u5169\u500b\uff0c\u95dc\u65bcswitch information\u65b9\u9762\u3002"),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"\u9019\u5169\u500bRestAPI\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u5c0dswitch \u767c\u9001 Openflow status request\u7684\u5c01\u5305\u53bb\u8a62\u554f\u76f8\u95dc\u7684\u8a0a\u606f\n\u767c\u9001\u7684\u7a2e\u985e\u5c31\u662f ",(0,i.kt)("strong",{parentName:"p"},"statType"),"\u3002\u4ee5\u4e0b\u662f\u76ee\u524d\u7684\u985e\u578b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"port"),(0,i.kt)("li",{parentName:"ul"},"queue"),(0,i.kt)("li",{parentName:"ul"},"flow"),(0,i.kt)("li",{parentName:"ul"},"aggregate"),(0,i.kt)("li",{parentName:"ul"},"desc"),(0,i.kt)("li",{parentName:"ul"},"table"),(0,i.kt)("li",{parentName:"ul"},"features"),(0,i.kt)("li",{parentName:"ul"},"host")),(0,i.kt)("p",null,"\u5169\u500bAPI\u7684\u5dee\u5225\u53ea\u6709\u518d\u65bc\u4e00\u500b\u662f\u91dd\u5c0d\u6240\u6709\u7684swtich\u53bb\u767c\u9001\u8acb\u6c42\uff0c\u53e6\u4e00\u500b\u662f\u91dd\u5c0d\u7279\u5b9a\u7684switch\u53bb\u8acb\u6c42\u3002"),(0,i.kt)("h1",{id:"implement"},"Implement"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"core/web/CoreWebRoutable.java")," \u88e1\u9762\u53ef\u4ee5\u767c\u73fecore\u50cfIRestApiService\u8a3b\u518a\u4e86\u4e0b\u5217\u4e8b\u4ef6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'router.attach("/switch/all/{statType}/json", AllSwitchStatisticsResource.class);\nrouter.attach("/switch/{switchId}/{statType}/json", SwitchStatisticsResource.class);\n')),(0,i.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0c\n\u7576\u4f7f\u7528\u8005\u900f\u904e  ",(0,i.kt)("inlineCode",{parentName:"p"},"/wm/core/switch/all/{statType}/json"),"\u6642\u6700\u5f8c\u6703\u900f\u904e",(0,i.kt)("inlineCode",{parentName:"p"},"AllSwitchStatisticsResource"),"\u53bb\u8655\u7406\n\u5982\u679c\u900f\u904e\u7684\u6307\u5b9aswtich id\u7684\u65b9\u5f0f\uff0c\u5247\u6703\u900f\u904e ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchStatisticsResource"),"\u9019\u500b\u7269\u4ef6\u4f86\u8655\u7406\u3002"),(0,i.kt)("h2",{id:"\u7279\u5b9aswitch-id"},"\u7279\u5b9aswitch id"),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"core/web/SwitchStatisticsResource.java")," \u53ef\u4ee5\u770b\u5230\u4e0b\u5217\u7684\u7a0b\u5f0f\u78bc")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Get("json")\n    public Map<String, Object> retrieve() {\n        HashMap<String,Object> result = new HashMap<String,Object>();\n        Object values = null;\n\n        String switchId = (String) getRequestAttributes().get("switchId");\n        String statType = (String) getRequestAttributes().get("statType");\n\n        if (statType.equals("port")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.PORT);\n        } else if (statType.equals("queue")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.QUEUE);\n        } else if (statType.equals("flow")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.FLOW);\n        } else if (statType.equals("aggregate")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.AGGREGATE);\n        } else if (statType.equals("desc")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.DESC);\n        } else if (statType.equals("table")) {\n            values = getSwitchStatistics(switchId, OFStatisticsType.TABLE);\n        } else if (statType.equals("features")) {\n            values = getSwitchFeaturesReply(switchId);\n        }\n\n        result.put(switchId, values);\n        return result;\n    }\n')),(0,i.kt)("p",null,"\u9019\u908a\u53ef\u4ee5\u770b\u5230",(0,i.kt)("inlineCode",{parentName:"p"},"retrieve"),"\u6703\u5148\u53d6\u5f97\u4f7f\u7528\u8005\u8f38\u5165\u7684swtichId\u4ee5\u53ca\u5c0d\u61c9\u7684statType.\n\u63a5\u8005\u900f\u904e ",(0,i.kt)("inlineCode",{parentName:"p"},"getSwitchStatistics")," \u9019\u500bfunction\u53bb\u53d6\u5f97\u8cc7\u6599\n\u6700\u5f8c\u900f\u904e ",(0,i.kt)("inlineCode",{parentName:"p"},"result.put(switchId, values)")," \u628a\u8a72\u8cc7\u6599\u8ddf\u8a72dpid\u7d81\u5728\u4e00\u8d77\uff0c\u65b9\u4fbfJSON\u7684\u683c\u5f0f\u56de\u50b3"),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"core/web/SwitchResourceBase.java")," \u4e2d\u53ef\u4ee5\u770b\u5230\u95dc\u65bc ",(0,i.kt)("inlineCode",{parentName:"li"},"getSwitchStatistics"),"\u7684\u5b9a\u7fa9")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    protected List<OFStatistics> getSwitchStatistics(long switchId,\n                                                     OFStatisticsType statType) {\n        IFloodlightProviderService floodlightProvider =\n                (IFloodlightProviderService)getContext().getAttributes().\n                    get(IFloodlightProviderService.class.getCanonicalName());\n\n        IOFSwitch sw = floodlightProvider.getSwitch(switchId);\n        Future<List<OFStatistics>> future;\n        List<OFStatistics> values = null;\n        if (sw != null) {\n            OFStatisticsRequest req = new OFStatisticsRequest();\n            req.setStatisticType(statType);\n            int requestLength = req.getLengthU();\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5148\u900f\u904efloodlightProvider \u53d6\u5f97\u8a72",(0,i.kt)("inlineCode",{parentName:"li"},"switchId"),"\u6240\u5c0d\u61c9IOFSitch object."),(0,i.kt)("li",{parentName:"ul"},"\u521d\u59cb\u5316\u67e5\u8a62\u7d50\u679c\u4ee5\u53ca\u9700\u8981\u7684\u5bb9\u5668 ",(0,i.kt)("inlineCode",{parentName:"li"},"future"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"values")),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u8a72dpid\u5c0d\u61c9\u7684switch\u5b58\u5728\uff0c\u5247\u5148\u7522\u751f\u4e00\u500b",(0,i.kt)("inlineCode",{parentName:"li"},"OFStatisticsRequest"),"\u7684\u7269\u4ef6\uff0c\u7b49\u7b49\u5c31\u8981\u900f\u904e\u9019\u500b\u7269\u4ef6\u53bb\u767c\u9001\u8acb\u6c42\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"            if (statType == OFStatisticsType.FLOW) {\n                OFFlowStatisticsRequest specificReq = new OFFlowStatisticsRequest();\n                OFMatch match = new OFMatch();\n                match.setWildcards(0xffffffff);\n                specificReq.setMatch(match);\n                specificReq.setOutPort(OFPort.OFPP_NONE.getValue());\n                specificReq.setTableId((byte) 0xff);\n                req.setStatistics(Collections.singletonList((OFStatistics)specificReq));\n                requestLength += specificReq.getLength();\n            } else if (statType == OFStatisticsType.AGGREGATE) {\n                OFAggregateStatisticsRequest specificReq = new OFAggregateStatisticsRequest();\n                OFMatch match = new OFMatch();\n                match.setWildcards(0xffffffff);\n                specificReq.setMatch(match);\n                specificReq.setOutPort(OFPort.OFPP_NONE.getValue());\n                specificReq.setTableId((byte) 0xff);\n                req.setStatistics(Collections.singletonList((OFStatistics)specificReq));\n                requestLength += specificReq.getLength();\n            } else if (statType == OFStatisticsType.PORT) {\n                OFPortStatisticsRequest specificReq = new OFPortStatisticsRequest();\n                specificReq.setPortNumber(OFPort.OFPP_NONE.getValue());\n                req.setStatistics(Collections.singletonList((OFStatistics)specificReq));\n                requestLength += specificReq.getLength();\n            } else if (statType == OFStatisticsType.QUEUE) {\n                OFQueueStatisticsRequest specificReq = new OFQueueStatisticsRequest();\n                specificReq.setPortNumber(OFPort.OFPP_ALL.getValue());\n                // LOOK! openflowj does not define OFPQ_ALL! pulled this from openflow.h\n                // note that I haven't seen this work yet though...\n                specificReq.setQueueId(0xffffffff);\n                req.setStatistics(Collections.singletonList((OFStatistics)specificReq));\n                requestLength += specificReq.getLength();\n            } else if (statType == OFStatisticsType.DESC ||\n                       statType == OFStatisticsType.TABLE) {\n                // pass - nothing todo besides set the type above\n            }\n            req.setLengthU(requestLength);\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u9019\u908a\u5c31\u662f\u91dd\u5c0dtype\u7684\u8acb\u6c42\uff0c\u4f7f\u7528\u4e0d\u540c\u683c\u5f0f\u7684\u5c01\u5305\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4ee5flow\u70ba\u4f8b\u5b50\uff0c flow request \u6703\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"OFMatch"),"\u53bb\u5c0b\u627e\u6240\u6709match\u7684flow,\u6709mathc\u7684flow\u624d\u6703\u56de\u50b3\u72c0\u614b\u8cc7\u8a0a"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setWildcards(0xffffffff)"),": \u9019\u6a23\u5c31\u80fd\u5920match \u6240\u6709\u7684flow"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"specificReq.setOutPort(OFPort.OFPP_NONE.getValue())"),": \u9019\u908a\u4f7f\u7528OFPP_NONE\u5c31\u662f\u4ee3\u8868\u5728match flow\u7684\u6642\u5019\uff0c\u4e0d\u6703\u53bb\u770b\u8a72flow entry\u7684output port.")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"specificReq.setTableId((byte) 0xff)"),": \u628atableId\u8a2d\u5b9a\u62100xff\u5c31\u662f\u4ee3\u8868\u5c0d\u6240\u6709\u7684table\u90fd\u53bb\u8a62\u554f\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6700\u5f8c\u8a2d\u5b9a\u4e00\u4e9b\u76f8\u95dc\u8cc7\u8a0a\uff0c\u4e26\u4e14\u66f4\u65b0\u6574\u500brequest\u7684\u9577\u5ea6"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"req.setLengthU(requestLength)"),"\u8a2d\u5b9a\u6574\u500brequest packet\u7684\u6700\u5f8c\u9577\u5ea6")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'            try {\n                future = sw.queryStatistics(req);\n                values = future.get(10, TimeUnit.SECONDS);\n            } catch (Exception e) {\n                log.error("Failure retrieving statistics from switch " + sw, e);\n            }\n        }\n        return values;\n    }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u63a5\u4e0b\u4f86\u628a\u8a72 request\u7684\u5c01\u5305\u9001\u7d66switch,\u7136\u5f8c\u4f7f\u7528\u4e00\u500b",(0,i.kt)("inlineCode",{parentName:"li"},"future"),"\u7684\u7269\u4ef6\u4f86\u53d6\u5f97\u56de\u50b3\u7d50\u679c,\u900f\u904efuture\u53bb\u767c\u9001\u4e00\u500b\u975e\u540c\u6b65\u7684\u8981\u6c42\uff0c\u5982\u679c10\u79d2\u5167\u6c92\u6709\u8fa6\u6cd5\u628a\u8a72\u4efb\u52d9\u7d66\u5b8c\u6210\uff0c\u5c31\u6703\u767c\u51fa\u4f8b\u5916\u76f4\u63a5\u505c\u6b62\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u6700\u5f8c\u628a\u7d50\u679c\u7d66\u56de\u50b3\u56de\u53bb\u3002")),(0,i.kt)("h2",{id:"\u6240\u6709switch"},"\u6240\u6709switch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"core/web/AllSwitchStatisticsResource.java")," \u4e2d\u53ef\u4ee5\u89c0\u5bdf\u5012\u6574\u500bcode")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @Get("json")\n    public Map<String, Object> retrieve() {\n        String statType = (String) getRequestAttributes().get("statType");\n        return retrieveInternal(statType);\n    }\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9019\u908a\u53ef\u4ee5\u770b\u5230\uff0c\u6703\u5148\u5f9estatType\u4e2d\u53d6\u5f97\u4f7f\u7528\u8005\u8981\u6c42\u7684type,\u63a5\u8005\u518d\u547c\u53eb",(0,i.kt)("inlineCode",{parentName:"li"},"retrieveInternal()"),"\u4f86\u53d6\u5f97\u7d50\u679c\u4e26\u56de\u50b3\u7d66\u4f7f\u7528\u8005")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    public Map<String, Object> retrieveInternal(String statType) {\n        HashMap<String, Object> model = new HashMap<String, Object>();\n\n        OFStatisticsType type = null;\n        REQUESTTYPE rType = null;\n\n        if (statType.equals("port")) {\n            type = OFStatisticsType.PORT;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("queue")) {\n            type = OFStatisticsType.QUEUE;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("flow")) {\n            type = OFStatisticsType.FLOW;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("aggregate")) {\n            type = OFStatisticsType.AGGREGATE;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("desc")) {\n            type = OFStatisticsType.DESC;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("table")) {\n            type = OFStatisticsType.TABLE;\n            rType = REQUESTTYPE.OFSTATS;\n        } else if (statType.equals("features")) {\n            rType = REQUESTTYPE.OFFEATURES;\n        } else {\n            return model;\n        }\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u6839\u64da\u4f7f\u7528\u8005\u7684type, \u8a2d\u5b9a ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),"\u8ddf ",(0,i.kt)("inlineCode",{parentName:"li"},"rType"),"\u5169\u7a2e\u8b8a\u6578\uff0c \u5176\u4e2drType\u662f\u7528\u4f86\u505a",(0,i.kt)("inlineCode",{parentName:"li"},"features request"),"\u7684\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"        IFloodlightProviderService floodlightProvider =\n                (IFloodlightProviderService)getContext().getAttributes().\n                    get(IFloodlightProviderService.class.getCanonicalName());\n        Set<Long> switchDpids = floodlightProvider.getAllSwitchDpids();\n        List<GetConcurrentStatsThread> activeThreads = new ArrayList<GetConcurrentStatsThread>(switchDpids.size());\n        List<GetConcurrentStatsThread> pendingRemovalThreads = new ArrayList<GetConcurrentStatsThread>();\n        GetConcurrentStatsThread t;\n        for (Long l : switchDpids) {\n            t = new GetConcurrentStatsThread(l, rType, type);\n            activeThreads.add(t);\n            t.start();\n        }\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9019\u908a\u6703\u5148\u900f\u904e",(0,i.kt)("inlineCode",{parentName:"li"},"floodlightProvider")," \u53d6\u5f97\u6240\u6709\u7684swtich dpid"),(0,i.kt)("li",{parentName:"ul"},"\u7136\u5f8c\u8dd1\u4e00\u500bfor\u8ff4\u5708\uff0c\u91dd\u5c0d\u6bcf\u500bswitch\u90fd\u53bb\u767c\u9001\u4e00\u500brequest,\u9019\u908a\u63a1\u7528\u4e86thread\u7684\u65b9\u5f0f\u4f86\u767c\u9001\uff0c\u4e26\u4e14\u628a\u9019\u500bthread\u7d66\u8a18\u9304\u4e0b\u4f86\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"        for (int iSleepCycles = 0; iSleepCycles < 12; iSleepCycles++) {\n            for (GetConcurrentStatsThread curThread : activeThreads) {\n                if (curThread.getState() == State.TERMINATED) {\n                    if (rType == REQUESTTYPE.OFSTATS) {\n                        model.put(HexString.toHexString(curThread.getSwitchId()), curThread.getStatisticsReply());\n                    } else if (rType == REQUESTTYPE.OFFEATURES) {\n                        model.put(HexString.toHexString(curThread.getSwitchId()), curThread.getFeaturesReply());\n                    }\n                    pendingRemovalThreads.add(curThread);\n                }\n            }\n\n            // remove the threads that have completed the queries to the switches\n            for (GetConcurrentStatsThread curThread : pendingRemovalThreads) {\n                activeThreads.remove(curThread);\n            }\n            // clear the list so we don't try to double remove them\n            pendingRemovalThreads.clear();\n\n            // if we are done finish early so we don't always get the worst case\n            if (activeThreads.isEmpty()) {\n                break;\n            }\n\n            // sleep for 1 s here\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                log.error(\"Interrupted while waiting for statistics\", e);\n            }\n        }\n\n        return model;\n    }\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u9019\u908a\u662f\u7528\u4f86\u6536\u96c6\u6240\u6709thread\u7684\u7d50\u679c\uff0c\u4e26\u4e14\u7d71\u5408\u5f8c\u628a\u7d50\u679c\u56de\u50b3\u7684\u5730\u65b9"),(0,i.kt)("li",{parentName:"ul"},"\u6700\u5916\u5708\u662f\u4e00\u500b12\u79d2\u7684\u8ff4\u5708\uff0c\u7136\u5f8c\u88e1\u9762\u6703\u91dd\u5c0d\u4e4b\u524d\u8a18\u9304\u7684\u6240\u6709thread\u53bb\u8dd1\uff0c\u5982\u679c\u8a72thread\u4efb\u52d9\u5df2\u7d93\u7d50\u675f\uff0c\u72c0\u614b\u662f",(0,i.kt)("inlineCode",{parentName:"li"},"TERMINATED"),"\n\u5c31\u6703\u628a\u8a72thread\u8a18\u9304\u5012\u4e00\u500b ",(0,i.kt)("strong",{parentName:"li"},"\u8a18\u9304\u8981\u88ab\u79fb\u9664thread"),"pendingRemovalThreads,\u7136\u5f8c\u5f9e\u8a72thread\u53d6\u56de\u8acb\u6c42\u7d50\u679c\uff0c\u4e26\u8a18\u9304\u4e0b\u4f86\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5f9ependingRemovalThreads\u62ff\u51fa\u6240\u6709thread\uff0c\u4e26\u4e14\u628a\u5c0d\u61c9\u65bcactiveThread\u4e2d\u7684\u90a3\u4efd\u7d66\u522a\u9664\u6389"),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u6700\u5f8c",(0,i.kt)("inlineCode",{parentName:"li"},"activeThread"),"\u5df2\u7d93\u662f\u7a7a\u7684\uff0c\u5c31\u4ee3\u8868\u6240\u6709\u7d50\u679c\u90fd\u6703\u4f86\u4e86\uff0c\u63d0\u524d\u7d50\u675f\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"    protected class GetConcurrentStatsThread extends Thread {\n...\n        @Override\n        public void run() {\n            if ((requestType == REQUESTTYPE.OFSTATS) && (statType != null)) {\n                switchReply = getSwitchStatistics(switchId, statType);\n            } else if (requestType == REQUESTTYPE.OFFEATURES) {\n                featuresReply = getSwitchFeaturesReply(switchId);\n            }\n        }\n...\n}\n- \u9019\u500bthread \u6703\u6839\u64da\u524d\u9762\u50b3\u9032\u4f86\u7684type,\u53bb\u547c\u53eb`SwitchResourceBase.java`\u4e2d\u7684`getSwitchStatistics`\u4f86\u53d6\u5f97\u7d50\u679c\u3002\n")))}d.isMDXComponent=!0}}]);
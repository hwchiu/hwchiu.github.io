"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[79344],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),_=a,f=d["".concat(i,".").concat(_)]||d[_]||u[_]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=_;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[d]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},64192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={title:"Nox-Spanning_Tree",date:"2013-09-02 07:01",tags:["SDN","Openflow","Network","Nox","Python"],description:"\u5c0d\u65bc SDN Controller \u4f86\u8aaa\uff0c\u6700\u57fa\u672c\u7684\u529f\u80fd\u5c31\u662f\u8981\u53ef\u4ee5\u50b3\u8f38\u5c01\u5305\uff0c\u7136\u800c\u5728\u9019\u7a2e\u96c6\u4e2d\u5f0f\u7ba1\u7406\u7684\u60c5\u6cc1\u4e0b\uff0c\u50b3\u7d71\u7684 Spanning Tree Protocol \u4e0d\u6703\u904b\u884c\u3002\u56e0\u6b64 Controller \u672c\u8eab\u8981\u6709\u8fa6\u6cd5\u5224\u65b7\u7576\u524d\u7684\u7db2\u8def\u62d3\u58a3\u4e2d\u662f\u5426\u6709\u8ff4\u5708\u4ee5\u907f\u514d\u7522\u751f\u5ee3\u64ad\u98a8\u66b4\u3002\u672c\u6587\u6703\u900f\u904e\u89c0\u5bdf\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u7814\u7a76\u5728 NOX Conroller \u662f\u5982\u4f55\u5be6\u73fe\u7684\u3002"},o="Preface",p={unversionedId:"techPost/2013/nox-spanning-tree",id:"techPost/2013/nox-spanning-tree",title:"Nox-Spanning_Tree",description:"\u5c0d\u65bc SDN Controller \u4f86\u8aaa\uff0c\u6700\u57fa\u672c\u7684\u529f\u80fd\u5c31\u662f\u8981\u53ef\u4ee5\u50b3\u8f38\u5c01\u5305\uff0c\u7136\u800c\u5728\u9019\u7a2e\u96c6\u4e2d\u5f0f\u7ba1\u7406\u7684\u60c5\u6cc1\u4e0b\uff0c\u50b3\u7d71\u7684 Spanning Tree Protocol \u4e0d\u6703\u904b\u884c\u3002\u56e0\u6b64 Controller \u672c\u8eab\u8981\u6709\u8fa6\u6cd5\u5224\u65b7\u7576\u524d\u7684\u7db2\u8def\u62d3\u58a3\u4e2d\u662f\u5426\u6709\u8ff4\u5708\u4ee5\u907f\u514d\u7522\u751f\u5ee3\u64ad\u98a8\u66b4\u3002\u672c\u6587\u6703\u900f\u904e\u89c0\u5bdf\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u7814\u7a76\u5728 NOX Conroller \u662f\u5982\u4f55\u5be6\u73fe\u7684\u3002",source:"@site/docs/techPost/2013/nox-spanning-tree.md",sourceDirName:"techPost/2013",slug:"/techPost/2013/nox-spanning-tree",permalink:"/docs/techPost/2013/nox-spanning-tree",draft:!1,tags:[{label:"SDN",permalink:"/docs/tags/sdn"},{label:"Openflow",permalink:"/docs/tags/openflow"},{label:"Network",permalink:"/docs/tags/network"},{label:"Nox",permalink:"/docs/tags/nox"},{label:"Python",permalink:"/docs/tags/python"}],version:"current",frontMatter:{title:"Nox-Spanning_Tree",date:"2013-09-02 07:01",tags:["SDN","Openflow","Network","Nox","Python"],description:"\u5c0d\u65bc SDN Controller \u4f86\u8aaa\uff0c\u6700\u57fa\u672c\u7684\u529f\u80fd\u5c31\u662f\u8981\u53ef\u4ee5\u50b3\u8f38\u5c01\u5305\uff0c\u7136\u800c\u5728\u9019\u7a2e\u96c6\u4e2d\u5f0f\u7ba1\u7406\u7684\u60c5\u6cc1\u4e0b\uff0c\u50b3\u7d71\u7684 Spanning Tree Protocol \u4e0d\u6703\u904b\u884c\u3002\u56e0\u6b64 Controller \u672c\u8eab\u8981\u6709\u8fa6\u6cd5\u5224\u65b7\u7576\u524d\u7684\u7db2\u8def\u62d3\u58a3\u4e2d\u662f\u5426\u6709\u8ff4\u5708\u4ee5\u907f\u514d\u7522\u751f\u5ee3\u64ad\u98a8\u66b4\u3002\u672c\u6587\u6703\u900f\u904e\u89c0\u5bdf\u539f\u59cb\u78bc\u7684\u65b9\u5f0f\u4f86\u7814\u7a76\u5728 NOX Conroller \u662f\u5982\u4f55\u5be6\u73fe\u7684\u3002"},sidebar:"techPost",previous:{title:"Linux-Kernel-PacketCapture",permalink:"/docs/techPost/2013/linux-capture-packets"},next:{title:"Openflow Introduction, Port Types",permalink:"/docs/techPost/2013/openflow-number-1"}},i={},s=[{value:"<strong>init</strong>",id:"init",level:2},{value:"install",id:"install",level:2},{value:"dp_join",id:"dp_join",level:2},{value:"dp_leave",id:"dp_leave",level:2},{value:"update_spanning_tree",id:"update_spanning_tree",level:2},{value:"update_spanning_tree_llback",id:"update_spanning_tree_llback",level:2},{value:"handle_port_status",id:"handle_port_status",level:2},{value:"handle_packet_in",id:"handle_packet_in",level:2},{value:"update_lldp_send_period",id:"update_lldp_send_period",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"preface"},"Preface"),(0,a.kt)("p",null,"Spanning_tree \u662fnox\u7684\u4e00\u500bmodule.\nnox\u6703\u85c9\u7531\u6b64moudle\u4f86\u7dad\u8b77spanning tree,\u907f\u514d\u5c01\u5305\u5728\u5ee3\u64ad\u7684\u6642\u5019\u6703\u7522\u751fbroadcast storm."),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("h2",{id:"init"},(0,a.kt)("strong",{parentName:"h2"},"init")),(0,a.kt)("p",null,"\u9019\u908a\u505a\u7684\u662f\u4e00\u4e9b\u6210\u54e1\u7684\u521d\u59cb\u5316\uff0c\u5305\u62ec\u4e00\u4e9bset\u7684\u521d\u59cb\u3002"),(0,a.kt)("h2",{id:"install"},"install"),(0,a.kt)("p",null,"\u9996\u5148\u6703\u547c\u53eb",(0,a.kt)("inlineCode",{parentName:"p"},"update_lldp_send_period"),"\u66f4\u65b0\u4e00\u6b21lldp\u767c\u9001\u7684\u983b\u7387"),(0,a.kt)("p",null,"\u6703\u6839\u64daport\u7684\u6578\u91cf\u53bb\u6c7a\u5b9aLLDP\u767c\u9001\u7684\u983b\u7387,\u76ee\u524dFLOO_D_WAIT_TIME \u9810\u8a2d\u662f10\u79d2\uff0c\u4ee3\u886810\u79d2\u5167\u8981\u628a\u5e73\u5747\u7684\u9001\u51faLLDP\u51fa\u53bb\u3002"),(0,a.kt)("p",null,"\u63a5\u8005\u6703\u53bb\u8a3b\u518a\u4e00\u4e9b\u76f8\u95dc\u4e8b\u4ef6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python="},"self.register_for_datapath_join ( self.dp_join )\nself.register_for_datapath_leave( self.dp_leave )\nself.register_for_port_status( self.handle_port_status )\nself.register_for_packet_in( self.handle_packet_in)\n")),(0,a.kt)("p",null,"\u9019\u6bb5\u9084\u4e0d\u662f\u5f88\u6e05\u695a\uff0c\u4f46\u662f\u611f\u89ba\u662f\u8b93\u4e00\u4e9b\u8b8a\u6578\u5728\u5404module\u4e4b\u9593\u4e92\u901a\u4f7f\u7528\u7684\u3002\n",(0,a.kt)("inlineCode",{parentName:"p"},"self.bindings = self.resolve(pybindings_storage)")),(0,a.kt)("p",null,"\u9019\u6bb5\u5247\u662f\u900f\u904ereactor\u628a\u547d\u4ee4\u7d66\u5ef6\u7de91\u79d2\u5f8c\u57f7\u884c\n\u610f\u601d\u5c31\u662f\u9019\u884c\u7d50\u675f\u4e00\u79d2\u5f8c\uff0c\u5c31\u6703\u81ea\u5df1\u57f7\u884cupdate_spanning_tree.\n",(0,a.kt)("inlineCode",{parentName:"p"},"self.post_callback(1, self.update_spanning_tree)")),(0,a.kt)("h2",{id:"dp_join"},"dp_join"),(0,a.kt)("p",null,"\u7576\u6709switch \u8207controller\u9023\u7dda\u4e4b\u5f8c\uff0c\u4fbf\u6703\u547c\u53eb\u6b64function\u4f86\u505a\u8655\u7406\u3002"),(0,a.kt)("p",null,"\u5982\u679cNox\u672c\u8eab\u4e0d\u8a8d\u5f97\u8a72switch\u7684\u8a71\uff0c\u5c31\u6703\u53bb\u7d00\u9304\u8a72switch\u6709\u54ea\u4e9bport\n\u5982\u679c\u8a72port\u7684port number \u5c0f\u65bc OFPP_MAX(65280)\u7684\u8a71\uff0c\u5c31\u9032\u884c\u76f8\u95dc\u8a2d\u5b9a"),(0,a.kt)("p",null,"\u8a2d\u5b9a\u8a72port\u7684\u8d77\u59cb\u6642\u9593\n\u9810\u8a2d\u8a72port\u662f\u4e0d\u80fdflood\u7684\uff0c\u9019\u6a23\u53ef\u4ee5\u907f\u514d\u65b0\u7684PORT\u4e00\u51fa\u73fe\u5c31\u6703\u4f7f\u5f97spanning tree\u51fa\u554f\u984c\u3002\n\u7136\u5f8c\u767c\u9001\u4e00\u500bport_modify\u7684\u5c01\u5305\u53bb\u628a\u8a72port\u7d66\u8a2d\u5b9a\u6210no_flood"),(0,a.kt)("p",null,"\u6700\u5f8c\u7d00\u9304\u8a72Port\uff0c\u4e26\u4e14\u91cd\u65b0\u8abf\u6574LLDP\u7684\u503c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"now = time.time()\nports = {}\nfor port in stats['ports']:\n    ports[port[core.PORT_NO]] = port\n    if port[core.PORT_NO] <= openflow.OFPP_MAX:\n        port['enable_time'] = now + FLOOD_WAIT_TIME\n        port['flood'] = False\n        hw_addr = \"\\0\\0\" + port[core.HW_ADDR]\n        hw_addr = struct.unpack(\"!q\", hw_addr)[0]\n        self.ctxt.send_port_mod(dp, port[core.PORT_NO], ethernetaddr(hw_addr),\n        openflow.OFPPC_NO_FLOOD, openflow.OFPPC_NO_FLOOD)\n\nself.datapaths[dp] = ports\nself.port_count += len(ports)\nself.update_lldp_send_period()\n\n")),(0,a.kt)("h2",{id:"dp_leave"},"dp_leave"),(0,a.kt)("p",null,"\u7576\u6709swtich\u96e2\u958b\u7684\u6642\u5019\uff0c\u5148\u6aa2\u67e5\u8a72switch\u662f\u5426\u5b58\u5728\n\u7136\u5f8c\u628a\u6574\u9ad4\u7684port_count\u7d66\u8abf\u6574\u3002"),(0,a.kt)("h2",{id:"update_spanning_tree"},"update_spanning_tree"),(0,a.kt)("p",null,"\u5148\u5229\u7528bindings\u53bb\u53d6\u5f97\u6240\u6709\u7684link\uff0c\u7136\u5f8c\u628a\u672c\u8eab\u7684\u4e00\u500bcallback function\u50b3\u9032\u53bb\u3002\n\u63a5\u8005\u5728FLOOD_PORT_UPDATE_INTERVAL(5 sec)\u7684\u6642\u9593\u5f8c\uff0c\u547c\u53ebupdate_spanning_tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"self.bindings.get_all_links(self.update_spanning_tree_callback)\nself.post_callback(FLOOD_PORT_UPDATE_INTERVAL, self.update_spanning_tree)\n")),(0,a.kt)("h2",{id:"update_spanning_tree_llback"},"update_spanning_tree_llback"),(0,a.kt)("h2",{id:"handle_port_status"},"handle_port_status"),(0,a.kt)("h2",{id:"handle_packet_in"},"handle_packet_in"),(0,a.kt)("p",null,"port\u662fflood port\u6216\u662f\u8a72\u5c01\u5305\u662fLLDP \u9019\u5169\u7a2e\u60c5\u6cc1\u5c31\u76f4\u63a5\u628a\u8a72\u5c01\u5305\u50b3\u7d66\u4e0b\u4e00\u500bmodule\u53bb\u8655\u7406\u3002"),(0,a.kt)("p",null,"\u9664\u4e86\u6b64\u60c5\u6cc1\u4ee5\u5916"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6aa2\u67e5destination\u7684mac address \u662f\u5426\u5b78\u904e"),(0,a.kt)("li",{parentName:"ul"},"\u6aa2\u67e5destination\u7684ip type = ethernet \u4e14 ip version = ipv4\u4e14 ip header = 20byte (5*4)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"if not packet.parsed:\n    if packet.type == ethernet.LLDP_TYPE:\n        return CONTINUE\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"try:\n    dst_mac = (struct.unpack('!I', packet.arr[0:4])[0] << 16) + struct.unpack('!H', packet.arr[4:6])[0]\n    if dst_mac in self.mac_bypass:\n        return CONTINUE\n\n    type = struct.unpack('!H', packet.arr[12:14])[0]\n    ipver = struct.unpack('!b', packet.arr[14:15])[0]\n    if type == 0x800 and ipver == 0x45:\n        dst_ip = struct.unpack('!I', packet.arr[30:34])[0]\n            if dst_ip in self.ip_bypass:\n                return CONTINUE\n    except:\n        pass\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"        try:\n            if self.datapaths[dpid][inport]['flood']:\n                return CONTINUE\n            else:\n                log.warn(\"STOP\")\n                return STOP\n        except KeyError:\n            return STOP\n")),(0,a.kt)("h2",{id:"update_lldp_send_period"},"update_lldp_send_period"),(0,a.kt)("p",null,"\u5728nox\u4e2dLLDP\u7684\u767c\u9001\u60c5\u6cc1\u662f\u8981\u5728 FLOOW_WAIT_TIME\u7684\u6642\u9593\u5167 \u628a\u6240\u6709\u7684LLDP\u90fd\u9001\u51fa\u53bb"),(0,a.kt)("p",null,"\u6240\u4ee5PORT\u7684\u6578\u91cf\u6108\u591a\uff0c\u6bcf\u500bLLDP\u7684\u9593\u9694\u5c31\u6108\u77ed\u3002\n\u9810\u8a2d\u503c"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FLOOW_WAIT_TIME = 10"),(0,a.kt)("li",{parentName:"ul"},"MIN_LLDP_SEND_PERIOD = 0.05")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"if self.port_count == 0:\n    nox.netapps.discovery.discovery.LLDP_SEND_PERIOD = MIN_LLDP_SEND_PERIOD\nelse:\n    nox.netapps.discovery.discovery.LLDP_SEND_PERIOD = min(\n        MIN_LLDP_SEND_PERIOD,\n        (FLOOD_WAIT_TIME * 1.0) / 2 / self.port_count)\n")))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[27523],{3905:(n,e,t)=>{t.d(e,{Zo:()=>i,kt:()=>k});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function _(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var d=r.createContext({}),p=function(n){var e=r.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},i=function(n){var e=p(n.components);return r.createElement(d.Provider,{value:e},n.children)},s="mdxType",l={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,d=n.parentName,i=_(n,["components","mdxType","originalType","parentName"]),s=p(t),m=o,k=s["".concat(d,".").concat(m)]||s[m]||l[m]||a;return t?r.createElement(k,c(c({ref:e},i),{},{components:t})):r.createElement(k,c({ref:e},i))}));function k(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=m;var _={};for(var d in e)hasOwnProperty.call(e,d)&&(_[d]=e[d]);_.originalType=n,_[s]="string"==typeof n?n:o,c[1]=_;for(var p=2;p<a;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},34098:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>_,toc:()=>p});var r=t(87462),o=(t(67294),t(3905));const a={title:"DRBD v9.0 Network Work Flow(ii)",tags:["System","DRBD","Network","SourceCode"],date:new Date("2017-05-12T17:22:18.000Z")},c="Introduction",_={unversionedId:"techPost/2017/DRBD-v9-0-Network-Work-Flow-ii",id:"techPost/2017/DRBD-v9-0-Network-Work-Flow-ii",title:"DRBD v9.0 Network Work Flow(ii)",description:"\u672c\u6587\u5ef6\u7e8c\u4e4b\u524d\u7814\u7a76 drbd 9.0 \u7db2\u8def\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u9019\u7bc7\u6587\u7ae0\u4e3b\u8981\u5728\u7814\u7a76\u5176 kernel space \u4e2d\u7684\u884c\u70ba\u8207\u908f\u8f2f\u3002",source:"@site/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow-ii.md",sourceDirName:"techPost/2017",slug:"/techPost/2017/DRBD-v9-0-Network-Work-Flow-ii",permalink:"/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow-ii",draft:!1,tags:[{label:"System",permalink:"/docs/tags/system"},{label:"DRBD",permalink:"/docs/tags/drbd"},{label:"Network",permalink:"/docs/tags/network"},{label:"SourceCode",permalink:"/docs/tags/source-code"}],version:"current",frontMatter:{title:"DRBD v9.0 Network Work Flow(ii)",tags:["System","DRBD","Network","SourceCode"],date:"2017-05-12T17:22:18.000Z"},sidebar:"techPost",previous:{title:"Drbd Networking Structure Introduction",permalink:"/docs/techPost/2017/DRBD-networking-structure"},next:{title:"DRBD v9.0 Network Work Flow(i)",permalink:"/docs/techPost/2017/DRBD-v9-0-Network-Work-Flow"}},d={},p=[{value:"adm_new_connection",id:"adm_new_connection",level:2},{value:"drbd_create_connection",id:"drbd_create_connection",level:2},{value:"adm_add_path",id:"adm_add_path",level:2},{value:"conn_connect",id:"conn_connect",level:2}],i={toc:p},s="wrapper";function l(n){let{components:e,...t}=n;return(0,o.kt)(s,(0,r.Z)({},i,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"\u672c\u6587\u5ef6\u7e8c\u4e4b\u524d\u7814\u7a76 drbd 9.0 \u7db2\u8def\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u9019\u7bc7\u6587\u7ae0\u4e3b\u8981\u5728\u7814\u7a76\u5176 kernel space \u4e2d\u7684\u884c\u70ba\u8207\u908f\u8f2f\u3002"),(0,o.kt)("p",null,"\u5f9e\u4e4b\u524d ",(0,o.kt)("inlineCode",{parentName:"p"},"drbdsetup")," \u90a3\u908a\u53ef\u4ee5\u89c0\u5bdf\u5230\uff0c\u9019\u4e09\u500b\u6307\u4ee4\u7684\u7d50\u69cb\u5982\u4e0b\uff0c\u5176\u4e2d\u8981\u7279\u5225\u6ce8\u610f\u7684\u5c31\u662f\n",(0,o.kt)("strong",{parentName:"p"},"DRBD_ADM_CONNECT"),", ",(0,o.kt)("strong",{parentName:"p"},"DRBD_ADM_NEW_PEER")," \u4ee5\u53ca ",(0,o.kt)("strong",{parentName:"p"},"DRBD_ADM_NEW_PATH"),"\u3002\n\u9019\u4e09\u500b\u6578\u503c\u5176\u5be6\u662f\u7d66 netlink \u4f7f\u7528\u7684\uff0c\u5728 kernel \u7aef\u6703\u53bb\u8a3b\u518a\u9047\u5230\u4e09\u7a2e\u985e\u578b\u7684 netlink \u61c9\u8a72\u8981\u600e\u9ebc\u8655\u7406\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0397     {"connect", CTX_PEER_NODE,\n0398         DRBD_ADM_CONNECT, DRBD_NLA_CONNECT_PARMS,\n0399         F_CONFIG_CMD,\n0400      .ctx = &connect_cmd_ctx,\n0401      .summary = "Attempt to (re)establish a replication link to a peer host." },\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0403     {"new-peer", CTX_PEER_NODE,\n0404         DRBD_ADM_NEW_PEER, DRBD_NLA_NET_CONF,\n0405         F_CONFIG_CMD,\n0406      .ctx = &new_peer_cmd_ctx,\n0407      .summary = "Make a peer host known to a resource." },\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0415     {"new-path", CTX_PEER_NODE,\n0416         DRBD_ADM_NEW_PATH, DRBD_NLA_PATH_PARMS,\n0417         F_CONFIG_CMD,\n0418      .drbd_args = (struct drbd_argument[]) {\n0419         { "local-addr", T_my_addr, conv_addr },\n0420         { "remote-addr", T_peer_addr, conv_addr },\n0421         { } },\n0422      .ctx = &path_cmd_ctx,\n0423      .summary = "Add a path (endpoint address pair) where a peer host should be reachable." },\n')),(0,o.kt)("p",null,"\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_genl.h")," \u4e2d\u53ef\u4ee5\u770b\u5230\u6709\u4e0b\u5217\u7a0b\u5f0f\u78bc\uff0c\u9019\u908a\u4e3b\u8981\u662f\u8a3b\u518a netlink \u7684 MACRO\uff0c\u9019\u908a\u6ce8\u610f\u7684\u5247\u662f ",(0,o.kt)("strong",{parentName:"p"},"GENL_doit"),"\uff0c\u88e1\u9762\u653e\u7684\u662f\u4e00\u500b fptr\uff0c\u6307\u5411\u7576\u6b64 type \u88ab\u89f8\u767c\u5f8c\uff0c\u8981\u7528\u4f86\u8655\u7406\u7684 function\u3002\n\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u660e\u78ba\u7684\u77e5\u9053\uff0c\u5728 kernel\u88e1\u9762\u5c0d\u61c9\u4e09\u500b\u6307\u4ee4\u7684 function \u5206\u5225\u662f\n",(0,o.kt)("strong",{parentName:"p"},"drbd_adm_new_peer"),", ",(0,o.kt)("strong",{parentName:"p"},"drbd_adm_new_path"),", \u4ee5\u53ca ",(0,o.kt)("strong",{parentName:"p"},"drbd_adm_connect"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"0350 GENL_op(DRBD_ADM_NEW_PEER, 44, GENL_doit(drbd_adm_new_peer),\n0351     GENL_tla_expected(DRBD_NLA_CFG_CONTEXT, DRBD_F_REQUIRED)\n0352     GENL_tla_expected(DRBD_NLA_NET_CONF, DRBD_GENLA_F_MANDATORY)\n0353 )\n0354\n0355 GENL_op(DRBD_ADM_NEW_PATH, 45, GENL_doit(drbd_adm_new_path),\n0356     GENL_tla_expected(DRBD_NLA_CFG_CONTEXT, DRBD_F_REQUIRED)\n0357     GENL_tla_expected(DRBD_NLA_PATH_PARMS, DRBD_F_REQUIRED)\n0358 )\n0359\n0369\n0370 GENL_op(DRBD_ADM_CONNECT, 10, GENL_doit(drbd_adm_connect),\n0371     GENL_tla_expected(DRBD_NLA_CFG_CONTEXT, DRBD_F_REQUIRED)\n0372     GENL_tla_expected(DRBD_NLA_CONNECT_PARMS, DRBD_GENLA_F_MANDATORY)\n0373 )\n")),(0,o.kt)("h1",{id:"drbd_adm_new_peer"},"drbd_adm_new_peer"),(0,o.kt)("p",null,"\u57fa\u672c\u4e0a peer \u8ddf connection \u662f\u5dee\u4e0d\u591a\u7684\u6771\u897f\u7684\uff0c\u6240\u4ee5\u9019\u500b function \u5176\u5be6\u5c31\u662f\u5275\u597d\u4e00\u689d connection\uff0c\u9019\u908a\u7684 connection \u662f\u500b\u62bd\u8c61\u5c64\u7684\u6982\u5ff5\uff0c\u4e26\u4e0d\u4ee3\u8868\u5e95\u4e0b\u5be6\u969b\u4e0a\u7684\u7db2\u8def\u9023\u7dda\u5df2\u7d93\u5efa\u7acb\u5b8c\u7562\u4e86\u3002"),(0,o.kt)("p",null,"\u5982\u679c\u6b64 connection \u4e4b\u524d\u5df2\u7d93\u5275\u7acb\u904e\uff0c\u5247 ",(0,o.kt)("strong",{parentName:"p"},"adm_ctx.connection")," \u8a72\u6307\u6a19\u5c31\u6703\u6307\u5411\u8a72 ",(0,o.kt)("strong",{parentName:"p"},"connection"),"\uff0c\u5426\u5247\u5c31\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"adm_new_connection")," \u5275\u7acb\u4e00\u689d connection\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'3656 int drbd_adm_new_peer(struct sk_buff *skb, struct genl_info *info)\n3657 {\n3658     struct drbd_config_context adm_ctx;\n3659     struct drbd_connection *connection;\n3660     enum drbd_ret_code retcode;\n3661\n3662     retcode = drbd_adm_prepare(&adm_ctx, skb, info, DRBD_ADM_NEED_PEER_NODE);\n3663     if (!adm_ctx.reply_skb)\n3664         return retcode;\n3665\n3666     mutex_lock(&adm_ctx.resource->adm_mutex);\n3667\n3668     if (adm_ctx.connection) {\n3669         retcode = ERR_INVALID_REQUEST;\n3670         drbd_msg_put_info(adm_ctx.reply_skb, "peer connection already exists");\n3671     } else {\n3672         retcode = adm_new_connection(&connection, &adm_ctx, info);\n3673     }\n3674\n3675     mutex_unlock(&adm_ctx.resource->adm_mutex);\n3676     drbd_adm_finish(&adm_ctx, info, retcode);\n3677     return 0;\n3678 }\n')),(0,o.kt)("h2",{id:"adm_new_connection"},"adm_new_connection"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u5148\u78ba\u8a8d\u7576\u524d\u9084\u6c92\u6709 connection \u5b58\u5728\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u8981\u958b\u59cb\u53d6\u5f97\u4e00\u4e9b\u8ddf network \u76f8\u95dc\u7684\u8a2d\u5b9a\uff0c\u6240\u4ee5\u9019\u908a\u6703\u5148\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"kzalloc")," \u5728 kernel \u5167\u7522\u751f\u4e00\u500b\u7a7a\u9593\uff0c\u63a5\u4e0b\u4f86\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"net_conf_from_attrs")," \u5f9e ",(0,o.kt)("strong",{parentName:"p"},"netlink")," \u7684 ",(0,o.kt)("strong",{parentName:"p"},"attribute"),"\u4e2d\u8b80\u53d6\u76f8\u95dc\u7684\u8cc7\u6599\uff0c\u7136\u5f8c ",(0,o.kt)("strong",{parentName:"p"},"new_net_conf"),"  \u7d50\u69cb\u4e2d\uff0c\u7531\u65bc ",(0,o.kt)("inlineCode",{parentName:"p"},"net_conf_from_attrs")," \u662f\u652f\u7531 MACRO \u5c55\u958b\u7684 function\uff0c\u5167\u5bb9\u4e0d\u597d\u95b1\u8b80\uff0c\u53ea\u8981\u77e5\u9053\u80fd\u5920\u5f9e ",(0,o.kt)("strong",{parentName:"p"},"netlink")," \u5167\u8b80\u53d6\u5230\u60f3\u8981\u7684\u6578\u64da\uff0c\u4e26\u4e14\u62ff\u51fa\u4f86\u5373\u53ef\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'3326     *ret_conn = NULL;\n3327     if (adm_ctx->connection) {\n3328         drbd_err(adm_ctx->resource, "Connection for peer node id %d already exists\\n",\n3329              adm_ctx->peer_node_id);\n3330         return ERR_INVALID_REQUEST;\n3331     }\n3332\n3333     /* allocation not in the IO path, drbdsetup / netlink process context */\n3334     new_net_conf = kzalloc(sizeof(*new_net_conf), GFP_KERNEL);\n3335     if (!new_net_conf)\n3336         return ERR_NOMEM;\n3337\n3338     set_net_conf_defaults(new_net_conf);\n3339\n3340     err = net_conf_from_attrs(new_net_conf, info);\n3341     if (err) {\n3342         retcode = ERR_MANDATORY_TAG;\n3343         drbd_msg_put_info(adm_ctx->reply_skb, from_attrs_err_to_txt(err));\n3344         goto fail;\n3345     }\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u6703\u5f9e\u8a2d\u5b9a\u6a94\u4e2d\u5224\u65b7\u7576\u524d\u7684\u7db2\u8def\u9023\u7dda\u662f\u8d70\u4ec0\u9ebc\u5354\u5b9a\uff0c\u4e00\u822c\u514d\u8cbb\u793e\u7fa4\u4f7f\u7528\u7684\u7248\u672c\u53ea\u6709 tcp \u53ef\u4ee5\uff0c\u63a5\u6d3d\u8cfc\u8cb7\u5f8c\u53ef\u4ee5\u7372\u5f97 RDMA \u76f8\u95dc\u7684 kernel module \u4f86\u4f7f\u7528\u3002\n\u6240\u4ee5\u9019\u908a\u6700\u5f8c\u6703\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_get_transport_class")," \u6839\u64da\u5c0d\u61c9\u7684\u540d\u7a31\u4f86\u627e\u5230\u5c0d\u61c9\u7684 netowrk module \u5be6\u4f5c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'3347     transport_name = new_net_conf->transport_name[0] ? new_net_conf->transport_name : "tcp";\n3348     tr_class = drbd_get_transport_class(transport_name);\n3349     if (!tr_class) {\n3350         retcode = ERR_CREATE_TRANSPORT;\n3351         goto fail;\n3352     }\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5247\u662f\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_create_connection")," \u4f86\u5275\u5efa connection\uff0c\u9019\u908a\u6703\u5c07\u525b\u525b\u5f97\u5230\u7684 ",(0,o.kt)("strong",{parentName:"p"},"transport_class")," \u4e00\u4f75\u50b3\u5165\uff0c\u56e0\u70ba\u6700\u5f8c\u6703\u9700\u8981\u8a72 ",(0,o.kt)("strong",{parentName:"p"},"transport_class")," \u53bb\u57f7\u884c\u5e95\u5c64\u7684 init\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3354     connection = drbd_create_connection(adm_ctx->resource, tr_class);\n3355     if (!connection) {\n3356         retcode = ERR_NOMEM;\n3357         goto fail_put_transport;\n3358     }\n")),(0,o.kt)("h2",{id:"drbd_create_connection"},"drbd_create_connection"),(0,o.kt)("p",null,"\u4e00\u958b\u59cb\uff0c\u5c31\u5148\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"kzalloc")," \u53bb\u5275\u5efa\u4e00\u500b\u7a7a\u9593\u4f9b ",(0,o.kt)("strong",{parentName:"p"},"connection"),"\u4f7f\u7528\uff0c\u9019\u908a\u53ef\u4ee5\u6ce8\u610f\u5230 ",(0,o.kt)("strong",{parentName:"p"},"size")," \u7684\u7b97\u6cd5\u975e\u5e38\u7279\u5225\uff0c\u9664\u4e86\u76f4\u63a5\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},"sizeof")," \u7b97\u51fa\u8a72\u7269\u4ef6\u5916\uff0c\u6700\u5f8c\u6703\u6709\u4e00\u500b\u5927\u5c0f\u7684\u5fae\u8abf\n",(0,o.kt)("strong",{parentName:"p"},"- sizeof(connection->transport) + tc->instance_size"),"\n\u9019\u908a\u539f\u56e0\u8981\u727d\u626f\u5230 ",(0,o.kt)("strong",{parentName:"p"},"drbd_connection")," \u7684\u5be6\u4f5c\u5167\u5bb9\uff0c\u5728\u5176\u67b6\u69cb\u4e2d\u6709\u9019\u6a23\u4e00\u6bb5\u8a3b\u89e3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"1050     struct drbd_transport transport; /* The transport needs to be the last member. The acutal\n1051                         implementation might have more members than the\n1052                         abstract one. */\n1053 };\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u5176\u5be6\u6700\u5f8c\u4e00\u500b\u6b04\u4f4d\u7b97\u662f\u4e00\u500b\u6bd4\u8f03\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u5be6\u969b\u4e0a\u5e95\u5c64\u7684\u5be6\u4f5c\u53ef\u4ee5\u6709\u66f4\u591a\u7684\u8b8a\u5316\uff0c\u6240\u4ee5\u9019\u908a\u5728\u8a08\u7b97\u771f\u6b63\u6574\u9ad4\u5927\u5c0f\u6642\uff0c\u8981\u5148\u6263\u6389 ",(0,o.kt)("strong",{parentName:"p"},"sizeof drbd_transport"),"\uff0c\u7136\u5f8c\u52a0\u4e0a\u8a72\u5be6\u4f5c\u771f\u6b63\u7528\u5230\u7684\u5927\u5c0f ",(0,o.kt)("strong",{parentName:"p"},"tc->instance_size"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3302 struct drbd_connection *drbd_create_connection(struct drbd_resource *resource,\n3303                            struct drbd_transport_class *tc)\n3304 {\n3305     struct drbd_connection *connection;\n3306     int size;\n3307\n3308     size = sizeof(*connection) - sizeof(connection->transport) + tc->instance_size;\n3309     connection = kzalloc(size, GFP_KERNEL);\n\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5c31\u8981\u958b\u59cb\u521d\u59cb\u5316 ",(0,o.kt)("strong",{parentName:"p"},"drbd__connection")," \u5167\u90e8\u7684\u5404\u7a2e\u7d50\u69cb\uff0c\u5305\u542b\u5404\u7a2e link list \u76f8\u95dc\u7684\u7d50\u69cb\u3002\n\u5728\u4e00\u5207\u521d\u59cb\u5316\u5b8c\u7562\u5f8c\uff0c\u6700\u5f8c\u547c\u53eb ",(0,o.kt)("strong",{parentName:"p"},"transport class")," \u81ea\u5df1\u672c\u8eab\u7684 ",(0,o.kt)("strong",{parentName:"p"},"init"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3374     if (tc->init(&connection->transport))\n3375         goto fail;\n")),(0,o.kt)("p",null,"\u5728\u5275\u5efa\u5b8c\u7562 connection \u5f8c\uff0c\u63a5\u4e0b\u4f86\u91dd\u5c0d ",(0,o.kt)("strong",{parentName:"p"},"net_option"),"\uff0c",(0,o.kt)("strong",{parentName:"p"},"crtpyo"),"\uff0c ",(0,o.kt)("strong",{parentName:"p"},"peer device")," \u53bb\u9032\u884c\u521d\u59cb\u5316\u7684\u52d5\u4f5c\uff0c\n\u4e2d\u9593\u6709\u4e00\u6bb5\u5247\u662f\u5c07\u8a72 connetion \u7d66\u52a0\u5230 ",(0,o.kt)("strong",{parentName:"p"}," resource ")," \u6b64\u7269\u4ef6\u4e2d\uff0c\u7528 link list \u7684\u65b9\u5f0f\u628a\u6240\u6709\u7684 connection \u90fd\u7d81\u8d77\u4f86\uff0c\u672a\u4f86\u6709\u5176\u4ed6\u6307\u4ee4\u8981\u627e\u5230 connection \u8981\u4f7f\u7528\u6642\uff0c\u5c31\u53ef\u4ee5\u900f\u904e\u6b64\u65b9\u5f0f\u627e\u5230\u4e4b\u524d\u5275\u5efa\u7684 connection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3401     spin_lock_irq(&adm_ctx->resource->req_lock);\n3402     list_add_tail_rcu(&connection->connections, &adm_ctx->resource->connections);\n3403     spin_unlock_irq(&adm_ctx->resource->req_lock);\n")),(0,o.kt)("p",null,"\u6700\u5f8c\u547c\u53eb",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_thread_start")," \u53bb\u5275\u5efa\u4e00\u500b ",(0,o.kt)("strong",{parentName:"p"},"kernel thread"),"\u4f86\u904b\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_sender"),"\u3000\u6b64 thread\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3467     drbd_thread_start(&connection->sender);\n")),(0,o.kt)("p",null,"\u5927\u81f4\u4e0a\u6b64 function \u5c31\u7d50\u675f\u4e86\u3002\n\u6574\u500b",(0,o.kt)("strong",{parentName:"p"},"drbd_adm_new_peer"),"\u57f7\u884c\u5b8c\u7562\u5f8c\uff0c kernel \u5167\u7684 ",(0,o.kt)("strong",{parentName:"p"},"resource")," \u5e95\u4e0b\u5c31\u6703\u6709\u4e00\u500b ",(0,o.kt)("strong",{parentName:"p"},"drbd_connection"),"\u7684\u7269\u4ef6\u5728\u904b\u884c\uff0c\u63a5\u4e0b\u4f86\u7684\u6307\u4ee4\u90fd\u6703\u5617\u8a66\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_get_connection_by_node_id")," \u7684\u65b9\u5f0f\u5f97\u5230\u8a72 connection \u4f86\u9032\u884c\u5f8c\u7e8c\u64cd\u4f5c\u3002"),(0,o.kt)("h1",{id:"drbd_adm_new_path"},"drbd_adm_new_path"),(0,o.kt)("p",null,"\u5728\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_adm_new_peer")," \u5275\u7acb\u4e00\u500b connection (peer) \u5f8c\uff0c\u63a5\u4e0b\u4f86\u6211\u5011\u8981\u5728\u9019\u689d    connection \u4e0a\u5275\u7acb\u4e00\u500b\u65b0\u7684 path\uff0c path \u4ee3\u8868\u7684\u5c31\u662f\u5be6\u969b\u4e0a\u9023\u7dda\u6703\u5c0d\u61c9\u7684 ip address \u4ee5\u53ca\u5c0d\u61c9\u7684 port\u3002\n\u4e00\u958b\u59cb\u6703\u5148\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_adm_prepare")," \u9032\u884c\u4e00\u4e9b\u8cc7\u6e90\u7684\u7372\u53d6\uff0c\u5305\u542b ",(0,o.kt)("strong",{parentName:"p"},"connection")," \u4e5f\u6703\u5728\u88e1\u9762\u53d6\u5f97\uff0c\u7136\u5f8c\u653e\u5230 ",(0,o.kt)("strong",{parentName:"p"},"adm_ctx.connection")," \u8b8a\u6578\u4e0a\u3002\n\u63a5\u4e0b\u4f86\u5c31\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"adm_add_path")," \u9032\u884c\u7d30\u90e8\u7684\u8655\u7406\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3680 int drbd_adm_new_path(struct sk_buff *skb, struct genl_info *info)\n3681 {\n3682     struct drbd_config_context adm_ctx;\n3683     enum drbd_ret_code retcode;\n3684\n3685     retcode = drbd_adm_prepare(&adm_ctx, skb, info, DRBD_ADM_NEED_CONNECTION);\n3686     if (!adm_ctx.reply_skb)\n3687         return retcode;\n3688\n3689     /* remote transport endpoints need to be globaly unique */\n3690     mutex_lock(&adm_ctx.resource->adm_mutex);\n3691\n3692     retcode = adm_add_path(&adm_ctx, info);\n3693\n3694     mutex_unlock(&adm_ctx.resource->adm_mutex);\n3695     drbd_adm_finish(&adm_ctx, info, retcode);\n3696     return 0;\n3697 }\n")),(0,o.kt)("h2",{id:"adm_add_path"},"adm_add_path"),(0,o.kt)("p",null,"\u9996\u5148\u5148\u5f9e ",(0,o.kt)("strong",{parentName:"p"},"connection")," \u4e2d\u53d6\u5f97\u5c0d\u61c9\u7684 ",(0,o.kt)("strong",{parentName:"p"},"drbd_transport")," \u7684\u5be6\u4f5c\uff0c\u4e0d\u904e\u9019\u908a\u90fd\u6c92\u6709\u4efb\u4f55\u6aa2\u67e5\uff0c\u6240\u4ee5\u5982\u679c\u4eca\u5929\u9084\u6c92\u6709\u57f7\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"add_peer")," \u524d\u5c31\u5148\u57f7\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"add_path"),"\uff0c\u53ef\u80fd\u6703\u6709 ",(0,o.kt)("strong",{parentName:"p"},"Null pointer dereferences")," \u7684\u554f\u984c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3538 static enum drbd_ret_code\n3539 adm_add_path(struct drbd_config_context *adm_ctx,  struct genl_info *info)\n3540 {\n3541     struct drbd_transport *transport = &adm_ctx->connection->transport;\n3542     struct nlattr *my_addr = NULL, *peer_addr = NULL;\n3543     struct drbd_path *path;\n3544     enum drbd_ret_code retcode;\n3545     int err;\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5c31\u5982\u540c\u4e0a\u8ff0\u7684\u6b65\u9a5f\u4e00\u6a23\uff0c\u5148\u5f9e ",(0,o.kt)("strong",{parentName:"p"},"netlink")," \u4e2d\u53d6\u51fa\u6211\u5011\u9700\u8981\u7684\u8cc7\u8a0a\uff0c\u5728\u9019\u500b\u6307\u4ee4\u4e2d\uff0c\u6211\u5011\u9700\u8981\u7684\u662f\u4e00\u689d path \u5169\u7aef\u9ede\u7684 ",(0,o.kt)("strong",{parentName:"p"},"address(ip:port)"),"\u3002\u63a5\u8005\u900f\u904e",(0,o.kt)("inlineCode",{parentName:"p"},"check_path_usable"),"\u6aa2\u67e5\u8a72\u53c3\u6578\uff0c\u8b6c\u5982\u662f\u5426\u5b58\u5728\uff0c\u662f\u5426\u5df2\u7d93\u4f7f\u7528\u904e\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3547     /* parse and validate only */\n3548     err = path_parms_from_attrs(NULL, info);\n3549     if (err) {\n3550         drbd_msg_put_info(adm_ctx->reply_skb, from_attrs_err_to_txt(err));\n3551         return ERR_MANDATORY_TAG;\n3552     }\n3553     my_addr = nested_attr_tb[__nla_type(T_my_addr)];\n3554     peer_addr = nested_attr_tb[__nla_type(T_peer_addr)];\n")),(0,o.kt)("p",null,"\u4e00\u5207\u6e96\u5099\u5b8c\u7562\u5f8c\uff0c\u958b\u59cb\u5275\u7acb ",(0,o.kt)("strong",{parentName:"p"},"strcut drbd_path"),"\uff0c\u5148\u5f9e kernel \u8981\u7a7a\u9593\uff0c\u63a5\u4e0b\u4f86\u628a\u5169\u7aef\u9ede\u7684 address \u90fd\u8907\u88fd\u9032\u53bb\uff0c\u6700\u5f8c\u5c31\u8b93 ",(0,o.kt)("strong",{parentName:"p"},"transport class")," \u81ea\u884c\u53bb\u8ca0\u8cac\u8981\u600e\u9ebc\u8655\u7406\u4e86\uff0c\u65bc\u662f\u547c\u53eb\u4e86 ",(0,o.kt)("inlineCode",{parentName:"p"},"transport->ops->add_path")," \u53bb\u8655\u7406\u3002 \u5728\u672c\u6587\u7684\u7bc4\u4f8b\u4e2d\u4f7f\u7528\u7684\u662f TCP \u7684\u65b9\u5f0f\uff0c\u6700\u5f8c\u5247\u662f\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"dtt_add_path")," \u53bb\u8655\u7406\uff0c\u8a73\u7d30\u8655\u7406\u7684\u6d41\u7a0b\u4e4b\u5f8c\u6703\u518d\u4ed4\u7d30\u7814\u7a76\u6574\u500b TCP \u5c64\u7684\u67b6\u69cb\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'3562     path = kzalloc(transport->class->path_instance_size, GFP_KERNEL);\n3563     if (!path)\n3564         return ERR_NOMEM;\n3565\n3566     path->my_addr_len = nla_len(my_addr);\n3567     memcpy(&path->my_addr, nla_data(my_addr), path->my_addr_len);\n3568     path->peer_addr_len = nla_len(peer_addr);\n3569     memcpy(&path->peer_addr, nla_data(peer_addr), path->peer_addr_len);\n3570\n3571     kref_init(&path->kref);\n3572\n3573     err = transport->ops->add_path(transport, path);\n3574     if (err) {\n3575         kref_put(&path->kref, drbd_destroy_path);\n3576         drbd_err(adm_ctx->connection, "add_path() failed with %d\\n", err);\n3577         drbd_msg_put_info(adm_ctx->reply_skb, "add_path on transport failed");\n3578         return ERR_INVALID_REQUEST;\n3579     }\n')),(0,o.kt)("h1",{id:"drbd_adm_connect"},"drbd_adm_connect"),(0,o.kt)("p",null,"\u4e00\u5207\u90fd\u6e96\u5099\u5b8c\u7562\u5f8c\uff0c\u63a5\u4e0b\u4f86\u5c31\u53ef\u4ee5\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_adm_connect")," \u771f\u6b63\u5730\u5efa\u7acb\u8d77\u5169\u7aef\u7684\u9023\u7dda\u3002\u5982\u540c\u6163\u4f8b\uff0c\u4e00\u958b\u59cb\u90fd\u6703\u5148\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_adm_prepare")," \u9032\u884c\u8cc7\u6e90\u7684\u6574\u7406\uff0c\u63a5\u4e0b\u4f86\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f9e ",(0,o.kt)("strong",{parentName:"p"},"adm_ctx.connection")," \u53bb\u53d6\u5f97\u5148\u524d\u5275\u7acb\u7684\u9023\u7dda\u7269\u4ef6\uff0c\u7136\u5f8c\u5224\u65b7\u8a72\u9023\u7dda\u76ee\u524d\u7684\u72c0\u614b\u3002\n\u7576\u521d\u5275\u5efa\u597d\u9023\u7dda\u6642\uff0c\u9810\u8a2d\u7684\u72c0\u614b\u5c31\u662f ",(0,o.kt)("strong",{parentName:"p"},"C_STANDALONE"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"3584 int drbd_adm_connect(struct sk_buff *skb, struct genl_info *info)\n3585 {\n3586     struct drbd_config_context adm_ctx;\n3587     struct connect_parms parms = { 0, };\n3588     struct drbd_peer_device *peer_device;\n3589     struct drbd_connection *connection;\n3590     enum drbd_ret_code retcode;\n3591     enum drbd_conn_state cstate;\n3592     int i, err;\n3593\n3594     retcode = drbd_adm_prepare(&adm_ctx, skb, info, DRBD_ADM_NEED_CONNECTION);\n3595     if (!adm_ctx.reply_skb)\n3596         return retcode;\n3597\n3598     connection = adm_ctx.connection;\n3599     cstate = connection->cstate[NOW];\n3600     if (cstate != C_STANDALONE) {\n3601         retcode = ERR_NET_CONFIGURED;\n3602         goto out;\n3603     }\n")),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"first_path")," \u78ba\u8a8d\u8a72\u689d ",(0,o.kt)("strong",{parentName:"p"},"connection")," \u81f3\u5c11\u6709\u4e00\u689d ",(0,o.kt)("strong",{parentName:"p"},"path")," \u5b58\u5728\uff0c\u56e0\u70ba\u4e00\u500b ",(0,o.kt)("strong",{parentName:"p"},"connection")," \u53ef\u4ee5\u6709\u591a\u689d ",(0,o.kt)("strong",{parentName:"p"},"path"),"\uff0c\u4e14\u9019\u4e9b ",(0,o.kt)("strong",{parentName:"p"},"path")," \u662f\u900f\u904e ",(0,o.kt)("strong",{parentName:"p"},"link list")," \u7684\u65b9\u5f0f\u53bb\u7d00\u9304\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u5224\u65b7\u8a72 ",(0,o.kt)("strong",{parentName:"p"},"list")," \u7684\u7b2c\u4e00\u500b\u5c31\u77e5\u9053\u76ee\u524d\u6709\u6c92\u6709\u81f3\u5c11\u4e00\u689d ",(0,o.kt)("strong",{parentName:"p"},"path")," \u5b58\u5728\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'3605     if (first_path(connection) == NULL) {\n3606         drbd_msg_put_info(adm_ctx.reply_skb, "connection endpoint(s) missing");\n3607         retcode = ERR_INVALID_REQUEST;\n3608         goto out;\n3609     }\n')),(0,o.kt)("p",null,"\u6700\u5f8c\u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"change_cstate")," \u7684\u65b9\u5f0f\u4f86\u6539\u8b8a\u7576\u524d\u7684\u72c0\u614b\uff0c\u7136\u5f8c\u900f\u904e\u4e00\u9023\u4e32\u7684\u547c\u53eb\u5b87\u6539\u8b8a\uff0c\u6700\u5f8c\u6703\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_receive")," \u5167\u547c\u53eb\u8d77 ",(0,o.kt)("inlineCode",{parentName:"p"},"conn_connect")," \u4f86\u9032\u884c\u771f\u6b63\u7684\u9023\u7dda\u3002\n\u9019\u4e2d\u9593\u7684\u904e\u7a0b\u5c31\u4e0d\u8a73\u7d30\u63cf\u8ff0\uff0c\u7528\u5169\u5f35\u7c21\u55ae\u7684\u5716\u7247\u5927\u81f4\u8aaa\u660e\u5373\u53ef\u3002\n\u9996\u5148\u900f\u904e\u7b2c\u4e00\u5f35\u5716\u7684\u6d41\u7a0b\uff0c\u6700\u5f8c\u6703\u8dd1\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"queue_after_state_change_work")," \u88e1\u9762\uff0c\u5728\u88e1\u9762\u6703\u5275\u5efa\u4e00\u500b ",(0,o.kt)("strong",{parentName:"p"},"work"),"\uff0c\u7136\u5f8c\u9019\u500b ",(0,o.kt)("strong",{parentName:"p"},"work")," \u88e1\u9762\u7684 ",(0,o.kt)("strong",{parentName:"p"},"call back function"),"\u6703\u6307\u5411 ",(0,o.kt)("strong",{parentName:"p"},"w_after_state_change"),"\uff0c\u6700\u5f8c\u628a\u8a72 ",(0,o.kt)("strong",{parentName:"p"},"work")," \u900f\u904e ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_queue_work")," \u653e\u5165 resource \u5167\u7684 ",(0,o.kt)("strong",{parentName:"p"},"work list"),"\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"http://i.imgur.com/xg6LxPS.jpg",alt:"flow"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'1901 static void queue_after_state_change_work(struct drbd_resource *resource,\n1902                       struct completion *done)\n1903 {\n1904     /* Caller holds req_lock */\n1905     struct after_state_change_work *work;\n1906     gfp_t gfp = GFP_ATOMIC;\n1907\n1908     work = kmalloc(sizeof(*work), gfp);\n1909     if (work)\n1910         work->state_change = remember_state_change(resource, gfp);\n1911     if (work && work->state_change) {\n1912         work->w.cb = w_after_state_change;\n1913         work->done = done;\n1914         drbd_queue_work(&resource->work, &work->w);\n1915     } else {\n1916         kfree(work);\n1917         drbd_err(resource, "Could not allocate after state change work\\n");\n1918         if (done)\n1919             complete(done);\n1920     }\n1921 }\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5982\u4e0b\u5716\uff0c\u7576 ",(0,o.kt)("strong",{parentName:"p"},"resource")," \u4e00\u958b\u59cb\u900f\u904e\u5275\u7acb ",(0,o.kt)("strong",{parentName:"p"},"resource")," \u6642\uff0c\u5c31\u6703\u53eb\u4e00\u8d77\u4e00\u96bb ",(0,o.kt)("strong",{parentName:"p"},"kernel thread"),"\uff0c\u6703\u5c08\u6ce8\u65bc\u57f7\u884c ",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_worker")," \u9019\u96bb function\uff0c\u800c\u9019 function \u5167\u90e8\u5247\u6703\u4e0d\u65b7\u7684\u628a ",(0,o.kt)("strong",{parentName:"p"},"resource")," \u5167\u90e8\u7684 works \u7d66\u62ff\u51fa\u4f86\u57f7\u884c\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"http://i.imgur.com/Mya9Xss.jpg",alt:"flow-2"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"2746 int drbd_worker(struct drbd_thread *thi)\n2747 {\n2748     LIST_HEAD(work_list);\n2749     struct drbd_resource *resource = thi->resource;\n2750     struct drbd_work *w;\n2751\n2752     while (get_t_state(thi) == RUNNING) {\n2753         drbd_thread_current_set_cpu(thi);\n.................\n2793\n2794         while (!list_empty(&work_list)) {\n2795             w = list_first_entry(&work_list, struct drbd_work, list);\n2796             list_del_init(&w->list);\n2797             update_worker_timing_details(resource, w->cb);\n2798             w->cb(w, 0);\n2799         }\n2800     }\n......................\n2826     return 0;\n2827 }\n")),(0,o.kt)("p",null,"\u6700\u5f8c\u547c\u53eb\u8a72 ",(0,o.kt)("strong",{parentName:"p"},"work")," \u7684 ",(0,o.kt)("strong",{parentName:"p"},"call back function"),"\uff0c\u6700\u5f8c\u6703\u57f7\u884c\u5230 ",(0,o.kt)("inlineCode",{parentName:"p"},"w_after_state_change"),"\uff0c\u5728\u9019\u500b ",(0,o.kt)("strong",{parentName:"p"},"function"),"\u5167\uff0c\u6700\u5f8c\u6703\u53bb\u628a\u6bcf\u500b connection \u5167\u90e8\u7684 ",(0,o.kt)("strong",{parentName:"p"},"kernel thread")," \u7d66\u53eb\u8d77\u4f86\uff0c\u800c\u9019\u96bb ",(0,o.kt)("strong",{parentName:"p"},"kernel thread")," \u5247\u6703\u547c\u53eb ",(0,o.kt)("strong",{parentName:"p"},"drbd_receiver")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"2782 static int w_after_state_change(struct drbd_work *w, int unused)\n2783 {\n............\n3247     for (n_connection = 0; n_connection < state_change->n_connections; n_connection++) {\n............\n3254         /* Upon network configuration, we need to start the receiver */\n3255         if (cstate[OLD] == C_STANDALONE && cstate[NEW] == C_UNCONNECTED)\n3256             drbd_thread_start(&connection->receiver);\n3257\n............\n3266     }\n......\n3287     return 0;\n3288 }\n\n")),(0,o.kt)("p",null,"\u7576 ",(0,o.kt)("strong",{parentName:"p"},"kernel thread")," \u8d77\u4f86\u5f8c\uff0c\u63a5\u4e0b\u4f86\u5c31\u6703\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"p"},"conn_connect")," \u4f86\u9032\u884c\u5f8c\u7e8c\u7684\u9023\u7dda\uff0c\u7576\u9023\u7dda\u6210\u529f\u5f8c\uff0c\u5c31\u6703\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"p"},"drbdd")," \u9032\u5165 ",(0,o.kt)("strong",{parentName:"p"},"while loop")," \u5167\u4f86\u8655\u7406\u3002\n\u6240\u4ee5\u63a5\u4e0b\u4f86\u5c31\u7e7c\u7e8c\u4f86\u89c0\u5bdf ",(0,o.kt)("strong",{parentName:"p"},"conn_connect")," \u5e95\u4e0b\u5230\u5e95\u600e\u9ebc\u505a\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"7646 int drbd_receiver(struct drbd_thread *thi)\n7647 {\n7648     struct drbd_connection *connection = thi->connection;\n7649\n7650     if (conn_connect(connection)) {\n7651         blk_start_plug(&connection->receiver_plug);\n7652         drbdd(connection);\n7653         blk_finish_plug(&connection->receiver_plug);\n7654     }\n7655\n7656     conn_disconnect(connection);\n7657     return 0;\n7658 }\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'7081 static void drbdd(struct drbd_connection *connection)\n7082 {\n7087     while (get_t_state(&connection->receiver) == RUNNING) {\n7088         struct data_cmd const *cmd;\n7089\n7090         drbd_thread_current_set_cpu(&connection->receiver);\n7091         update_receiver_timing_details(connection, drbd_recv_header_maybe_unplug);\n7092         if (drbd_recv_header_maybe_unplug(connection, &pi))\n7093             goto err_out;\n7094\n7095         cmd = &drbd_cmd_handler[pi.cmd];\n7096         if (unlikely(pi.cmd >= ARRAY_SIZE(drbd_cmd_handler) || !cmd->fn)) {\n7097             drbd_err(connection, "Unexpected data packet %s (0x%04x)",\n7098                  drbd_packet_name(pi.cmd), pi.cmd);\n7099             goto err_out;\n7100         }\n.............\n7131     }\n...\n7136 }\n')),(0,o.kt)("h2",{id:"conn_connect"},"conn_connect"),(0,o.kt)("p",null,"\u9996\u5148\uff0c\u4e00\u958b\u59cb\u6703\u5148\u8a2d\u5b9a\u7576\u524d\u7684 protocol version\uff0c\u4e3b\u8981\u662f\u7528\u4f86\u5340\u5206 drbd8 \u4ee5\u53ca drbd9 \u7528\u7684\uff0c\u9810\u8a2d\u5148\u7576\u4f5c drbd 8 (version 80)\u3002\u63a5\u4e0b\u4f86\u5247\u6703\u6539\u8b8a\u7576\u524d\u7684\u72c0\u614b\uff0c\u5c07 ",(0,o.kt)("strong",{parentName:"p"},"C_STANDALONE")," \u8f49\u63db\u6210 ",(0,o.kt)("strong",{parentName:"p"},"C_CONNECTING"),"\u3002\n\u6700\u5f8c\u5c31\u547c\u53eb ",(0,o.kt)("strong",{parentName:"p"},"transport class"),"\u53bb\u57f7\u884c\u81ea\u5df1\u5be6\u4f5c\u7684 ",(0,o.kt)("strong",{parentName:"p"},"connect"),"\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0665 static bool conn_connect(struct drbd_connection *connection)\n0666 {\n................\n0675 start:\n0676     have_mutex = false;\n0677     clear_bit(DISCONNECT_EXPECTED, &connection->flags);\n0678     if (change_cstate(connection, C_CONNECTING, CS_VERBOSE) < SS_SUCCESS) {\n0679         /* We do not have a network config. */\n0680         return false;\n0681     }\n0682\n0683     /* Assume that the peer only understands protocol 80 until we know better.  */\n0684     connection->agreed_pro_version = 80;\n0685\n0686     err = transport->ops->connect(transport);\n0687     if (err == -EAGAIN) {\n0688         if (connection->cstate[NOW] == C_DISCONNECTING)\n0689             return false;\n0690         goto retry;\n0691     } else if (err < 0) {\n0692         drbd_warn(connection, "Failed to initiate connection, err=%d\\n", err);\n0693         goto abort;\n0694     }\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u53bb\u8a2d\u5b9a\u6bcf\u500b ",(0,o.kt)("strong",{parentName:"p"},"socket")," \u7684 send/recevie timeout\uff0c\u8a73\u7d30\u7684\u7528\u9014\u53ef\u4ee5\u53c3\u8003",(0,o.kt)("a",{parentName:"p",href:"https://linux.die.net/man/7/socket"},"SO_RCVTIMEO and SO_SNDTIMEO"),"\u3002\n\u4e0d\u904e\u9019\u908a\u53ef\u4ee5\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u70ba\u9019\u908a\u5e95\u5c64\u662f\u8d70 linux socket \u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u662f\u8d70\u4e0a\u8ff0\u7684\u65b9\u6cd5\u53bb\u8a2d\u5b9a\uff0c\u82e5\u4eca\u5929\u6539\u8d70 RDMA \u7684\u8a71\uff0c\u4f5c\u6cd5\u5c31\u6703\u5b8c\u5168\u4e0d\u540c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0696     connection->last_received = jiffies;\n0697\n0698     rcu_read_lock();\n0699     nc = rcu_dereference(connection->transport.net_conf);\n0700     ping_timeo = nc->ping_timeo;\n0701     ping_int = nc->ping_int;\n0702     rcu_read_unlock();\n0703\n0704     /* Make sure we are "uncorked", otherwise we risk timeouts,\n0705      * in case this is a reconnect and we had been corked before. */\n0706     drbd_uncork(connection, CONTROL_STREAM);\n0707     drbd_uncork(connection, DATA_STREAM);\n0708\n0709     /* Make sure the handshake happens without interference from other threads,\n0710      * or the challenge respons authentication could be garbled. */\n0711     mutex_lock(&connection->mutex[DATA_STREAM]);\n0712     have_mutex = true;\n0713     transport->ops->set_rcvtimeo(transport, DATA_STREAM, ping_timeo * 4 * HZ/10);\n0714     transport->ops->set_rcvtimeo(transport, CONTROL_STREAM, ping_int * HZ);\n')),(0,o.kt)("p",null,"\u63a5\u4e0b\u4f86\u5617\u8a66\u53bb\u767c\u9001\u4e00\u4e9b\u63a7\u5236\u8a0a\u606f\u7d66\u5c0d\u9762\uff0c\u8b6c\u5982\u81ea\u5df1\u7684DRBD\u7248\u672c\u7684\u7bc4\u570d\uff0c\u5982\u4e0b\u5217",(0,o.kt)("inlineCode",{parentName:"p"},"drbd_send_features"),"\u5167\u6240\u898b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"7332 static int drbd_send_features(struct drbd_connection *connection)\n7333 {\n7334     struct p_connection_features *p;\n7335\n7336     p = __conn_prepare_command(connection, sizeof(*p), DATA_STREAM);\n7337     if (!p)\n7338         return -EIO;\n7339     memset(p, 0, sizeof(*p));\n7340     p->protocol_min = cpu_to_be32(PRO_VERSION_MIN);\n7341     p->protocol_max = cpu_to_be32(PRO_VERSION_MAX);\n7342     p->sender_node_id = cpu_to_be32(connection->resource->res_opts.node_id);\n7343     p->receiver_node_id = cpu_to_be32(connection->peer_node_id);\n7344     p->feature_flags = cpu_to_be32(PRO_FEATURES);\n7345     return __send_command(connection, -1, P_CONNECTION_FEATURES, DATA_STREAM);\n7346 }\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"0716     h = drbd_do_features(connection);\n0717     if (h < 0)\n0718         goto abort;\n0719     if (h == 0)\n0720         goto retry;\n")),(0,o.kt)("p",null,"\u4e2d\u9593\u53c8\u91cd\u65b0\u8a2d\u5b9a\u4e86\u4e00\u4e0b receive \u7684 timeout\uff0c\u800c\u4e14\u53ea\u6709\u91dd\u5c0d ",(0,o.kt)("strong",{parentName:"p"},"DATA_STREAM"),"\uff0c\u610f\u7fa9\u4e0d\u660e\u3002\n\u6700\u5f8c\u547c\u53eb ",(0,o.kt)("inlineCode",{parentName:"p"},"__drbd_send_protocol")," \u5c07\u4e00\u4e9b ",(0,o.kt)("strong",{parentName:"p"},"net_conf")," \u5167\u7684\u8cc7\u6599\u9001\u904e\u53bb\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"0732\n0733     transport->ops->set_rcvtimeo(transport, DATA_STREAM, MAX_SCHEDULE_TIMEOUT);\n0734\n0735     discard_my_data = test_bit(CONN_DISCARD_MY_DATA, &connection->flags);\n0736\n0737     if (__drbd_send_protocol(connection, P_PROTOCOL) == -EOPNOTSUPP)\n0738         goto abort;\n")),(0,o.kt)("p",null,"\u6700\u5f8c\u9762\u9019\u6bb5\u9084\u4e0d\u662f\u5f88\u6e05\u695a\u5728\u5e79\u4ec0\u9ebc\uff0c\u5fc5\u9808\u8981\u66f4\u6df1\u5165\u7684\u7406\u89e3\u7d30\u7bc0\uff0c\u624d\u80fd\u77ad\u89e3\u70ba\u4ec0\u9ebc\u9019\u908a\u53c8\u8981\u8dd1\u4e00\u500b worker\uff0c\u88e1\u9762\u53c8\u6703\u547c\u53eb\u5230 ",(0,o.kt)("strong",{parentName:"p"},"conn_connect2")," \u4f86\u8655\u7406\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'0767     if (connection->agreed_pro_version >= 110) {\n0768         if (resource->res_opts.node_id < connection->peer_node_id) {\n0769             kref_get(&connection->kref);\n0770             kref_debug_get(&connection->kref_debug, 11);\n0771             connection->connect_timer_work.cb = connect_work;\n0772             timeout = twopc_retry_timeout(resource, 0);\n0773             drbd_debug(connection, "Waiting for %ums to avoid transaction "\n0774                    "conflicts\\n", jiffies_to_msecs(timeout));\n0775             connection->connect_timer.expires = jiffies + timeout;\n0776             add_timer(&connection->connect_timer);\n0777         }\n0778     }\n')),(0,o.kt)("h1",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Kernel \u9019\u908a\u6709\u975e\u5e38\u591a\u7684 thread \u5728\u904b\u884c\uff0c\u540c\u6642\u9084\u6709\u5f88\u8907\u96dc\u7684 state \u72c0\u614b\u8dd1\u4f86\u8dd1\u53bb\uff0c\u8981\u5b8c\u6574\u77ad\u89e3\u6574\u500b\u67b6\u69cb\u4ee5\u53ca\u904b\u4f5c\u908f\u8f2f\u9700\u8981\u4e0d\u5c11\u6642\u9593\u53bb\u6e2c\u8a66\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u76ee\u524d\u7db2\u8def\u4e0a\u5e7e\u4e4e\u6c92\u6709\u9019\u65b9\u9762\u7684\u6587\u4ef6\uff0c\u5c31\u9023\u5b98\u65b9\u7db2\u7ad9\u4e5f\u6c92\u6709\u6587\u7ae0\u8aaa\u660e\u5e95\u5c64\u7684\u67b6\u69cb\uff0c\u9019\u90e8\u5206\u90fd\u53ea\u80fd\u4f9d\u9760\u4e0a\u5c64\u7684\u61c9\u7528\u8aaa\u6cd5\u8207\u7a0b\u5f0f\u78bc\u81ea\u5df1\u62fc\u6e4a\u51fa\u9019\u4e00\u5207\u3002"),(0,o.kt)("li",{parentName:"ul"},"\u6574\u500b Coonection \u5167\u9084\u5305\u542b\u4e86 ",(0,o.kt)("strong",{parentName:"li"},"DATA_STREAM"),"\u8207 ",(0,o.kt)("strong",{parentName:"li"},"DATA_STREAM"),"\uff0c\u9019\u90e8\u5206\u7684\u7528\u9014\u5dee\u7570\uff0c\u5be6\u969b\u4e0a\u600e\u904b\u904e\u9084\u5fc5\u9808\u8981\u5728\u66f4\u4ed4\u7d30\u5730\u89c0\u770b\u76f8\u95dc\u51fd\u5f0f\u4ee5\u53ca ",(0,o.kt)("strong",{parentName:"li"},"transport class TCP")," \u5e95\u5c64\u7684\u5be6\u4f5c\u624d\u6709\u6a5f\u6703\u77ad\u89e3\u3002")))}l.isMDXComponent=!0}}]);
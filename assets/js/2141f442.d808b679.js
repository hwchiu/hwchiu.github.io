"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[34489],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(67294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,p=function(e,t){if(null==e)return{};var n,o,p={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var r=o.createContext({}),s=function(e){var t=o.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(r.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,p=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=p,f=d["".concat(r,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[d]="string"==typeof e?e:p,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(87462),p=(n(67294),n(3905));const i={title:"Kubernetes \u4e4b\u5c01\u5305\u53bb\u54ea\u5152",authors:"hwchiu",keywords:["kubernetes","tcpdump"],tags:["Kubernetes","Network","Linux"],description:"\u8ac7\u8ac7 Kubernetes \u7684\u4e16\u754c\u4e2d\u5982\u679c\u60f3\u8981\u7528 tcpdump \u6293\u5c01\u5305\u53ef\u4ee5\u600e\u9ebc\u505a",date:new Date("2021-03-05T21:58:52.000Z")},a="\u524d\u8a00",l={unversionedId:"techPost/2021/k8s-tcpdump",id:"techPost/2021/k8s-tcpdump",title:"Kubernetes \u4e4b\u5c01\u5305\u53bb\u54ea\u5152",description:"\u8ac7\u8ac7 Kubernetes \u7684\u4e16\u754c\u4e2d\u5982\u679c\u60f3\u8981\u7528 tcpdump \u6293\u5c01\u5305\u53ef\u4ee5\u600e\u9ebc\u505a",source:"@site/docs/techPost/2021/k8s-tcpdump.md",sourceDirName:"techPost/2021",slug:"/techPost/2021/k8s-tcpdump",permalink:"/docs/techPost/2021/k8s-tcpdump",draft:!1,tags:[{label:"Kubernetes",permalink:"/docs/tags/kubernetes"},{label:"Network",permalink:"/docs/tags/network"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",frontMatter:{title:"Kubernetes \u4e4b\u5c01\u5305\u53bb\u54ea\u5152",authors:"hwchiu",keywords:["kubernetes","tcpdump"],tags:["Kubernetes","Network","Linux"],description:"\u8ac7\u8ac7 Kubernetes \u7684\u4e16\u754c\u4e2d\u5982\u679c\u60f3\u8981\u7528 tcpdump \u6293\u5c01\u5305\u53ef\u4ee5\u600e\u9ebc\u505a",date:"2021-03-05T21:58:52.000Z"},sidebar:"techPost",previous:{title:"\u5f9e\u7db2\u8def\u89c0\u9ede\u4f86\u770b\u5c0e\u5165 Kubernetes \u7684\u53ef\u80fd\u75db\u9ede",permalink:"/docs/techPost/2021/k8s-network-issue"},next:{title:"\u4f60\u771f\u7684\u7406\u89e3\u904e PING \u9019\u500b\u6307\u4ee4\u55ce?",permalink:"/docs/techPost/2021/ping-implementations"}},r={},s=[{value:"Flannel",id:"flannel",level:2},{value:"Calico",id:"calico",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,p.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,p.kt)("p",null,"\u4eca\u5929\u9019\u7bc7\u6587\u7ae0\u60f3\u8981\u8ddf\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\uff0c\u5e73\u5e38\u8ddf Kubernetes \u640f\u9b25\u7684\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u60f3\u8981\u627e\u5230\u76f8\u95dc\u61c9\u7528\u7a0b\u5f0f\u7684\u5c01\u5305\u53ef\u4ee5\u6709\u54ea\u4e9b\u65b9\u6cd5\u3002"),(0,p.kt)("p",null,"\u6c92\u6709 Kubernetes \u7684\u67b6\u69cb\u4e2d\uff0c\u53ea\u8981\u74b0\u5883\u55ae\u7d14\uff0c\u5927\u5bb6\u90fd\u6703\u60f3\u5230\u4f7f\u7528 tcpdump \u6216\u662f wireshark \u7b49\u5de5\u5177\u4f86\u5e6b\u5fd9\u6293\u53d6\u5c01\u5305\uff0c\u9019\u60f3\u6cd5\u975e\u5e38\u76f4\u89ba\u4e14\u5927\u90e8\u5206\u60c5\u6cc1\u4e0b\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002"),(0,p.kt)("p",null,"\u8a3b: \u4eca\u5929\u53ea\u60f3\u8981\u63a2\u8a0e tcpdump \u9019\u5de5\u5177\u7684\u4f7f\u7528\u8207\u60c5\u5883\uff0c\u5176\u4ed6\u6703\u8b93\u5c01\u5305\u6d88\u5931\u65bc kernel \u4e2d\u7684\u9664\u932f\u65bc\u4e4b\u5f8c\u7684\u6587\u7ae0\u518d\u4f86\u63a2\u8a0e\u3002"),(0,p.kt)("p",null,"\u4f46\u662f\u5230\u4e86 Kubernetes \u7684\u4e16\u754c\u4e2d\uff0c\u9019\u500b\u554f\u984c\u8b8a\u5f97\u68d8\u624b\uff0c\u9020\u6210\u68d8\u624b\u7684\u539f\u56e0\u6211\u8a8d\u70ba\u6709\u5169\u500b"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u670d\u52d9\u5bb9\u5668\u5316\u4e86\uff0c\u5982\u679c\u60f3\u8981\u5728\u5bb9\u5668\u5167\u76f4\u63a5\u6293\u53d6\u5c01\u5305\u8b8a\u5f97\u975e\u5e38\u9ebb\u7169\uff0c\u56e0\u70ba\u5f88\u591a\u6642\u5019\u8a72 container image \u6839\u672c\u4e0d\u662f\u81ea\u5df1\u7dad\u8b77\u7684\uff0c\u5167\u90e8\u751a\u81f3\u9023 sh \u76f8\u95dc\u6307\u4ee4\u90fd\u6c92\u6709 (Traefik, fluent-bit \u6211\u5c31\u662f\u8aaa\u4f60\u5011...)"),(0,p.kt)("li",{parentName:"ol"},"Kubernetes \u5e95\u4e0b\u7684\u7db2\u8def\u90fd\u662f\u900f\u904e CNI \u4f86\u8655\u7406\u8de8\u7bc0\u9ede\u4e4b\u9593\u7684\u7db2\u8def\u8655\u7406\uff0c\u4e0d\u540c\u7684 CNI \u7684\u4f5c\u6cd5\u5b8c\u5168\u4e0d\u540c\uff0c\u8981\u5982\u4f55\u65bc\u6bcf\u500b Kubernetes \u7bc0\u9ede\u4e0a\u7cbe\u6e96\u5730\u53bb\u6293\u53d6\u5c01\u5305\u662f\u4e00\u500b\u4e0d\u7c21\u55ae\u7684\u554f\u984c\u3002")),(0,p.kt)("p",null,"\u5be6\u969b\u4e0a tcpdump \u53ef\u4ee5\u76f4\u63a5\u91dd\u5c0d\u6240\u6709\u7684\u7db2\u5361\u53bb\u6293\u53d6\u5c01\u5305\uff0c\u4f46\u662f\u9019\u7a2e\u60c5\u6cc1\u4e0b\u6703\u6293\u5230\u6578\u91cf\u975e\u5e38\u8a87\u5f35\u7684\u5c01\u5305\uff0c\u5f8c\u7e8c\u5fc5\u9808\u8981\u7528\u7cbe\u6e96\u7684\u65b9\u5f0f\u53bb\u904e\u6ffe\u5c01\u5305\uff0c\u624d\u80fd\u5920\u91dd\u5c0d\u4f60\u7684\u9700\u6c42\u627e\u5230\u6700\u5f8c\u7684\u5c01\u5305\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0c\u9019\u500b\u65b9\u6cd5\u4e0d\u662f\u842c\u7528\u7684\uff0c\u56e0\u70ba\u5982\u679c\u4f60\u7684\u5e95\u5c64 overlay network \u4f7f\u7528 tunnling \u9019\u7a2e\u5c01\u88dd\u5c01\u5305\u7684\u65b9\u5f0f\u4f86\u50b3\u8f38\u7684\u8a71\uff0c\u4f60\u7b2c\u4e00\u5c64\u770b\u5230\u7684\u5c01\u5305\u5167\u5bb9\u6839\u672c\u4e0d\u662f\u771f\u6b63 Pod \u7684\u8cc7\u8a0a\uff0c\u4f60\u7c21\u55ae\u7684\u904e\u6ffe\u529f\u80fd\u6839\u672c\u6c92\u6709\u8fa6\u6cd5\u627e\u5230\u5e95\u5c64\u7684\u7d30\u7bc0\u3002"),(0,p.kt)("p",null,"\u7a2e\u7a2e\u554f\u984c\u9020\u6210 Kubernetes \u5167\u6293\u53d6\u5bb9\u5668\u7684\u5c01\u5305\u8b8a\u5f97\u9ebb\u7169\uff0c\u9019\u908a\u4f86\u8ddf\u5927\u5bb6\u5206\u4eab\u5f9e\u5169\u500b\u4e0d\u540c\u7684\u5c64\u6b21\u4f86\u6293\u53d6\u5c01\u5305"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u5f9e\u5bb9\u5668\u672c\u8eab\u6293\u53d6\u5c01\u5305"),(0,p.kt)("li",{parentName:"ol"},"\u5f9e\u7bc0\u9ede\u7cbe\u6e96\u6293\u53d6\u5c01\u5305")),(0,p.kt)("p",null,"\u8a3b"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"\u672c\u7bc7\u6587\u7ae0\u5047\u8a2d\u8b80\u8005\u90fd\u77e5\u9053\u8207\u807d\u904e tcpdump \u9019\u500b\u5de5\u5177\u7684\u4f7f\u7528\uff0c\u4e0d\u6703\u91dd\u5c0d\u53c3\u6578\u9032\u884c\u8b1b\u89e3\uff0c\u4e3b\u8981\u6703\u8457\u91cd\u65bc\u6293\u53d6\u5c01\u5305\u7684\u601d\u8def\u3002"),(0,p.kt)("p",{parentName:"blockquote"},"\u4f7f\u7528 SR-IOV, RDMA, DPDK \u7b49\u7279\u5225\u7684\u7db2\u8def\u88dd\u7f6e\u5247\u8981\u6709\u5225\u7684\u5de5\u5177\u8207\u65b9\u5f0f\uff0c\u672c\u7bc7\u6587\u7ae0\u7684\u6771\u897f\u5927\u90e8\u5206\u90fd\u4e0d\u592a\u9069\u7528\uff0c\u6709\u6a5f\u6703\u53ef\u4ee5\u5728\u63a2\u8a0e\u9019\u4e9b\u6a5f\u5236\u4e0b\u7684\u5c01\u5305\u4e16\u754c\u3002")),(0,p.kt)("h1",{id:"\u5bb9\u5668\u6293\u53d6\u5c01\u5305"},"\u5bb9\u5668\u6293\u53d6\u5c01\u5305"),(0,p.kt)("p",null,"\u60f3\u8981\u65bc\u5bb9\u5668\u4e2d\u6293\u53d6\u5c01\u5305\u6700\u7c21\u55ae\u7684\u65b9\u5f0f\u5c31\u662f\u65bc\u5bb9\u5668\u5167\u904b\u884c tcpdump \u9019\u500b\u6307\u4ee4\u5373\u53ef\uff0c\u70ba\u4e86\u5b8c\u6210\u9019\u500b\u52d5\u4f5c\uff0c\u6211\u5011\u6709\u5169\u500b\u601d\u8def\u53ef\u4ee5\u9032\u884c"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e kubectl exec \u7684\u65b9\u5f0f\u9032\u5165\u5230\u5bb9\u5668\u5167\u76f4\u63a5\u57f7\u884c tcpdump \u6307\u4ee4"),(0,p.kt)("li",{parentName:"ol"},"\u7531\u65bc Kubernetes Pod \u5167\u53ef\u4ee5\u904b\u884c\u591a\u500b container\uff0c\u800c\u9019\u4e9b container \u90fd\u6703\u8207 pause container \u5171\u4eab\u76f8\u540c\u7684 network namespace\uff0c\u6240\u4ee5\u5176\u5be6\u53ef\u4ee5\u904b\u884c\u4e00\u500b sidecar container\uff0c\u65bc\u8a72 container \u4e0a\u904b\u884c tcpdump \u5373\u53ef\u3002"),(0,p.kt)("li",{parentName:"ol"},"\u65bc\u7bc0\u9ede\u4e0a\u904b\u884c\u4e00\u500b\u5168\u65b0\u7684 Container\uff0c\u8a72\u5bb9\u5668\u8207\u76ee\u6a19\u61c9\u7528\u7a0b\u5f0f\u7684 Container \u5171\u7528\u76f8\u540c\u7684 network namespace\uff0c\u63a5\u8005\u65bc\u88cf\u9762\u904b\u884c tcpdump \u5373\u53ef\u3002")),(0,p.kt)("p",null,"\u4e0a\u8ff0\u4e09\u500b\u6982\u5ff5\u5206\u5225\u5c0d\u61c9\u65bc\u4e0b\u5716\u7684 PodA, PodB \u4ee5\u53ca PodC\u3002"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/tGt1bfk.png",alt:null})),(0,p.kt)("p",null,"\u7b2c\u4e00\u9ede\u807d\u8d77\u4f86\u800c\u4e14\u4f46\u662f\u4e8b\u7269\u4e0a\u4e0d\u592a\u65b9\u4fbf\uff0c\u56e0\u70ba\u73fe\u5728\u7684 container \u57fa\u65bc\u67d0\u7a2e\u6f6e\u6d41\uff0c\u975e\u5e38\u559c\u6b61\u7626\u8eab\uff0c\u7279\u5225\u559c\u6b61\u5f9e scratch \u958b\u59cb\u642d\u5efa\u74b0\u5883\uff0c\u57fa\u672c\u4e0a\u9664\u932f\u6642\u9700\u8981\u7684\u6307\u4ee4\u6c92\u6709\u534a\u500b\u5167\u5efa\u3002\n\u5f88\u591a\u6642\u5019\u60f3\u8981\u81ea\u884c\u5b89\u88dd\u8a72\u6307\u4ee4\uff0c\u537b\u767c\u73fe apk, apt-get \u7b49\u6307\u4ee4\u90fd\u6c92\u6709\uff0c\u9019\u6642\u5019\u53ef\u4ee5\u8003\u616e\u4f7f\u7528 ksniff \u9019\u5957\u5de5\u5177\u4f86\u5e6b\u5fd9\u8f14\u52a9"),(0,p.kt)("p",null,"ksniff \u9019\u500b\u5de5\u5177\u53ef\u4ee5\u55ae\u7368\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u900f\u904e krew \u5b89\u88dd\u5230 kubectl \u7684\u751f\u614b\u7cfb\u4e2d\uff0c\u8b6c\u5982"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'$ kubectl krew install sniff\n$ kubectl sniff\nUsage:\n  sniff pod [-n namespace] [-c container] [-f filter] [-o output-file] [-l local-tcpdump-path] [-r remote-tcpdump-path] [flags]\n\nExamples:\nkubectl sniff hello-minikube-7c77b68cff-qbvsd -c hello-minikube\n\nFlags:\n  -c, --container string             container (optional)\n  -x, --context string               kubectl context to work on (optional)\n  -f, --filter string                tcpdump filter (optional)\n  -h, --help                         help for sniff\n      --image string                 the privileged container image (optional)\n  -i, --interface string             pod interface to packet capture (optional) (default "any")\n  -l, --local-tcpdump-path string    local static tcpdump binary path (optional)\n  -n, --namespace string             namespace (optional) (default "default")\n  -o, --output-file string           output file path, tcpdump output will be redirect to this file instead of wireshark (optional) (\'-\' stdout)\n  -p, --privileged                   if specified, ksniff will deploy another pod that have privileges to attach target pod network namespace\n  -r, --remote-tcpdump-path string   remote static tcpdump binary path (optional) (default "/tmp/static-tcpdump")\n  -v, --verbose                      if specified, ksniff output will include debug information (optional)\n\n')),(0,p.kt)("p",null,"sniff(ksniff) \u9019\u500b\u5de5\u5177\u7684\u601d\u8def\u5f88\u7c21\u55ae\uff0c\u5927\u90e8\u5206\u7684\u5bb9\u5668\u6709\u9019\u500b\u554f\u984c\u5c31\u662f\u56e0\u70ba\u6c92\u6709 tcpdump \u9019\u500b\u6307\u4ee4\uff0c\u56e0\u6b64 sniff \u6703\u5e6b\u4f60\u4e0a\u50b3 tcpdump \u7684 binary \u5230\u76ee\u6a19\u5bb9\u5668\u4e2d\uff0c\u7136\u5f8c\u65bc\u8a72\u5bb9\u5668\u4e2d\u53bb\u904b\u884c tcpdump \u9019\u500b\u6307\u4ee4\u3002\n\u8209\u4f8b\u4f86\u8aaa"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"\u2192 kubectl sniff debug-pod-5cd7fdbc68-xgjzq\nINFO[0000] using tcpdump path at: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump'\nINFO[0000] no container specified, taking first container we found in pod.\nINFO[0000] selected container: 'debug-pod'\nINFO[0000] sniffing method: upload static tcpdump\nINFO[0000] sniffing on pod: 'debug-pod-5cd7fdbc68-xgjzq' [namespace: 'default', container: 'debug-pod', filter: '', interface: 'any']\nINFO[0000] uploading static tcpdump binary from: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to: '/tmp/static-tcpdump'\nINFO[0000] uploading file: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to '/tmp/static-tcpdump' on container: 'debug-pod'\nINFO[0000] executing command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' on container: 'debug-pod', pod: 'debug-pod-5cd7fdbc68-xgjzq', namespace: 'default'\nINFO[0000] command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' executing successfully exitCode: '0', stdErr :''\nINFO[0000] file found: '-rwxr-xr-x 1 root root 2696368 Jan  1  1970 /tmp/static-tcpdump\n'\nINFO[0000] file was already found on remote pod\nINFO[0000] tcpdump uploaded successfully\nINFO[0000] spawning wireshark!\nINFO[0000] starting sniffer cleanup\nINFO[0000] sniffer cleanup completed successfully\nError: exec: \"wireshark\": executable file not found in $PATH\n")),(0,p.kt)("p",null,"\u4e0a\u8ff0\u53ef\u4ee5\u89c0\u5bdf\u5230\u5e7e\u500b\u91cd\u9ede"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"uploading static tcpdump binary from:  ...."),(0,p.kt)("li",{parentName:"ol"},"executing command ...")),(0,p.kt)("p",null,"\u9810\u8a2d\u60c5\u6cc1\u4e0b\uff0c sniff(ksniff) \u6703\u5e0c\u671b\u672c\u5730\u74b0\u5883\u6709\u5b89\u88dd wireshark \u9019\u500b\u5de5\u5177\uff0c\u80fd\u5920\u5e6b\u5fd9\u5c07\u622a\u53d6\u7684\u5c01\u5305\u76f4\u63a5\u5c0e\u5165\u5230 wireshark \u4e2d\u53bb\u89e3\u8b80\u3002\u5982\u679c\u74b0\u5883\u4e2d\u6c92\u6709 GUI \u8996\u7a97\u7684\u8a71\uff0c\u8acb\u6539\u5b89\u88dd tshark \u9019\u500b\u5de5\u5177\uff0c\u4e26\u4e14\u5c07\u8f38\u5165\u5c0e\u5411 tshark"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"\u2192 kubectl sniff debug-pod-5cd7fdbc68-xgjzq -o - | sudo tshark -r -\nRunning as user \"root\" and group \"root\". This could be dangerous.\nINFO[0000] using tcpdump path at: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump'\nINFO[0000] no container specified, taking first container we found in pod.\nINFO[0000] selected container: 'debug-pod'\nINFO[0000] sniffing method: upload static tcpdump\nINFO[0000] sniffing on pod: 'debug-pod-5cd7fdbc68-xgjzq' [namespace: 'default', container: 'debug-pod', filter: '', interface: 'any']\nINFO[0000] uploading static tcpdump binary from: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to: '/tmp/static-tcpdump'\nINFO[0000] uploading file: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to '/tmp/static-tcpdump' on container: 'debug-pod'\nINFO[0000] executing command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' on container: 'debug-pod', pod: 'debug-pod-5cd7fdbc68-xgjzq', namespace: 'default'\nINFO[0000] command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' executing successfully exitCode: '0', stdErr :''\nINFO[0000] file found: '-rwxr-xr-x 1 root root 2696368 Jan  1  1970 /tmp/static-tcpdump\n'\nINFO[0000] file was already found on remote pod\nINFO[0000] tcpdump uploaded successfully\nINFO[0000] output file option specified, storing output in: '-'\nINFO[0000] start sniffing on remote container\nINFO[0000] executing command: '[/tmp/static-tcpdump -i any -U -w - ]' on container: 'debug-pod', pod: 'debug-pod-5cd7fdbc68-xgjzq', namespace: 'default'\n    1   0.000000  10.244.0.11 \u2192 8.8.8.8      ICMP 100 Echo (ping) request  id=0x0027, seq=332/19457, ttl=64\n    2   0.013479      8.8.8.8 \u2192 10.244.0.11  ICMP 100 Echo (ping) reply    id=0x0027, seq=332/19457, ttl=61 (request in 1)\n    3   1.022986  10.244.0.11 \u2192 8.8.8.8      ICMP 100 Echo (ping) request  id=0x0027, seq=333/19713, ttl=64\n    4   1.040225      8.8.8.8 \u2192 10.244.0.11  ICMP 100 Echo (ping) reply    id=0x0027, seq=333/19713, ttl=61 (request in 3)\n    5   2.031062  10.244.0.11 \u2192 8.8.8.8      ICMP 100 Echo (ping) request  id=0x0027, seq=334/19969, ttl=64\n    6   2.043612      8.8.8.8 \u2192 10.244.0.11  ICMP 100 Echo (ping) reply    id=0x0027, seq=334/19969, ttl=61 (request in 5)\n")),(0,p.kt)("p",null,"\u900f\u904e -o \u7684\u53c3\u6578\u5c07\u8f38\u51fa\u5c0e\u5411\u5230 tshark \u5f8c\u53ef\u4ee5\u958b\u59cb\u89c0\u6e2c\u5c01\u5305\u4e86\uff0c\u7bc4\u4f8b\u4e2d\u53ef\u4ee5\u770b\u5230\u6709 ICMP (ping) \u7684\u4f86\u56de\u5c01\u5305\uff0c\u57fa\u672c\u4e0a\u9019\u6a23\u5df2\u7d93\u5e6b\u52a9\u6211\u5011\u89e3\u6c7a\u4e86\u4e00\u9ede\u5c0f\u554f\u984c\u3002"),(0,p.kt)("p",null,"\u9019\u908a\u8981\u7279\u5225\u6ce8\u610f\u4e00\u4e0b\uff0c\u57fa\u65bc\u5b89\u5168\u8003\u91cf\uff0c\u5f88\u591a\u5bb9\u5668\u90fd\u958b\u59cb\u4f7f\u7528 non-root \u7684\u65b9\u5f0f\u53bb\u904b\u884c\uff0c\u9019\u7a2e\u60c5\u6cc1\u4e0b sniff \u6703\u9047\u5230\u554f\u984c\uff0c\u4ee5\u4e0b\u70ba\u7bc4\u4f8b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"\u2192 kubectl sniff debug-pod-6ff57fbd8-tnfzh -o - | sudo tshark -r -                                                                                                  [5/1820]\nRunning as user \"root\" and group \"root\". This could be dangerous.\nINFO[0000] using tcpdump path at: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump'\nINFO[0000] no container specified, taking first container we found in pod.\nINFO[0000] selected container: 'debug-pod'\nINFO[0000] sniffing method: upload static tcpdump\nINFO[0000] sniffing on pod: 'debug-pod-6ff57fbd8-tnfzh' [namespace: 'default', container: 'debug-pod', filter: '', interface: 'any']\nINFO[0000] uploading static tcpdump binary from: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to: '/tmp/static-tcpdump'\nINFO[0000] uploading file: '/home/vagrant/.krew/store/sniff/v1.5.0/static-tcpdump' to '/tmp/static-tcpdump' on container: 'debug-pod'\nINFO[0000] executing command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' on container: 'debug-pod', pod: 'debug-pod-6ff57fbd8-tnfzh', namespace: 'default'\nINFO[0000] command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' executing successfully exitCode: '2', stdErr :'ls: cannot access '/tmp/static-tcpdump': No such file or directory\n'\nINFO[0000] file not found on: '/tmp/static-tcpdump', starting to upload\nINFO[0000] verifying file uploaded successfully\nINFO[0000] executing command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' on container: 'debug-pod', pod: 'debug-pod-6ff57fbd8-tnfzh', namespace: 'default'\nINFO[0000] command: '[/bin/sh -c ls -alt /tmp/static-tcpdump]' executing successfully exitCode: '0', stdErr :''\nINFO[0000] file found: '-rwxr-xr-x 1 123 root 2696368 Jan  1  1970 /tmp/static-tcpdump\n'\nINFO[0000] file uploaded successfully\nINFO[0000] tcpdump uploaded successfully\nINFO[0000] output file option specified, storing output in: '-'\nINFO[0000] start sniffing on remote container\nINFO[0000] executing command: '[/tmp/static-tcpdump -i any -U -w - ]' on container: 'debug-pod', pod: 'debug-pod-6ff57fbd8-tnfzh', namespace: 'default'\nINFO[0000] command: '[/tmp/static-tcpdump -i any -U -w - ]' executing successfully exitCode: '1', stdErr :'static-tcpdump: any: You don't have permission to capture on that device\n(socket: Operation not permitted)\n'\n")),(0,p.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u6700\u5e95\u4e0b\u76f4\u63a5\u5674\u51fa\u4e86 ",(0,p.kt)("inlineCode",{parentName:"p"},"Operation not permitted"),"\uff0c\u7406\u7531\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"You don't have permission to capture on that device"),"\u3002 \u9019\u554f\u984c\u662f\u56e0\u70ba\u4f60\u4e0d\u662f root \u540c\u6642",(0,p.kt)("inlineCode",{parentName:"p"},"capabilities")," \u6c92\u6709\u8a2d\u5b9a\u597d\u3002\n\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c sniff \u63d0\u4f9b\u4e86 -p \u9019\u500b\u53c3\u6578\uff0c\u8a72\u53c3\u6578\u63d0\u4f9b\u4e86",(0,p.kt)("a",{parentName:"p",href:"https://github.com/eldadru/ksniff#non-privileged-and-scratch-pods"},"Non-Privileged")," \u7684\u6a21\u5f0f\u8655\u7406\uff0c\u4e0d\u904e\u76ee\u524d\u7248\u672c\u6703\u6709\u4e00\u500b docker socket \u7684\u4f4d\u7f6e\u7684 bug\uff0c\u8981\u7b49\u5230 1.5.1 \u7248\u672c\u91cb\u51fa\u624d\u80fd\u5920\u900f\u904e\u53c3\u6578\u8a2d\u5b9a\uff0c\u8a73\u7d30\u932f\u8aa4\u8a0a\u606f\u53ef\u4ee5\u5230 ",(0,p.kt)("a",{parentName:"p",href:"https://github.com/eldadru/ksniff/issues/82"},"Github issue")," \u89c0\u770b"),(0,p.kt)("p",null,"\u7b2c\u4e8c\u500b\u65b9\u5f0f\u900f\u904e sidecar \u7684\u65b9\u5f0f\u5247\u6c92\u6709\u4ec0\u9ebc\u597d\u6558\u8ff0\u7684\uff0c\u5c31 YAML \u4e2d\u591a\u639b\u4e00\u500b\u5305\u542b tcpdump \u7684\u5bb9\u5668\u5373\u53ef\uff0c\u8a18\u5f97\u6b0a\u9650\u8981\u8a2d\u5b9a\u597d\uff0c\u4f46\u662f\u9019\u500b\u65b9\u6cd5\u6bd4\u8f03\u4e0d\u65b9\u4fbf\u91dd\u5c0d\u5df2\u7d93\u904b\u884c\u7684 Pod\uff0c\u7562\u7adf\u9700\u8981\u91cd\u65b0\u90e8\u7f72\u6574\u500b Pod\uff0c\u53ef\u80fd\u74b0\u5883\u5c31\u88ab\u7834\u58de\u4e86\u3002"),(0,p.kt)("p",null,"\u6700\u5f8c\u4e00\u500b\u65b9\u5f0f\u4e5f\u662f\u7c21\u55ae\uff0c\u5047\u8a2d\u8a72\u7bc0\u9ede\u4f7f\u7528 docker \u7684\u8a71\uff0c\u4e0b\u9762\u76f4\u63a5\u793a\u7bc4\u6307\u4ee4"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"\u25cb \u2192 kubectl get pods\nNAME                         READY   STATUS    RESTARTS   AGE\ndebug-pod-7bb76865bd-bwnwx   1/1     Running   0          27m\n\n\u25cb \u2192 pause_id=$(docker ps | grep debug-pod-7bb76865bd-bwnwx | grep pause | awk '{print $1}')\n\n\u25cb \u2192 docker run -it --rm --net=container:$pause_id --entrypoint /usr/sbin/tcpdump hwchiu/netutils -vvvn -i any icmp\ntcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes\n04:51:08.659648 IP (tos 0x0, ttl 64, id 10959, offset 0, flags [DF], proto ICMP (1), length 84)\n    10.244.0.13 > 8.8.8.8: ICMP echo request, id 16, seq 1656, length 64\n04:51:08.682612 IP (tos 0x0, ttl 61, id 332, offset 0, flags [DF], proto ICMP (1), length 84)\n    8.8.8.8 > 10.244.0.13: ICMP echo reply, id 16, seq 1656, length 64\n04:51:09.661124 IP (tos 0x0, ttl 64, id 11105, offset 0, flags [DF], proto ICMP (1), length 84)\n    10.244.0.13 > 8.8.8.8: ICMP echo request, id 16, seq 1657, length 64\n04:51:09.747545 IP (tos 0x0, ttl 61, id 336, offset 0, flags [DF], proto ICMP (1), length 84)\n    8.8.8.8 > 10.244.0.13: ICMP echo reply, id 16, seq 1657, length 64\nc04:51:10.666374 IP (tos 0x0, ttl 64, id 11336, offset 0, flags [DF], proto ICMP (1), length 84)\n    10.244.0.13 > 8.8.8.8: ICMP echo request, id 16, seq 1658, length 64\n04:51:10.679855 IP (tos 0x0, ttl 61, id 344, offset 0, flags [DF], proto ICMP (1), length 84)\n    8.8.8.8 > 10.244.0.13: ICMP echo reply, id 16, seq 1658, length 64\n")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u5148\u77e5\u9053",(0,p.kt)("inlineCode",{parentName:"li"},"\u904b\u884c\u65bc\u7576\u524d\u7bc0\u9ede\u4e0a"),"\u7684 pod \u540d\u7a31"),(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e docker ps \u627e\u5230\u8a72 pod \u7bc0\u9ede\u7684\u5c0d\u61c9\u7684 ",(0,p.kt)("inlineCode",{parentName:"li"},"pause")," \u5bb9\u5668 ID"),(0,p.kt)("li",{parentName:"ol"},"docker run \u7684\u6642\u5019\u4f7f\u7528 --net=contianer:xxxx \u4f86\u639b\u8f09\u76f8\u540c\u7684 network namespace"),(0,p.kt)("li",{parentName:"ol"},"\u904b\u884c\u8d77\u4f86\u7684 docker \u8dd1\u500b tcpdump \u5373\u53ef")),(0,p.kt)("h1",{id:"\u7bc0\u9ede\u6293\u53d6\u5c01\u5305"},"\u7bc0\u9ede\u6293\u53d6\u5c01\u5305"),(0,p.kt)("p",null,"\u4e0a\u8ff0\u63a2\u8a0e\u4e86\u5982\u4f55\u65bc\u5bb9\u5668\u5167\u53bb\u6293\u53d6\u61c9\u7528\u7a0b\u5f0f\u7684\u5c01\u5305\uff0c\u5982\u679c\u89ba\u5f97\u4e0a\u8ff0\u6307\u4ee4\u5be6\u5728\u592a\u9ebb\u7169\uff0c\u8981\u4f7f\u7528 knisff \u6216\u662f\u9084\u8981\u518d\u984d\u5916\u8d77\u4e00\u500b docker container\u3002\u90a3\u672c\u6bb5\u843d\u5c31\u4f86\u60f3\u60f3\uff0c\u5982\u679c\u60f3\u8981\u65bc\u7bc0\u9ede\u4e0a\u76f4\u63a5\u6293\u53d6\u5c01\u5305\u7684\u8a71\uff0c\u53ef\u4ee5\u600e\u9ebc\u505a\u3002"),(0,p.kt)("p",null,"\u65bc\u7bc0\u9ede\u4e0a\u53bb\u900f\u904e tcpdump \u4f86\u6293\u53d6\u5c01\u5305\uff0c\u6211\u5011\u8981\u601d\u8003\u7684\u9ede\u5176\u5be6\u5c31\u662f"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u6211\u8981\u6293\u54ea\u500b\u7db2\u5361"),(0,p.kt)("li",{parentName:"ol"},"\u5982\u679c\u5c01\u5305\u6703\u7d93\u904e\u5f88\u591a\u7db2\u5361\uff0c\u90a3\u6bcf\u500b\u968e\u6bb5\u7684\u5c01\u5305\u5206\u5225\u4ee3\u8868\u4ec0\u9ebc\u610f\u601d")),(0,p.kt)("p",null,"\u9019\u90e8\u5206\u5fc5\u9808\u8aaa\uff0c\u6211\u60f3\u4e0d\u5230\u4e00\u500b\u5b8c\u7f8e\u7684\u65b9\u5f0f\u4f86\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\u3002\n\u4e0d\u540c\u7684 CNI \u8a2d\u5b9a\u7684\u65b9\u5f0f\u8207\u67b6\u69cb\u5b8c\u5168\u4e0d\u540c\uff0c\u56e0\u70ba\u67b6\u69cb\u4e0d\u540c\uff0c\u8981\u900f\u904e tcpdump \u627e\u5230\u7cbe\u6e96\u7684\u7db2\u5361\u65b9\u5f0f\u5b8c\u5168\u4e0d\u540c\u3002\n\u4ee5\u4e0b\u5c31\u91dd\u5c0d Flannel \u4ee5\u53ca Calico \u5169\u7a2e\u65b9\u5f0f\u4f86\u793a\u7bc4"),(0,p.kt)("h2",{id:"flannel"},"Flannel"),(0,p.kt)("p",null,"Flannel \u9810\u8a2d\u4f7f\u7528 VXLAN \u9019\u7a2e\u900f\u904e UDP \u5c01\u88dd\u7684\u65b9\u5f0f\u4f86\u8655\u7406\u7bc0\u9ede\u9593\u7684\u5c01\u5305\u50b3\u8f38\uff0c\u6574\u500b\u67b6\u69cb\u5927\u6982\u5982\u4e0b\n",(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/dqfVlGK.png",alt:null})),(0,p.kt)("p",null,"\u5982\u679c\u5c0d\u65bc Flannel \u7684\u5c01\u5305\u50b3\u8f38\u6709\u8208\u8da3\u7684\uff0c\u53ef\u4ee5\u53c3\u8003\u6211\u4e4b\u524d\u64b0\u5beb\u7684\u5206\u6790\u6587",(0,p.kt)("a",{parentName:"p",href:"https://www.hwchiu.com/cni-flannel-iii.html"},"CNI - Flannel - VXLAN \u5c01\u5305\u904b\u4f5c\u7bc7\n"),"\uff0c\u8a72\u6587\u7ae0\u4e2d\u5f88\u4ed4\u7d30\u7684\u4ecb\u7d39\u6574\u500b\u5c01\u5305\u50b3\u8f38\u7684\u904e\u7a0b\u3002"),(0,p.kt)("p",null,"\u4eca\u5929\u9019\u7bc7\u6587\u7ae0\u6211\u5011\u4e0d\u8b1b\u592a\u7d30\uff0c\u6539\u7528\u4e0b\u5217\u9019\u7a2e\u7c21\u55ae\u7684\u5716\u7247\u4f86\u770b\u67b6\u69cb\n",(0,p.kt)("img",{parentName:"p",src:"https://i.imgur.com/SboSvWB.png",alt:null})),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"Flannel \u7684\u4e16\u754c\u4e2d\uff0c\u6bcf\u500b\u7bc0\u9ede\u4e0a\u9762\u90fd\u6703\u7522\u751f\u4e00\u500b ",(0,p.kt)("inlineCode",{parentName:"li"},"cni0")," \u7684\u865b\u64ec\u7db2\u5361\uff0c\u5176\u672c\u8cea\u662f\u4e00\u500b Linux Bridge"),(0,p.kt)("li",{parentName:"ol"},"Pod \u8207 Linux Bridge \u6703\u900f\u904e veth \u7684\u65b9\u5f0f\u4e32\u63a5\u5f7c\u6b64\uff0c\u4e00\u7aef\u65bc Pod \u88e1\u9762\uff0c\u901a\u5e38\u547d\u540d\u70ba eth0\uff0c\u53e6\u4e00\u7aef\u63a5\u4e0a cni0 \u4e0a\uff0c\u901a\u5e38\u547d\u540d\u662f veth \u958b\u982d"),(0,p.kt)("li",{parentName:"ol"},"\u70ba\u4e86\u6eff\u8db3 VXLAN \u7684\u4f5c\u6cd5\uff0c\u7cfb\u7d71\u4e0a\u9084\u6703\u6709 flannel.1 \u7684\u7db2\u5361")),(0,p.kt)("p",null,"\u7c21\u55ae\u4f86\u8aaa\uff0c\u4f7f\u7528 Flannel \u7684\u60c5\u6cc1\u4e0b\uff0c\u5275\u5efa\u7b2c\u4e00\u500b Pod \u5c31\u6703\u8b93\u7cfb\u7d71\u4e0a\u7522\u751f\u4e09\u500b\u7db2\u5361(vethxxx,cni0, flannel.1)\uff0c\u4e4b\u5f8c\u6bcf\u5275\u5efa\u4e00\u500b\u65b0\u7684Pod\uff0c\u5c31\u6703\u7522\u751f\u4e00\u500b\u5168\u65b0\u7684 vethxxxx\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"\u2192 brctl show\nbridge name     bridge id               STP enabled     interfaces\ncni0            8000.f60b1ed977a3       no              vetha3a29b21\n                                                        vethb33e2721\n                                                        vethedce4e05\n")),(0,p.kt)("p",null,"\u6240\u4ee5\u60f3\u8981\u65bc\u7bc0\u9ede\u4e0a\u6293\u53d6\u5c01\u5305\u6642\uff0c\u5176\u5be6\u53ef\u4ee5\u91dd\u5c0d ",(0,p.kt)("inlineCode",{parentName:"p"},"vethxxx")," \u9019\u500b\u865b\u64ec\u7db2\u5361\u53bb\u6293\u53d6\u5c01\u5305\uff0c\u5c31\u53ef\u4ee5\u6293\u5230\u5f9e\u5bb9\u5668\u5167\u9001\u51fa\u6216\u662f\u5373\u5c07\u9001\u5230\u5bb9\u5668\u5167\u7684\u5c01\u5305\u3002"),(0,p.kt)("p",null,"\u6bd4\u8f03\u96e3\u7684\u554f\u984c\u53cd\u800c\u662f\uff0c\u8981\u5982\u4f55\u77e5\u9053 veth \u5c0d\u61c9\u5230\u54ea\u4e00\u500b Pod\uff0c\u9019\u908a\u6211\u5206\u4eab\u4e00\u4e0b\u6211\u7684\u4f5c\u6cd5\uff0c\u76f4\u63a5\u5217\u51fa\u6240\u6709\u6b65\u9a5f"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},'\u2192 kubectl get pods -o wide\nNAME                         READY   STATUS    RESTARTS   AGE     IP            NODE      NOMINATED NODE   READINESS GATES\ndebug-pod-7bb76865bd-96kt4   1/1     Running   0          5m14s   10.244.0.20   k8s-dev   <none>           <none>\ndebug-pod-7bb76865bd-bwnwx   1/1     Running   0          62m     10.244.0.13   k8s-dev   <none>           <none>\ndebug-pod-7bb76865bd-dctbh   1/1     Running   0          5m14s   10.244.0.21   k8s-dev   <none>           <none>\ndebug-pod-7bb76865bd-kdqsl   1/1     Running   0          5m14s   10.244.0.18   k8s-dev   <none>           <none>\ndebug-pod-7bb76865bd-n8xgr   1/1     Running   0          5m14s   10.244.0.19   k8s-dev   <none>           <none>\n\n\u2192 ping 10.244.0.21 -c1\nPING 10.244.0.21 (10.244.0.21) 56(84) bytes of data.\n64 bytes from 10.244.0.21: icmp_seq=1 ttl=64 time=0.132 ms\n\n--- 10.244.0.21 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.132/0.132/0.132/0.000 ms\n\n\u2192 arp -na | grep 10.244.0.21\n? (10.244.0.21) at e2:d0:10:82:13:e1 [ether] on cni0\n\n\u2192 brctl showmacs cni0 | grep e2:d0:10:82:13:e1\n  7     e2:d0:10:82:13:e1       no                25.35\n\n\u2192 brctl showstp cni0 | grep "(7)"\nvethe281cd54 (7)\n\n\u2192 sudo tcpdump -vvv -i vethe281cd54 icmp\ntcpdump: listening on vethe281cd54, link-type EN10MB (Ethernet), capture size 262144 bytes\n05:29:19.930095 IP (tos 0x0, ttl 64, id 63397, offset 0, flags [DF], proto ICMP (1), length 84)\n    10.244.0.21 > dns.google: ICMP echo request, id 490, seq 16, length 64\n05:29:19.950787 IP (tos 0x0, ttl 61, id 8561, offset 0, flags [DF], proto ICMP (1), length 84)\n    dns.google > 10.244.0.21: ICMP echo reply, id 490, seq 16, length 64\n05:29:20.931567 IP (tos 0x0, ttl 64, id 63476, offset 0, flags [DF], proto ICMP (1), length 84)\n    10.244.0.21 > dns.google: ICMP echo request, id 490, seq 17, length 64\n\n')),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u5148\u627e\u51fa\u4f60\u76ee\u6a19\u7684 PodIP"),(0,p.kt)("li",{parentName:"ol"},"\u8a72\u7bc0\u9ede\u4e0a\u5148 ping \u4e00\u6b21\u8a72 PodIP"),(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e arp \u770b\u4e00\u4e0b\u76ee\u6a19 Pod \u88e1\u9762\u7db2\u5361\u7684 MAC Address \u662f\u591a\u5c11 (e2:d0:10:82:13:e1)"),(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e brctl showmacs cni0 \u4f86\u89c0\u5bdf\uff0c\u5230\u5e95\u8a72 MAC Address \u5be6\u969b\u4e0a\u5728 cni0 \u9019\u500b Linux Bridge \u4e0a\u7684 port number \u662f\u591a\u5c11(\u7bc4\u4f8b\u662f7)"),(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e brctl showstep cni0 \u4f86\u89c0\u5bdf\u5230\u5e95 ",(0,p.kt)("inlineCode",{parentName:"li"},"7")," port \u5c0d\u61c9\u5230\u7684\u7db2\u5361\u662f\u8ab0\uff0c\u7bc4\u4f8b\u4e2d\u53ef\u4ee5\u67e5\u5230 ",(0,p.kt)("inlineCode",{parentName:"li"},"vethe281cd54")),(0,p.kt)("li",{parentName:"ol"},"\u6700\u5f8c\u76f4\u63a5\u91dd\u5c0d\u8a72\u7db2\u5361\u53bb tcpdump \u5373\u53ef")),(0,p.kt)("p",null,"\u8a3b: \u9019\u908a\u4e0d\u6703\u89e3\u91cb\u70ba\u4ec0\u9ebc\u6211\u9019\u9ebc\u505a\uff0c\u7562\u7adf\u727d\u626f\u5230\u4e00\u4e9b\u7db2\u8def\u904b\u4f5c\u539f\u7406"),(0,p.kt)("p",null,"\u9019\u908a\u6293\u5230\u7684\u662f\u5bb9\u5668\u9032\u51fa\u5f8c\u7684\u5c01\u5305\uff0c\u5982\u679c\u60f3\u8981\u6293\u5230 VXLAN \u5305\u88dd\u7684\u5c01\u5305\uff0c\u90a3\u6b65\u9a5f\u5c31\u6703\u66f4\u8907\u96dc\uff0c\u9019\u908a\u5c31\u4e0d\u63a2\u8a0e\u3002"),(0,p.kt)("h2",{id:"calico"},"Calico"),(0,p.kt)("p",null,"Calico \u4e26\u4e0d\u4f7f\u7528 VXLAN \u9019\u7a2e\u5c01\u5305\u5c01\u88dd\u7684\u5354\u5b9a\u4f86\u8f49\u767c\u5c01\u5305\uff0c\u53d6\u5f97\u4ee3\u4e4b\u7684\u5247\u662f\u900f\u904e\u5404\u7a2e routing \u7684\u65b9\u5f0f\u4f86\u8f49\u767c\uff0c\u4e5f\u56e0\u70ba\u9019\u500b\u7279\u6027\u4f7f\u5f97\u8981\u627e\u5230\u5c0d\u61c9\u7684\u7db2\u5361\u6703\u7c21\u55ae\u975e\u5e38\u591a\u3002"),(0,p.kt)("p",null,"\u9019\u908a\u5c31\u4e0d\u4ecb\u7d39 Calico \u7684\u67b6\u69cb\uff0c\u76f4\u63a5\u7528\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b\u770b\u770b\u5982\u4f55\u91dd\u5c0d Calico \u7684\u65b9\u5f0f\u627e\u5230\u5c0d\u61c9\u7684\u865b\u64ec\u7db2\u5361"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash="},"\u2192 kubectl get pods -o wide\nNAME                         READY   STATUS    RESTARTS   AGE     IP                NODE      NOMINATED NODE   READINESS GATES\ndebug-pod-554f8fb4b4-4wbz5   2/2     Running   0          6m16s   192.168.252.196   k8s-dev   <none>           <none>\ndebug-pod-554f8fb4b4-dg2wd   2/2     Running   0          6m16s   192.168.252.194   k8s-dev   <none>           <none>\ndebug-pod-554f8fb4b4-hfj46   2/2     Running   0          6m16s   192.168.252.193   k8s-dev   <none>           <none>\ndebug-pod-554f8fb4b4-qw9g5   2/2     Running   0          6m16s   192.168.252.195   k8s-dev   <none>           <none>\ndebug-pod-554f8fb4b4-v5v9t   2/2     Running   0          6m16s   192.168.252.197   k8s-dev   <none>           <none>\n\n\u2192 ip route | grep 192.168.252.193\n192.168.252.193 dev cali60337b1a8c1 scope link\n\n\u2192 sudo tcpdump -vvv -i cali60337b1a8c1 icmp\ntcpdump: listening on cali60337b1a8c1, link-type EN10MB (Ethernet), capture size 262144 bytes\n05:52:52.146265 IP (tos 0x0, ttl 64, id 63515, offset 0, flags [DF], proto ICMP (1), length 84)\n    192.168.252.193 > dns.google: ICMP echo request, id 145, seq 138, length 64\n05:52:52.171319 IP (tos 0x0, ttl 61, id 64009, offset 0, flags [DF], proto ICMP (1), length 84)\n    dns.google > 192.168.252.193: ICMP echo reply, id 145, seq 138, length 64\n05:52:53.147177 IP (tos 0x0, ttl 64, id 63672, offset 0, flags [DF], proto ICMP (1), length 84)\n    192.168.252.193 > dns.google: ICMP echo request, id 145, seq 139, length 64\n05:52:53.161166 IP (tos 0x0, ttl 61, id 64014, offset 0, flags [DF], proto ICMP (1), length 84)\n    dns.google > 192.168.252.193: ICMP echo reply, id 145, seq 139, length 64\n")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u5148\u627e\u5230\u76ee\u6a19\u7684 PodIP"),(0,p.kt)("li",{parentName:"ol"},"\u900f\u904e ip route \u4f86\u770b\u770b\u7cfb\u7d71\u4e0a\u6703\u600e\u9ebc\u8f49\u767c\u9019\u500b\u5c01\u5305\uff0c\u7406\u8ad6\u4e0a\u53ef\u4ee5\u76f4\u63a5\u627e\u5230\u8a72 IP \u61c9\u8a72\u8981\u9001\u5230\u54ea\u500b\u7db2\u5361"),(0,p.kt)("li",{parentName:"ol"},"\u76f4\u63a5\u5c0d\u8a72\u7db2\u5361 ",(0,p.kt)("inlineCode",{parentName:"li"},"cali60337b1a8c1")," \u807d\u5c01\u5305\u5373\u53ef")),(0,p.kt)("h1",{id:"\u7d50\u8ad6"},"\u7d50\u8ad6"),(0,p.kt)("p",null,"\u7db2\u8def\u597d\u96e3"))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkhwchiu=self.webpackChunkhwchiu||[]).push([[97689],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),m=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return r.createElement(o.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=m(t),g=a,c=s["".concat(o,".").concat(g)]||s[g]||d[g]||i;return t?r.createElement(c,l(l({ref:n},u),{},{components:t})):r.createElement(c,l({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[s]="string"==typeof e?e:a,l[1]=p;for(var m=2;m<i;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},83386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var r=t(87462),a=(t(67294),t(3905));const i={title:"Binomial Heap",date:"2014-01-03 12:56",comments:!0,tags:["SDN","Network","OpenvSwitch"]},l=void 0,p={unversionedId:"techPost/2014/binomial-heap",id:"techPost/2014/binomial-heap",title:"Binomial Heap",description:"Binomial Heap\u662f\u7531\u4e00\u7fa4 Binomail Tree\u6240\u7d44\u6210\u7684",source:"@site/docs/techPost/2014/binomial-heap.md",sourceDirName:"techPost/2014",slug:"/techPost/2014/binomial-heap",permalink:"/docs/techPost/2014/binomial-heap",draft:!1,tags:[{label:"SDN",permalink:"/docs/tags/sdn"},{label:"Network",permalink:"/docs/tags/network"},{label:"OpenvSwitch",permalink:"/docs/tags/openv-switch"}],version:"current",frontMatter:{title:"Binomial Heap",date:"2014-01-03 12:56",comments:!0,tags:["SDN","Network","OpenvSwitch"]},sidebar:"techPost",previous:{title:"2014",permalink:"/docs/category/2014"},next:{title:"Bluez 5.x ",permalink:"/docs/techPost/2014/bluze-5x"}},o={},m=[],u={toc:m},s="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Binomial Heap"),"\u662f\u7531\u4e00\u7fa4 ",(0,a.kt)("strong",{parentName:"p"},"Binomail Tree"),"\u6240\u7d44\u6210\u7684\n",(0,a.kt)("strong",{parentName:"p"},"Binomial Tree(BT)"),"\u542b\u6709\u4e0b\u5217\u7279\u6027"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u9ad8\u5ea6\u70bak\u7684 BT\u5171\u67092^k\u500bnode"),(0,a.kt)("li",{parentName:"ul"},"\u9ad8\u5ea6\u70bak\u7684 BT\u53ef\u4ee5\u770b\u6210 BT0~BTk-1\u7684\u7d44\u5408 \u518d\u52a0\u4e0a\u4e00\u500broot\u7d44\u6210\n",(0,a.kt)("img",{parentName:"li",src:"http://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Binomial_Trees.svg/700px-Binomial_Trees.svg.png",alt:null}))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Binomial Heap")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u662f ",(0,a.kt)("strong",{parentName:"li"},"mergable heap")),(0,a.kt)("li",{parentName:"ul"},"\u7531\u4e00\u7fa4 ",(0,a.kt)("strong",{parentName:"li"},"Binomial Tree"),"\u7d44\u6210\uff0c\u6bcf\u500bBT\u90fd\u6eff\u8db3 min-heap\u7684\u6027\u8cea"),(0,a.kt)("li",{parentName:"ul"},"\u5c0d\u65bc\u9ad8\u5ea6\u70bak\u7684BT\u53ea\u80fd\u5b58\u5728\u6700\u591a\u4e00\u68f5"),(0,a.kt)("li",{parentName:"ul"},"\u4ee5\u4e8c\u9032\u4f4d\u4f86\u770b\u5f85\u7684\u8a71\uff0c\u7b2cK\u4f4d\u5c31\u4ee3\u8868\u662f\u5426\u5b58\u5728\u9ad8\u5ea6\u70baK\u7684BT",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"\u4ee5\u4e0b\u5716\u70ba\u4f8b\uff0c\u5c31\u662f11001 (\u53f3\u908a\u6700\u5c0f)"),(0,a.kt)("li",{parentName:"ul"},"\u56e0\u6b64\u4efb\u4f55\u6578\u91cf\u7684\u7d50\u9ede\u90fd\u53ef\u4ee5\u7528\u4e0d\u540c\u7684BT\u7d66\u7d44\u5408\u51fa\u4f86")))),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"http://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Binomial-heap-13.svg/498px-Binomial-heap-13.svg.png",alt:null})),(0,a.kt)("p",null,"##Implement##"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u63a1\u7528 ",(0,a.kt)("strong",{parentName:"li"},"Left-Child Right-sibling"),"\u7684\u65b9\u5f0f\u4f86\u5be6\u73fe\uff0c\u5de6\u908a\u6307\u5411child,\u53f3\u908a\u6307\u5411\u540c\u8f29"),(0,a.kt)("li",{parentName:"ul"},"value: node\u7684\u503c"),(0,a.kt)("li",{parentName:"ul"},"degree: \u4ee5\u6b64node\u70baroot\u7684BT\u7684\u9ad8\u5ea6"),(0,a.kt)("li",{parentName:"ul"},"parent: \u6307\u5411\u5176parent\n",(0,a.kt)("img",{parentName:"li",src:"http://user-image.logdown.io/user/415/blog/415/post/173103/3x9u0iDPRN606rAy5Ir7_%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202014-01-03%2021.42.57.png",alt:"\u87a2\u5e55\u622a\u5716 2014-01-03 21.42.57.png"}))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Node{\n    public:\n        Node* parent;\n        Node* child;\n        Node* sibling;\n        int value;\n        int degree;\n        Node(){\n            parent = NULL;\n            child = NULL;\n            sibling = NULL;\n            value = 0;\n            degree = 0;\n        }\n};\n")),(0,a.kt)("p",null,"##Functions##"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"getMin"),(0,a.kt)("li",{parentName:"ul"},"size"),(0,a.kt)("li",{parentName:"ul"},"Travese (postorder)"),(0,a.kt)("li",{parentName:"ul"},"mergeHeap"),(0,a.kt)("li",{parentName:"ul"},"Insert"),(0,a.kt)("li",{parentName:"ul"},"deleteMin")),(0,a.kt)("p",null,"##getMin##\n\u7531\u65bc\u6bcf\u500bBT\u672c\u8eab\u90fd\u5df2\u7d93\u662fmin-heap\u7684\u7279\u6027\u4e86\uff0c\u56e0\u6b64\u53ea\u8981\u91dd\u5c0d\u6bcf\u500bBT\u7684root\u6bd4\u8f03\u5176\u503c\u5373\u53ef"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int getMin(){\n  Node* x = head;\n  int min = INT_MAX;\n  while(x!=NULL){\n    if(x->value < min)\n    min = x->value;\n    x = x->sibling;\n  }\n    return min;\n}\n")),(0,a.kt)("p",null,"##size##\n\u7531\u65bc ",(0,a.kt)("strong",{parentName:"p"},"Binomial Heap"),"\u5167\u90fd\u662f\u7531 ",(0,a.kt)("strong",{parentName:"p"},"Binomial Tree"),"\u7d44\u6210\uff0c\u6240\u4ee5\u53ef\u4ee5\u7531\u6bcf\u500bBT\u7684degree\u5f97\u5230\u5176node\u6578\u91cf\n\u518d\u628a\u6240\u6709\u52a0\u7e3d\u5373\u53ef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"int size(){\n    Node* tmp = head;\n    int count=0;\n    while(tmp){\n        count+= (1<<tmp->degree);  // 2^degree\n        tmp = tmp->sibling;\n    }\n    return count;\n}\n")),(0,a.kt)("p",null,"##Postorder##\n\u9019\u908a\u662f\u6bcf\u500bBT\u90fd\u8981\u7368\u7acb\u8dd1\u4e00\u6b21Postorder\u7684\u7d50\u679c\uff0c\u6240\u4ee5\u5728\u905e\u8ff4\u7684\u904e\u7a0b\u4e2d\u8981\u5c0droot\u505a\u4e00\u4e9b\u63a7\u5236"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'//\u5c0d\u6bcf\u4e00\u68f5BT\u90fd\u8dd1\u4e00\u6b21postorder\nvoid postorder(){\n  Node* tmp = head;\n  while(tmp){\n    _postorder(tmp);\n    tmp = tmp->sibling;\n}\n    printf("\\n");\n}\n\n//\u7528parent\u5224\u65b7\u662f\u4e0d\u662froot,\u907f\u514droot\u8dd1\u53bb\u547c\u53eb\u5230\u5225\u7684BT\nvoid _postorder(Node* node){\n    if(!node)\n        return;\n    _postorder(node->child);\n    if(node->parent)\n        _postorder(node->sibling);\n    printf("%d ",node->value);\n}\n')),(0,a.kt)("p",null,"##MergeHeap##\n\u8981\u5408\u4f75\u5169\u500b ",(0,a.kt)("strong",{parentName:"p"},"Binomial Heap")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5148\u628a\u5169\u500b ",(0,a.kt)("strong",{parentName:"li"},"Binomail Heap"),"\u7684 BT list\u7d66\u91cd\u65b0\u4e32\u63a5\u8d77\u4f86\uff0c\u4ee5degree\u70bakey\u505asorting."),(0,a.kt)("li",{parentName:"ul"},"\u518d\u6839\u64da\u9019\u500b\u65b0\u7684BT list\u958b\u59cb\u9032\u884c\u4e00\u7cfb\u5217\u7684\u5408\u4f75"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u53ea\u6709\u5169\u500b\u9ad8\u5ea6\u76f8\u540c\u7684BT\uff0c\u5c31\u76f4\u63a5\u5408\u4f75"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u6709\u4e09\u500b\u9ad8\u5ea6\u76f8\u540c\u7684BT\uff0c\u5c31\u628a\u5f8c\u9762\u5169\u68f5\u5408\u4f75(\u7dad\u6301sorting)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void MergeHeap(BinomialHeap &bh){\n\n    mergeHeap(bh);  //\u5148\u628aBT list\u7d66\u91cd\u65b0\u4e32\u63a5\u8d77\u4f86\n    Node* prev = NULL;\n    Node* x = head;\n    Node* next = x->sibling;\n    while(next){\n        if( (x->degree != next->degree) || next->sibling && next->sibling->degree == x->degree){\n            prev = x;  //\u524d\u5f8c\u5169\u68f5BT\u7684\u9ad8\u5ea6\u4e0d\u540c \u6216\u662f \u5f8c\u9762\u4e09\u68f5BT\u7684\u9ad8\u5ea6\u90fd\u76f8\u540c\n            x = next;  //\u90a3\u5c31\u628a\u6307\u6a19\u5f80\u524d\u79fb\u52d5\uff0c\u4e0b\u6b21\u518d\u5408\u4f75\n        }\n        else if( x->value <= next->value){  //\u524d\u9762BT\u7684\u503c\u6bd4\u8f03\u5c0f\uff0c\u6240\u4ee5\u5f8c\u9762\u7684\u5408\u4f75\u9032\u4f86\n            x->sibling = next->sibling;\n            mergeTree(next,x);\n        }\n        else{ //\u524d\u9762\u90a3\u68f5BT\u7684\u503c\u6bd4\u8f03\u5927\uff0c\u8981\u5f80\u5f8c\u5408\u4f75\uff0c\u8996\u60c5\u6cc1\u4e5f\u8981\u66f4\u65b0 head\u6307\u6a19\n            if(!prev){\n                head = next;                //\u66f4\u65b0head \u6307\u6a19\n            }\n            else{\n                prev->sibling = next;\n            }\n            mergeTree(x,next);           //\u5408\u4f75\n            x = next;\n        }\n        next = next->sibling;\n    }\n}\n")),(0,a.kt)("p",null,"\u8981\u628a\u5169\u500b ",(0,a.kt)("strong",{parentName:"p"},"Binomial Heap"),"\u7684BT list\u7d66\u91cd\u65b0\u4e32\u63a5\u8d77\u4f86\uff0c\u63a1\u7528 ",(0,a.kt)("strong",{parentName:"p"},"merge sort\u7684\u65b9\u6cd5"),"\n",(0,a.kt)("img",{parentName:"p",src:"http://user-image.logdown.io/user/415/blog/415/post/173103/4wzFb15nSdmxfVoiRPEm_%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202014-01-03%2022.49.08.png",alt:"\u87a2\u5e55\u622a\u5716 2014-01-03 22.49.08.png"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"li"},"newHead"),"\u7d00\u9304\u5408\u4f75\u5f8c\u7684\u982d"),(0,a.kt)("li",{parentName:"ul"},"\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"li"},"newCurr"),"\u4f86\u7d00\u9304\u6bcf\u6b21\u5408\u4f75\u5f8c\u7684\u5c3e")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void mergeHeap(BinomialHeap &bh){\n    Node* head2 = bh.head;\n    Node* head1 = head;\n\n    Node* newHead, *newCurr;\n\n    if(!head1){            //\u5982\u679c\u672c\u8eab\u662f\u7a7a\u7684\uff0c\u5c31\u4e0d\u9700\u8981\u5408\u4f75\uff0c\u76f4\u63a5\u6307\u5411\u5c0d\u65b9\u5373\u53ef\n        head = head2;\n        return ;\n    }\n  else if(!head2){           //\u5c0d\u65b9\u662f\u7a7a\u7684\uff0c\u4e5f\u4e0d\u9700\u8981\u5408\u4f75\n    return ;\n  }\n\n    //\u5148\u884c\u5c0b\u627e\u8ab0\u7684\u958b\u982d\u6bd4\u8f03\u5c0f\uff0c\u7576\u505a\u65b0\u4e32\u5217\u7684\u982d\n    if(head1->degree > head2->degree){\n        newHead = newCurr = head2;\n        head2 = head2->sibling;\n    }\n    else {\n        newHead = newCurr = head1;\n        head1 = head1->sibling;\n    }\n\n    while(head1 && head2){\n        if(head1->degree < head2->degree){\n            newCurr->sibling = head1;\n            newCurr = head1;\n            head1 = head1->sibling;\n        }\n        else {\n            newCurr->sibling = head2;\n            newCurr = head2;\n            head2 = head2->sibling;\n        }\n\n    }\n    while(head1){\n        newCurr->sibling = head1;\n        newCurr = head1;\n        head1 = head1->sibling;\n    }\n    while(head2){\n        newCurr->sibling = head2;\n        newCurr = head2;\n        head2 = head2->sibling;\n    }\n\n    head = newHead;\n}\n")),(0,a.kt)("p",null,"\u5408\u4f75\u5169\u500b ",(0,a.kt)("strong",{parentName:"p"},"Binomial Tree"),"\uff0c\u7531\u65bc\u6211\u5011\u662fmin-heap\u7684\u7279\u6027\uff0c\u6240\u4ee5\u7576\u5169\u68f5\u9ad8\u5ea6\u76f8\u7b49\u7684BT\u8981\u5408\u4f75\u6642\uff0c\u6839\u64daroot\u7684\u503c\u4f86\u6c7a\u5b9a\u8ab0\u662f\u5408\u4f75\u5f8c\u7684root."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"http://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Binomial_heap_merge1.svg/275px-Binomial_heap_merge1.svg.png",alt:null})),(0,a.kt)("p",null,"\u5047\u8a2d\u5df2\u7d93\u77e5\u9053BT(y)\u7684\u503c\u6bd4BT(z)\u9084\u8981\u5927\uff0c\u6240\u4ee5BT(z)\u6703\u662f\u5408\u4f75\u5f8c\u7684root"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"y\u7684parent\u6307\u5230z"),(0,a.kt)("li",{parentName:"ul"},"y\u7684sibling \u6307\u5230 z\u672c\u4f86\u7684child"),(0,a.kt)("li",{parentName:"ul"},"z\u7684child \u6307\u5230y"),(0,a.kt)("li",{parentName:"ul"},"z\u7684degree \u52a0\u4e00")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void mergeTree(Node* y,Node* z){\n    y->parent = z;\n    y->sibling = z->child;\n    z->child = y;\n    z->degree++;\n}\n")),(0,a.kt)("p",null,"##Insert##\n\u8981\u63d2\u5165\u4e00\u500b\u65b0\u7684\u5143\u7d20\uff0c\u5c31\u662f\u5275\u898b\u4e00\u500b\u65b0\u7684 ",(0,a.kt)("strong",{parentName:"p"},"Binomial Heap"),"\uff0c\u7136\u5f8c\u8ddf\u539f\u672c\u7684Heap\u57f7\u884c\u5408\u4f75\u5373\u53ef"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void insert(int value){\n    BinomialHeap bh;\n    bh.head = new Node();\n    bh.head->value = value;\n    MergeHeap(bh);\n}\n")),(0,a.kt)("p",null,"##Delete##\n\u8981\u5f9e ",(0,a.kt)("strong",{parentName:"p"},"BinomialHeap"),"\u4e2d\u522a\u9664\u7576\u524d\u6700\u5c0f\u5143\u7d20"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5148\u627e\u5230\u6700\u5c0f\u5143\u7d20\u6240\u5728\u7684\u90a3\u68f5BT"),(0,a.kt)("li",{parentName:"ul"},"\u628a\u8a72BT\u5f9elist\u88e1\u9762\u62d4\u9664"),(0,a.kt)("li",{parentName:"ul"},"\u628a\u8a72BT\u7684children\u7d66\u53cd\u5411\u6392\u5e8f(degree\u70bakey)"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u8ddf\u539f\u672c\u7684BT list\u5408\u4f75")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"http://user-image.logdown.io/user/415/blog/415/post/173103/IsA2xggSb2hfoKuPJ4N6_%E8%9E%A2%E5%B9%95%E6%88%AA%E5%9C%96%202014-01-03%2023.02.35.png",alt:"\u87a2\u5e55\u622a\u5716 2014-01-03 23.02.35.png"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"void deleteMin(){\n    int min = head->value;\n    Node* tmp = head;\n    Node* minPre = NULL;\n    Node* minCurr = head;\n    // \u627e\u5230\u6700\u5c0f\u7684node\u4f4d\u65bc\u4f55\u8655\uff0c\u7531\u65bc\u8981\u5c07\u8a72BT\u7d66\u62d4\u9664\uff0c\u6240\u4ee5\u5fc5\u9808\u8981\u8a18\u5f97\u8a72BT\u524d\u9762\u90a3\u68f5BT\n    // \u5982\u679c\u6700\u5c0f\u68f5\u7684\u662f\u7b2c\u4e00\u68f5\uff0c\u90a3\u4e5f\u8981\u4e00\u4f75\u66f4\u65b0 head \u6307\u6a19\n    while(tmp->sibling){\n        if(tmp->sibling->value < min){\n            min = tmp->sibling->value;\n            minPre = tmp;\n            minCurr = tmp->sibling;\n        }\n        tmp = tmp->sibling;\n    }\n    if(!minPre && minCurr) //\u6700\u5c0f\u68f5\u662f\u7b2c\u4e00\u500b\n        head = minCurr->sibling;\n    else if(minPre && minCurr)\n        minPre->sibling = minCurr->sibling;\n\n  //H' Make-BINOMIAL-HEAP()\n\n    Node *pre,*curr;\n    //\u7528\u4e09\u500b\u6307\u6a19\u53cd\u8f49\u4e00\u500b single link list\n    pre = tmp = NULL;\n    curr = minCurr->child;\n    while(curr){\n        tmp = curr->sibling;\n        curr->sibling = pre;\n        curr->parent = NULL;\n        pre = curr;\n        curr = tmp;\n    }\n    //\u5275\u5efa\u4e00\u68f5\u65b0\u7684binomial heap,\u4e26\u4e14\u8b93\u4ed6\u7684head \u6307\u5411\u53cd\u8f49\u5f8c\u7684BT list\n  BinomialHeap bh ;\n    bh.head = pre;\n    //\u518d\u5ea6\u5408\u4f75\n    MergeHeap(bh);\n\n}\n")),(0,a.kt)("p",null,"\u5716\u7247\u4f86\u81ea"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"http://en.wikipedia.org/wiki/Binomial_heap"},"Binomial Wiki")),(0,a.kt)("li",{parentName:"ol"},"Introduction To Algorithms\uff0cChapter 19 Binomial Heaps")))}d.isMDXComponent=!0}}]);